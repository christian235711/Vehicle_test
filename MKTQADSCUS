create or replace PACKAGE BODY MKTQADSCUS AS

---------------------------------------------------------------------------------------------------
--                              Customer 
--------------------------------------------------------------------------------------------------- 

Function ALIM_MKTQAFSL_CUSTOMER ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUSTOMER';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUSTOMER'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;
  V_ISVATELIGIBLE VARCHAR2(10);

  Cursor c_mkt Is
                    SELECT
                        SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' as TECH_ID	,
                              sysdate AS TECH_DATEEXTRACTION,
                              NULL AS tech_dateInsertion,
                              SCS_COUNTRY_CD AS  COUNTRYBRANCHCODE,
                              SCS_CUSTOMER_ID AS SRCPARTYID,                      
                              SCS_COUNTRY_CD AS  SRCJVCODE,      
                              'FSL' AS  SRCAPPCODE,
                              SCS_CUSTOMERSEGMENT AS  customerTypeLabel,
                              SCS_ESTABLISHMENTDATE AS creationPartyDate,
                              SCS_EFFECTIVE_FROM_DT AS  LASTUPDATEPARTYDATE,
                              SCS_FULLNAME AS  FULLNAME,
                              SCS_ESTABLISHMENTDATE AS firstContractDate,
                              SCS_FIRSTNAME AS  FIRSTNAME,
                              SCS_LASTNAME AS  USAGENAME,
                              SCS_COUNTRY_CD AS  FISCCOUNTRYCODE,
                              SCS_COUNTRYCODEISO2 AS fiscCountryIso2,
                              SCS_LEGALNAME AS businessName,
                              SCS_PLN_TRADINGNAME AS  COMPANYNAME,
                              SCS_LEGALENTITYCODE AS legalCategoryCode,
                              (CASE WHEN SCS_LEGALENTITYCODE = '400008' THEN 'Freelancer'  
                                   WHEN SCS_LEGALENTITYCODE = '400010' THEN 'Partnership'
                                   WHEN SCS_LEGALENTITYCODE = '400012' THEN 'Stock Corporation'
                                   WHEN SCS_LEGALENTITYCODE = '400014' THEN 'Entrepreneurial Company'
                                   WHEN SCS_LEGALENTITYCODE = '450396' THEN 'Limited partnership of a Limited (GmbH) and a limited partner (GmbH & Co. KG)'
                                   WHEN SCS_LEGALENTITYCODE = '700' THEN 'Private Person (Company Car Driver)'
                                   WHEN SCS_LEGALENTITYCODE = '100001' THEN 'Limited (GmbH)'
                                   WHEN SCS_LEGALENTITYCODE = '400159' THEN 'Corporation under public law'
                                   WHEN SCS_LEGALENTITYCODE = '400158' THEN 'Registered association'
                                   WHEN SCS_LEGALENTITYCODE = '400162' THEN 'Public law institutions'
                                   WHEN SCS_LEGALENTITYCODE = '400009' THEN 'Private Partnership'
                                   WHEN SCS_LEGALENTITYCODE = '400011' THEN 'Limited Partnership'
                                   WHEN SCS_LEGALENTITYCODE = '1000036' THEN 'eingetragene/r Kaufmann/frau'
                                   WHEN SCS_LEGALENTITYCODE = '100421'  THEN '(Unknown)' END) AS legalCategory, --- A REVOIR Unknown
                              SCS_ESTABLISHMENTDATE AS creationDate,
                              (CASE WHEN dlr.SDL_BUSINESSPARTNER_ID IS NOT NULL THEN 'true' ELSE 'false' END) AS isDealer,
                              (CASE WHEN SCS_TAXLIABILITYCODE = '1089' THEN 'true' ELSE 'false' END) AS isVatEligible,
                              'FSL' AS boOrigin,
                              'true' AS isEligible4Csf2ml,  ---- insert
                              (CASE WHEN cst.SCS_STATUSCODE IN ('694','100071') OR cst.SCS_CARFLEETSIZE <> '0' THEN 'true' ELSE 'false' END) AS fleetFlag,
                              (CASE WHEN cst.SCS_STATUSCODE IN ('694', '100357', '100555') THEN 'Active' ELSE 'Inactive' END) AS statusCode,
                              'true' AS ISLEASCO,
                              'false' AS ISFINCO
                    --- A REVOIR LA JOINTURE
                    FROM  MKTOV.MKTQT_S_CSTMR cst,
                          MKTOV.MKTQT_S_DLR dlr                 
                    WHERE cst.SCS_BUSINESSPARTNER_ID = dlr.SDL_BUSINESSPARTNER_ID (+);
                             
               
               

 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

         
          

        INSERT INTO MKTOV.MKTQT_CUSTOMER 
              (
TECH_ID,
TECH_DATEEXTRACTION,
TECH_DATEINSERTION,
COUNTRYBRANCHCODE,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
CUSTOMERTYPELABEL,
CREATIONPARTYDATE,
LASTUPDATEPARTYDATE,
FULLNAME,
FIRSTCONTRACTDATE,
FIRSTNAME,
USAGENAME,
FISCCOUNTRYCODE,
FISCCOUNTRYISO2,
BUSINESSNAME,
COMPANYNAME,
LEGALCATEGORYCODE,
LEGALCATEGORY,
CREATIONDATE,
ISDEALER,
ISVATELIGIBLE,
BOORIGIN,
ISELIGIBLE4CSF2ML,
FLEETFLAG,
STATUSCODE,
ISLEASCO,
ISFINCO		,	
CODE_PAYS	,
DATE_SITU	
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.TECH_DATEINSERTION,
REC.COUNTRYBRANCHCODE,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.CUSTOMERTYPELABEL,
REC.CREATIONPARTYDATE,
REC.LASTUPDATEPARTYDATE,
REC.FULLNAME,
REC.FIRSTCONTRACTDATE,
REC.FIRSTNAME,
REC.USAGENAME,
REC.FISCCOUNTRYCODE,
REC.FISCCOUNTRYISO2,
REC.BUSINESSNAME,
REC.COMPANYNAME,
REC.LEGALCATEGORYCODE,
REC.LEGALCATEGORY,
REC.CREATIONDATE,
REC.ISDEALER,
REC.ISVATELIGIBLE,
REC.BOORIGIN,
REC.ISELIGIBLE4CSF2ML,
REC.FLEETFLAG,
REC.STATUSCODE,
REC.ISLEASCO,
REC.ISFINCO,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUSTOMER 
          Set     	
                    
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    TECH_DATEINSERTION = REC.TECH_DATEINSERTION,
                    COUNTRYBRANCHCODE = REC.COUNTRYBRANCHCODE,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    CUSTOMERTYPELABEL = REC.CUSTOMERTYPELABEL,
                    CREATIONPARTYDATE = REC.CREATIONPARTYDATE,
                    LASTUPDATEPARTYDATE = REC.LASTUPDATEPARTYDATE,
                    FULLNAME = REC.FULLNAME,
                    FIRSTCONTRACTDATE = REC.FIRSTCONTRACTDATE,
                    FIRSTNAME = REC.FIRSTNAME,
                    USAGENAME = REC.USAGENAME,
                    FISCCOUNTRYCODE = REC.FISCCOUNTRYCODE,
                    FISCCOUNTRYISO2 = REC.FISCCOUNTRYISO2,
                    BUSINESSNAME = REC.BUSINESSNAME,
                    COMPANYNAME = REC.COMPANYNAME,
                    LEGALCATEGORYCODE = REC.LEGALCATEGORYCODE,
                    LEGALCATEGORY = REC.LEGALCATEGORY,
                    CREATIONDATE = REC.CREATIONDATE,
                    ISDEALER = REC.ISDEALER,
                    ISVATELIGIBLE = REC.ISVATELIGIBLE,
                    BOORIGIN = REC.BOORIGIN,
                    ISELIGIBLE4CSF2ML = 'false',  -- update
                    FLEETFLAG = REC.FLEETFLAG,
                    STATUSCODE = REC.STATUSCODE,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    DATE_SITU = p_date_trai		
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   END;
End ALIM_MKTQAFSL_CUSTOMER;







Function ALIM_MKTQAFSL_CUS_ACTIVITY ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_ACTIVITY';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_ACTIVITY'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                  SELECT
                            SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                            sysdate  AS TECH_DATEEXTRACTION,
                            SCS_CUSTOMER_ID  AS SRCPARTYID,
                            SCS_COUNTRY_CD  AS SRCJVCODE,
                            'FSL'  AS SRCAPPCODE,
                            SCS_ISICCODE AS CODE,  
                            'ISIC' AS TYPECODE                          
                                
                    FROM  MKTOV.MKTQT_S_CSTMR cst;
                                                                   


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
          

        INSERT INTO MKTOV.MKTQT_CUS_ACTIVITY 
              (
TECH_ID,
TECH_DATEEXTRACTION,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
CODE,
TYPECODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.CODE,
REC.TYPECODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_ACTIVITY 
          set     	
                    ---TECH_ID = REC.TECH_ID,
                    TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    CODE = REC.CODE,
                    TYPECODE = REC.TYPECODE,
                    DATE_SITU =	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_ACTIVITY;






Function ALIM_MKTQAFSL_CUS_PERS_CONTACT ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_PERS_CONTACT';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_PERSONCONTACTS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                  SELECT
                            SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' as TECH_ID	,
                            sysdate AS TECH_DATEEXTRACTION,
                            SCS_CUSTOMER_ID AS SRCPARTYID,                      
                            SCS_COUNTRY_CD AS  SRCJVCODE,      
                            'FSL' AS  SRCAPPCODE,
                            SCS_FULLNAME AS contactName,
                            SCS_EMAIL AS email,
                            SCS_TELEPHONE AS phoneNumber
                            
                                
                    FROM  MKTOV.MKTQT_S_CSTMR cst;
                             
               
                                   


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
          

        INSERT INTO MKTOV.MKTQT_CUS_PERSONCONTACTS 
              (
TECH_ID,
TECH_DATEEXTRACTION,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
CONTACTNAME,
EMAIL,
PHONENUMBER,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.CONTACTNAME,
REC.EMAIL,
REC.PHONENUMBER,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_PERSONCONTACTS 
          set     	
                    ---TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    CONTACTNAME = REC.CONTACTNAME,
                    EMAIL = REC.EMAIL,
                    PHONENUMBER = REC.PHONENUMBER,
                    DATE_SITU =	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_PERS_CONTACT;



Function ALIM_MKTQAFSL_CUS_ROLEBANKINGS ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_ROLEBANKINGS';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_ROLEBANKINGS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                    SELECT
                             SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS tech_id,
                             sysdate AS tech_dateExtraction,
                             SCS_CUSTOMER_ID AS srcPartyId,
                             SCS_COUNTRY_CD AS srcJvCode,
                             'FSL' AS srcAppCode,
                             'CUSTOMER' AS roleBankingCode
                             
                   FROM  MKTOV.MKTQT_S_CSTMR cst;
                   


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
          

        INSERT INTO MKTOV.MKTQT_CUS_ROLEBANKINGS 
              (
TECH_ID,
TECH_DATEEXTRACTION ,
SRCPARTYID ,
SRCJVCODE ,
SRCAPPCODE ,
ROLEBANKINGCODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION ,
REC.SRCPARTYID ,
REC.SRCJVCODE ,
REC.SRCAPPCODE ,
REC.ROLEBANKINGCODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_ROLEBANKINGS 
          set     	
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION ,
                    SRCPARTYID = REC.SRCPARTYID ,
                    SRCJVCODE = REC.SRCJVCODE ,
                    SRCAPPCODE = REC.SRCAPPCODE ,
                    ROLEBANKINGCODE = REC.ROLEBANKINGCODE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_ROLEBANKINGS;



Function ALIM_MKTQAFSL_CUS_NATIONALID ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_NATIONALID';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;
  V_NATIONALIDENTIFIER VARCHAR2(30);

  Cursor c_mkt Is
                    SELECT
                        SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                        SCS_CUSTOMER_ID AS SRCPARTYID,
                        SCS_COUNTRY_CD AS SRCJVCODE,
                        'FSL' AS SRCAPPCODE,
                        SCS_VATNUMBER AS NATIONALIDENTIFIER, 
                        'VAT' AS NATIONALIDENTIFIERTYPECODE
                        
                    FROM  MKTOV.MKTQT_S_CSTMR cst; 
               



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
        

        INSERT INTO MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS 
              (
TECH_ID,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
NATIONALIDENTIFIERTYPECODE,
NATIONALIDENTIFIER,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.NATIONALIDENTIFIERTYPECODE,
V_NATIONALIDENTIFIER,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS 
          set     	
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    NATIONALIDENTIFIERTYPECODE = REC.NATIONALIDENTIFIERTYPECODE,
                    NATIONALIDENTIFIER = V_NATIONALIDENTIFIER,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_NATIONALID;



Function ALIM_MKTQAFSL_CUS_CONTACTMEAN ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CONTACTMEAN';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;
  V_NATIONALIDENTIFIER VARCHAR2(30);

  Cursor c_mkt Is
                    SELECT
                               SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                               sysdate AS TECH_DATEEXTRACTION,
                               SCS_COUNTRY_CD AS COUNTRYBRANCHCODE,
                               SCS_CUSTOMER_ID AS SRCPARTYID,
                               SCS_COUNTRY_CD AS SRCJVCODE,
                               'FSL' AS SRCAPPCODE
                    FROM  MKTOV.MKTQT_S_CSTMR cst; 

 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN 
              (
TECH_ID,
TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.COUNTRYBRANCHCODE,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN 
          set     	
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    COUNTRYBRANCHCODE = REC.COUNTRYBRANCHCODE,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CONTACTMEAN;




Function ALIM_MKTQAFSL_CUS_CTMEAN_ADRS ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_ADRS';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;
  V_NATIONALIDENTIFIER VARCHAR2(30);

  Cursor c_mkt Is
                    select
                               SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                               sysdate AS TECH_DATEEXTRACTION,
                               SCS_FORMATTEDADDRESS AS NUMBERANDSTREET,
                               SCS_POSTALCODE AS ZIPCODE,
                               SCS_CITY AS CITY,
                               SCS_COUNTRY AS COUNTRYCODE,
                               SCS_COUNTRYCODEISO2 AS COUNTRYISO2,
                               'true' AS ISLEASCO,
                               'false' AS ISFINCO
                                
                    FROM  MKTOV.MKTQT_S_CSTMR cst;                 



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS 
              (
TECH_ID,
TECH_DATEEXTRACTION,
NUMBERANDSTREET,
ZIPCODE,
CITY,
COUNTRYCODE,
COUNTRYISO2,
ISLEASCO,
ISFINCO,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.NUMBERANDSTREET,
REC.ZIPCODE,
REC.CITY,
REC.COUNTRYCODE,
REC.COUNTRYISO2,
REC.ISLEASCO,
REC.ISFINCO,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS 
          set     	
                    TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    NUMBERANDSTREET = REC.NUMBERANDSTREET,
                    ZIPCODE = REC.ZIPCODE,
                    CITY = REC.CITY,
                    COUNTRYCODE = REC.COUNTRYCODE,
                    COUNTRYISO2 = REC.COUNTRYISO2,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_ADRS;



Function ALIM_MKTQAFSL_CUS_CTMEAN_PHONE ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_PHONE';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;
  V_isBusinessUse VARCHAR2(30);

  Cursor c_mkt Is
                    select
                              SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                              sysdate as TECH_DATEEXTRACTION,
                              SCS_TELEPHONE as phoneNumber,
                              'true' as ISLEASCO,
                              'false' as ISFINCO
                    FROM  MKTOV.MKTQT_S_CSTMR cst; 



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES 
              (
TECH_ID,
TECH_DATEEXTRACTION,
PHONENUMBER,
ISLEASCO,
ISFINCO,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.PHONENUMBER,
REC.ISLEASCO,
REC.ISFINCO,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES 
          set     	
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    PHONENUMBER = REC.PHONENUMBER,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_PHONE;


Function ALIM_MKTQAFSL_CUS_CTMEAN_EMAIL ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_EMAIL';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                    select
                              SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                              sysdate as TECH_DATEEXTRACTION,
                              SCS_EMAIL as email,
                              'true' as ISLEASCO,
                              'false' as ISFINCO
                              
                     FROM  MKTOV.MKTQT_S_CSTMR cst;                   


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS 
              (
TECH_ID,
TECH_DATEEXTRACTION,
EMAIL,
ISLEASCO,
ISFINCO,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.EMAIL,
REC.ISLEASCO,
REC.ISFINCO,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS 
          set     	
                    TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    EMAIL = REC.EMAIL,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_EMAIL;


Function ALIM_MKTQAFSL_CUS_CTMEAN_BKINF ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_BKINF';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                    select
                                SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                                sysdate AS TECH_DATEEXTRACTION,
                                SCS_CUSTOMER_ID AS SRCPARTYID,
                                SCS_COUNTRY_CD AS SRCJVCODE,
                                'FSL' AS SRCAPPCODE,
                                SCS_ACCOUNTNUMBER AS SEPAIBAN

                     FROM  MKTOV.MKTQT_S_CSTMR cst;    



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO 
              (
TECH_ID,
TECH_DATEEXTRACTION,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
SEPAIBAN,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.SEPAIBAN,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO 
          set     	
                    TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    SEPAIBAN = REC.SEPAIBAN,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_BKINF;



Function ALIM_MKTQAFSL_CUS_CTMEAN_CRREF ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_CRREF';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                    select
                               SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                               sysdate AS TECH_DATEEXTRACTION,
                                SCS_CUSTOMER_ID AS SRCPARTYID,
                                SCS_COUNTRY_CD AS SRCJVCODE,
                                'FSL' AS SRCAPPCODE
                                
                     FROM  MKTOV.MKTQT_S_CSTMR cst; 



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF 
              (
TECH_ID,
TECH_DATEEXTRACTION,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF 
          set     	
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_CRREF;


Function ALIM_MKTQAFSL_CUS_CTMEAN_EXREF ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUS_CTMEAN_EXREF';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     number := 0;

  Cursor c_mkt Is
                    select
                            SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' as     TECH_ID,
                              'FSL' as APPLICATIONEXTCODE,
                              'OV MILES' as APPLICATIONEXTLABEL, --- A REVOIR
                              SCS_CUSTOMER_ID as  partyRefExt,
                              SCS_COUNTRY_CD as jvExtCode
                              
                     FROM  MKTOV.MKTQT_S_CSTMR cst; 


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;  
         
         
        INSERT INTO MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS 
              (
TECH_ID,
APPLICATIONEXTCODE,
APPLICATIONEXTLABEL,
PARTYREFEXT,
JVEXTCODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.APPLICATIONEXTCODE,
REC.APPLICATIONEXTLABEL,
REC.PARTYREFEXT,
REC.JVEXTCODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS 
          set     	
                    TECH_ID = REC.TECH_ID,
                    APPLICATIONEXTCODE = REC.APPLICATIONEXTCODE,
                    APPLICATIONEXTLABEL = REC.APPLICATIONEXTLABEL,
                    PARTYREFEXT = REC.PARTYREFEXT,
                    JVEXTCODE = REC.JVEXTCODE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


                                        
          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   end;
end ALIM_MKTQAFSL_CUS_CTMEAN_EXREF;




---------------------------------------------------------------------------------------------------
--                              CustomerProfile 
---------------------------------------------------------------------------------------------------  


Function ALIM_MKTQAFSL_CUSTOMER_PROFILE ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUSTOMER_PROFILE';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUSTOMER_PROFILE'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT
                                SCS_CUSTOMER_ID||SCS_COUNTRY_CD||'FSL' AS TECH_ID,
                                SCS_COUNTRY_CD AS COUNTRYBRANCHCODE,
                                SCS_CUSTOMER_ID AS SRCPARTYID,
                                SCS_COUNTRY_CD AS SRCJVCODE,
                                'FSL' AS SRCAPPCODE,
                                (CASE WHEN SCS_STATUSCODE = '100555' THEN 'true' ELSE 'false' END) AS UNPAIDFLAG,  --- A REVOIR
                                'true' AS ISLEASCO,
                                'false' AS ISFINCO
                     FROM  MKTOV.MKTQT_S_CSTMR cst; 

 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_CUSTOMER_PROFILE 
              (
TECH_ID,
COUNTRYBRANCHCODE,
SRCPARTYID,
SRCJVCODE,
SRCAPPCODE,
UNPAIDFLAG,
ISLEASCO,
ISFINCO,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.COUNTRYBRANCHCODE,
REC.SRCPARTYID,
REC.SRCJVCODE,
REC.SRCAPPCODE,
REC.UNPAIDFLAG,
REC.ISLEASCO,
REC.ISFINCO,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUSTOMER_PROFILE 
          Set     	
                    ---TECH_ID = REC.TECH_ID,
                    COUNTRYBRANCHCODE = REC.COUNTRYBRANCHCODE,
                    SRCPARTYID = REC.SRCPARTYID,
                    SRCJVCODE = REC.SRCJVCODE,
                    SRCAPPCODE = REC.SRCAPPCODE,
                    UNPAIDFLAG = REC.UNPAIDFLAG,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_CUSTOMER_PROFILE;




Function ALIM_MKTQAFSL_CUSTOMER_PRF_CTT ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_CUSTOMER_PRF_CTT';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_CUSTOMER_PROFILE_CTT'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT
                              SFP_CUSTOMER_ID||SFP_COUNTRY_CD||'FSL' as     tech_id,
                              'CLIE' as stakeholderRole,
                              SFP_CONTRACT_ID as contractRef,
                              SFP_CONTRACT_STATUS_ENUMID as accountStatus,
                              SFP_DEALER_ID as dealershipRef,
                              SFP_CHASSIS_NUMBER as vehSerialNumber,
                              'true' as isLeasco,
                              'false' as isFinco,
                              'FSL' as backOfficeOrigin	
                    FROM MKTOV.MKTQT_S_FPA_STCK_FLW;


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_CUSTOMER_PROFILE_CTT 
              (
TECH_ID,
STAKEHOLDERROLE,
CONTRACTREF,
ACCOUNTSTATUS,
DEALERSHIPREF,
VEHSERIALNUMBER,
ISLEASCO,
ISFINCO,
BACKOFFICEORIGIN,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.STAKEHOLDERROLE,
REC.CONTRACTREF,
REC.ACCOUNTSTATUS,
REC.DEALERSHIPREF,
REC.VEHSERIALNUMBER,
REC.ISLEASCO,
REC.ISFINCO,
REC.BACKOFFICEORIGIN,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_CUSTOMER_PROFILE_CTT 
          Set     	
                    --TECH_ID = REC.TECH_ID,
                    STAKEHOLDERROLE = REC.STAKEHOLDERROLE,
                    CONTRACTREF = REC.CONTRACTREF,
                    ACCOUNTSTATUS = REC.ACCOUNTSTATUS,
                    DEALERSHIPREF = REC.DEALERSHIPREF,
                    VEHSERIALNUMBER = REC.VEHSERIALNUMBER,
                    ISLEASCO = REC.ISLEASCO,
                    ISFINCO = REC.ISFINCO,
                    BACKOFFICEORIGIN = REC.BACKOFFICEORIGIN,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_CUSTOMER_PRF_CTT;

---------------------------------------------------------------------------------------------------
--                              Agreement 
---------------------------------------------------------------------------------------------------   


Function ALIM_MKTQAFSL_AGREEMENT ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_AGREEMENT';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_AGREEMENT'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT                              
                             QTE.SQT_REQUEST_ID || OPRTNS.SCN_COUNTRY_CD ||'FSL' AS TECH_ID,
                             sysdate AS TECH_DATEEXTRACTION,
                             QTE.SQT_COUNTRY_CD AS COUNTRYBRANCHCODE,
                             (CASE WHEN OPRTNS.SCN_BUYBACK_TYPE_EN = 'No buyback' THEN 'false' ELSE 'true' END) AS ISBUYBACKMAKE                                                          
                              
                    FROM MKTOV.MKTQT_S_QTE QTE,
                        MKTOV.MKTQT_S_CNTRCT CNTRCT,
                        MKTOV.MKTQT_S_CNTRCT_OPRTNS OPRTNS,
                        MKTOV.MKTQT_S_CSTMR CSTMR, 
                        MKTOV.MKTQT_S_FPA_STCK_FLW FLW,
                        MKTOV.MKTQT_S_VHCLE VHCLE
                        
                    WHERE OPRTNS.SCN_CONTRACT_ID =  CNTRCT.SCN_CONTRACT_ID 
                    AND   OPRTNS.SCN_BUSINESSPARTNER_ID =  CSTMR.SCS_BUSINESSPARTNER_ID
                    AND   CNTRCT.SCN_CONTRACT_ID = FLW.SFP_CONTRACT_ID
                    AND   QTE.SQT_QUOTE_ID = FLW.SFP_QUOTE_ID
                    AND   OPRTNS.SCN_CONFIGVEHICLE_ID = VHCLE.SVH_CONFIGVEHICLE_ID
                    
                    AND CNTRCT.SCN_IS_BILLABLE <> 'Full Billing';
                    

 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_AGREEMENT 
              (
TECH_ID,
TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE,
DATE_SITU,
CODE_PAYS					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.COUNTRYBRANCHCODE,
p_date_trai,
P_CODE_PAYS
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_AGREEMENT 
          Set     	
                    TECH_DATEEXTRACTION  = REC.TECH_DATEEXTRACTION,
                    COUNTRYBRANCHCODE = REC.COUNTRYBRANCHCODE,
                    DATE_SITU	=	p_date_trai				
          Where   tech_id	=	REC.tech_id	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_AGREEMENT;




Function ALIM_MKTQAFSL_AGREEMENT_REQEST ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_AGREEMENT_REQEST';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_AGREEMENT_REQUEST'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT
                              QTE.SQT_REQUEST_ID || OPRTNS.SCN_COUNTRY_CD ||'FSL' AS TECH_ID,
                              sysdate AS TECH_DATEEXTRACTION,
                              QTE.SQT_QUOTE_ID AS REQUESTREF,
                              QTE.SQT_QUOTE_STATUS_ENUMID AS STATUSCODE,
                              OPRTNS.SCN_CONTRACT_REFERENCE AS RESERVEDCONTRACTREF,
                              OPRTNS.SCN_CONTRACTACTIVATIONDATE AS ACTIVATIONDATE,
                              sysdate AS DATESTARTREQUEST,  ---- updateDate  --- A REVOIR
                              (CASE WHEN CNTRCT.SCN_CONTRACT_STATUS_EN = 'Running' THEN CNTRCT.SCN_EFFECTIVE_FROM_DT ELSE NULL END) AS LIQUIDATIONDATE,
                              QTE.SQT_QUOTE_STATUS_EN AS REQUESTSTATUS,
                              OPRTNS.SCN_MAKE_NM AS BRANDLABEL,
                              OPRTNS.SCN_RVC_RV_AMOUNT AS TOTALFINANCEDAMOUNTET , --- A REVOIR
                              (CASE WHEN FLW.SFP_PRODUCT_CATEGORY_GROUP = 'Operating Lease' THEN 'LLD' ELSE NULL END) AS PRODUCTCATEGORYCODE,
                              FLW.SFP_PROMOTION_CODE AS COMMERCIALPRODUCTLABEL,
                              FLW.SFP_DEALER_REFERENCE AS SELLERAGENCY,
                              OPRTNS.SCN_BROKER_ID AS SALESMANCODE, --- A REVOIR
                              QTE.SQT_BROKER_COMPANY AS SALESMANNAME,--- A REVOIR  ---salesmanCompanyName
                              QTE.SQT_BROKER_ID AS EMPLOYEESALESMANID,--- A REVOIR  ---salesmanRef
                              QTE.SQT_QUOTE_STATUS_EN AS OFFERSTATUS,--- A REVOIR
                              sysdate AS CREATIONDATE,--- A REVOIR
                              QTE.SQT_EFFECTIVE_FROM_DT AS UPDATEDATE
                               
                    FROM MKTOV.MKTQT_S_QTE QTE,
                        MKTOV.MKTQT_S_CNTRCT CNTRCT,
                        MKTOV.MKTQT_S_CNTRCT_OPRTNS OPRTNS,
                        MKTOV.MKTQT_S_CSTMR CSTMR, 
                        MKTOV.MKTQT_S_FPA_STCK_FLW FLW,
                        MKTOV.MKTQT_S_VHCLE VHCLE
                        
                    WHERE OPRTNS.SCN_CONTRACT_ID =  CNTRCT.SCN_CONTRACT_ID 
                    AND   OPRTNS.SCN_BUSINESSPARTNER_ID =  CSTMR.SCS_BUSINESSPARTNER_ID
                    AND   CNTRCT.SCN_CONTRACT_ID = FLW.SFP_CONTRACT_ID
                    AND   QTE.SQT_QUOTE_ID = FLW.SFP_QUOTE_ID
                    AND   OPRTNS.SCN_CONFIGVEHICLE_ID = VHCLE.SVH_CONFIGVEHICLE_ID
                    
                    AND CNTRCT.SCN_IS_BILLABLE <> 'Full Billing';


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_AGREEMENT_REQUEST 
              (
TECH_ID,
TECH_DATEEXTRACTION,
REQUESTREF,
STATUSCODE,
RESERVEDCONTRACTREF,
ACTIVATIONDATE,
DATESTARTREQUEST,
LIQUIDATIONDATE,
REQUESTSTATUS,
BRANDLABEL,
TOTALFINANCEDAMOUNTET ,
PRODUCTCATEGORYCODE,
COMMERCIALPRODUCTLABEL,
SELLERAGENCY,
SALESMANCODE,
SALESMANNAME,
EMPLOYEESALESMANID,
OFFERSTATUS,
CREATIONDATE,
UPDATEDATE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.REQUESTREF,
REC.STATUSCODE,
REC.RESERVEDCONTRACTREF,
REC.ACTIVATIONDATE,
REC.DATESTARTREQUEST,
REC.LIQUIDATIONDATE,
REC.REQUESTSTATUS,
REC.BRANDLABEL,
REC.TOTALFINANCEDAMOUNTET ,
REC.PRODUCTCATEGORYCODE,
REC.COMMERCIALPRODUCTLABEL,
REC.SELLERAGENCY,
REC.SALESMANCODE,
REC.SALESMANNAME,
REC.EMPLOYEESALESMANID,
REC.OFFERSTATUS,
REC.CREATIONDATE,
REC.UPDATEDATE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_AGREEMENT_REQUEST 
          Set     	
                    ---TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    REQUESTREF = REC.REQUESTREF,
                    STATUSCODE = REC.STATUSCODE,
                    RESERVEDCONTRACTREF = REC.RESERVEDCONTRACTREF,
                    ACTIVATIONDATE = REC.ACTIVATIONDATE,
                    DATESTARTREQUEST = REC.DATESTARTREQUEST,
                    LIQUIDATIONDATE = REC.LIQUIDATIONDATE,
                    REQUESTSTATUS = REC.REQUESTSTATUS,
                    BRANDLABEL = REC.BRANDLABEL,
                    TOTALFINANCEDAMOUNTET  = REC.TOTALFINANCEDAMOUNTET ,
                    PRODUCTCATEGORYCODE = REC.PRODUCTCATEGORYCODE,
                    COMMERCIALPRODUCTLABEL = REC.COMMERCIALPRODUCTLABEL,
                    SELLERAGENCY = REC.SELLERAGENCY,
                    SALESMANCODE = REC.SALESMANCODE,
                    SALESMANNAME = REC.SALESMANNAME,
                    EMPLOYEESALESMANID = REC.EMPLOYEESALESMANID,
                    OFFERSTATUS = REC.OFFERSTATUS,
                    CREATIONDATE = REC.CREATIONDATE,
                    UPDATEDATE = REC.UPDATEDATE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_AGREEMENT_REQEST;







Function ALIM_MKTQAFSL_AGREEMENT_VEH ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_AGREEMENT_VEH';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_AGREEMENT_VEH'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT
                                QTE.SQT_REQUEST_ID || OPRTNS.SCN_COUNTRY_CD ||'FSL' AS TECH_ID,
                                sysdate AS TECH_DATEEXTRACTION,
                                QTE.SQT_QUOTE_ID AS REQUESTREF,
                                (CASE WHEN FLW.SFP_CHASSIS_NUMBER IS NULL THEN VHCLE.SVH_S_VHCLE_SID ELSE NULL END) AS VEHICLEREF, --- A REVOIR else
                                FLW.SFP_CHASSIS_NUMBER AS SERIALNUMBER,
                                FLW.SFP_LICENSE_PLATE AS REGISTRATIONNUMBER,
                                (CASE WHEN VHCLE.SVH_EXPECTED_DELIVERY_DATE IS NULL OR VHCLE.SVH_EXPECTED_DELIVERY_DATE < VHCLE.SVH_REQUESTED_DELIVERY_DATE 
                                    THEN VHCLE.SVH_REQUESTED_DELIVERY_DATE
                                    ELSE VHCLE.SVH_EXPECTED_DELIVERY_DATE
                                END) AS DELIVERYDATE,
                                (CASE WHEN CNTRCT.SCN_CONTRACT_STATUS_GROUP_EN IN ('1093') THEN OPRTNS.SCN_INITIAL_MILEAGE ELSE NULL END) AS INITIALCONTACTUALMILEAGE,
                                (CASE WHEN CNTRCT.SCN_CONTRACT_STATUS_GROUP_EN IN ('1094') THEN OPRTNS.SCN_INITIAL_MILEAGE ELSE NULL END) AS CONTACTUALMILEAGE,
                                OPRTNS.SCN_INITIAL_MILEAGE AS STARTCONTRACTMILEAGE,
                                CNTRCT.SCN_CONTRACT_EXPECTED_END_DATE AS EXPECTEDRETURNDATE,
                                OPRTNS.SCN_DEALER_BUYBACK_AMOUNT AS REPURCHASEVEHICLEAMOUNTET,
                                (CASE WHEN VHCLE.SVH_NATURE_EN = 'PKW' THEN 'VP' WHEN VHCLE.SVH_NATURE_EN = 'LFW' THEN 'VU' END) AS KINDCODE,
                                VHCLE.SVH_FUEL_TYPE_EN AS ENERGYCODE
                               
                    FROM MKTOV.MKTQT_S_QTE QTE,
                        MKTOV.MKTQT_S_CNTRCT CNTRCT,
                        MKTOV.MKTQT_S_CNTRCT_OPRTNS OPRTNS,
                        MKTOV.MKTQT_S_CSTMR CSTMR, 
                        MKTOV.MKTQT_S_FPA_STCK_FLW FLW,
                        MKTOV.MKTQT_S_VHCLE VHCLE
                        
                    WHERE OPRTNS.SCN_CONTRACT_ID =  CNTRCT.SCN_CONTRACT_ID 
                    AND   OPRTNS.SCN_BUSINESSPARTNER_ID =  CSTMR.SCS_BUSINESSPARTNER_ID
                    AND   CNTRCT.SCN_CONTRACT_ID = FLW.SFP_CONTRACT_ID
                    AND   QTE.SQT_QUOTE_ID = FLW.SFP_QUOTE_ID
                    AND   OPRTNS.SCN_CONFIGVEHICLE_ID = VHCLE.SVH_CONFIGVEHICLE_ID
                    
                    AND CNTRCT.SCN_IS_BILLABLE <> 'Full Billing';


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_AGREEMENT_VEH 
              (
TECH_ID,
TECH_DATEEXTRACTION,
REQUESTREF,
VEHICLEREF,
SERIALNUMBER,
REGISTRATIONNUMBER,
DELIVERYDATE,
INITIALCONTACTUALMILEAGE,
CONTACTUALMILEAGE,
STARTCONTRACTMILEAGE,
EXPECTEDRETURNDATE,
REPURCHASEVEHICLEAMOUNTET,
KINDCODE,
ENERGYCODE,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.TECH_DATEEXTRACTION,
REC.REQUESTREF,
REC.VEHICLEREF,
REC.SERIALNUMBER,
REC.REGISTRATIONNUMBER,
REC.DELIVERYDATE,
REC.INITIALCONTACTUALMILEAGE,
REC.CONTACTUALMILEAGE,
REC.STARTCONTRACTMILEAGE,
REC.EXPECTEDRETURNDATE,
REC.REPURCHASEVEHICLEAMOUNTET,
REC.KINDCODE,
REC.ENERGYCODE,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_AGREEMENT_VEH 
          Set     	
                    ---TECH_ID = REC.TECH_ID,
                    TECH_DATEEXTRACTION = REC.TECH_DATEEXTRACTION,
                    REQUESTREF = REC.REQUESTREF,
                    VEHICLEREF = REC.VEHICLEREF,
                    SERIALNUMBER = REC.SERIALNUMBER,
                    REGISTRATIONNUMBER = REC.REGISTRATIONNUMBER,
                    DELIVERYDATE = REC.DELIVERYDATE,
                    INITIALCONTACTUALMILEAGE = REC.INITIALCONTACTUALMILEAGE,
                    CONTACTUALMILEAGE = REC.CONTACTUALMILEAGE,
                    STARTCONTRACTMILEAGE = REC.STARTCONTRACTMILEAGE,
                    EXPECTEDRETURNDATE = REC.EXPECTEDRETURNDATE,
                    REPURCHASEVEHICLEAMOUNTET = REC.REPURCHASEVEHICLEAMOUNTET,
                    KINDCODE = REC.KINDCODE,
                    ENERGYCODE = REC.ENERGYCODE,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_AGREEMENT_VEH;






Function ALIM_MKTQAFSL_AGREEMENT_STK ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_AGREEMENT_STK';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_AGREEMENT_STK'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT
                                QTE.SQT_REQUEST_ID || OPRTNS.SCN_COUNTRY_CD ||'FSL' AS TECH_ID,
                                QTE.SQT_QUOTE_ID AS REQUESTREF,
                                CSTMR.SCS_LASTNAME AS USAGENAME,
                                CSTMR.SCS_FIRSTNAME AS FIRSTNAME,
                                CSTMR.SCS_EMAIL AS EMAIL,
                                CSTMR.SCS_TELEPHONE AS PHONENUMBER,
                                CSTMR.SCS_PLN_TRADINGNAME AS COMPANYNAME,
                                CSTMR.SCS_LEGALNAME AS BUSINESSNAME,
                                CSTMR.SCS_VATNUMBER AS NATIONALIDENTIFIER,
                                'VAT' AS NATIONALIDENTIFIERTYPE,
                                CSTMR.SCS_CUSTOMERSEGMENT AS CUSTOMERTYPELABEL
                       
                    --- REVOIR LA JOINTURE        
                    FROM MKTOV.MKTQT_S_QTE QTE,
                        MKTOV.MKTQT_S_CNTRCT CNTRCT,
                        MKTOV.MKTQT_S_CNTRCT_OPRTNS OPRTNS,
                        MKTOV.MKTQT_S_CSTMR CSTMR, 
                        MKTOV.MKTQT_S_FPA_STCK_FLW FLW,
                        MKTOV.MKTQT_S_VHCLE VHCLE
                        
                    WHERE OPRTNS.SCN_CONTRACT_ID =  CNTRCT.SCN_CONTRACT_ID 
                    AND   OPRTNS.SCN_BUSINESSPARTNER_ID =  CSTMR.SCS_BUSINESSPARTNER_ID
                    AND   CNTRCT.SCN_CONTRACT_ID = FLW.SFP_CONTRACT_ID
                    AND   QTE.SQT_QUOTE_ID = FLW.SFP_QUOTE_ID
                    AND   OPRTNS.SCN_CONFIGVEHICLE_ID = VHCLE.SVH_CONFIGVEHICLE_ID
                    
                    AND CNTRCT.SCN_IS_BILLABLE <> 'Full Billing';


 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_AGREEMENT_STK 
              (
TECH_ID,
REQUESTREF,
USAGENAME,
FIRSTNAME,
EMAIL,
PHONENUMBER,
COMPANYNAME,
BUSINESSNAME,
NATIONALIDENTIFIER,
NATIONALIDENTIFIERTYPE,
CUSTOMERTYPELABEL,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.REQUESTREF,
REC.USAGENAME,
REC.FIRSTNAME,
REC.EMAIL,
REC.PHONENUMBER,
REC.COMPANYNAME,
REC.BUSINESSNAME,
REC.NATIONALIDENTIFIER,
REC.NATIONALIDENTIFIERTYPE,
REC.CUSTOMERTYPELABEL,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_AGREEMENT_STK 
          Set     	
                    ---TECH_ID = REC.TECH_ID,
                    REQUESTREF = REC.REQUESTREF,
                    USAGENAME = REC.USAGENAME,
                    FIRSTNAME = REC.FIRSTNAME,
                    EMAIL = REC.EMAIL,
                    PHONENUMBER = REC.PHONENUMBER,
                    COMPANYNAME = REC.COMPANYNAME,
                    BUSINESSNAME = REC.BUSINESSNAME,
                    NATIONALIDENTIFIER = REC.NATIONALIDENTIFIER,
                    NATIONALIDENTIFIERTYPE = REC.NATIONALIDENTIFIERTYPE,
                    CUSTOMERTYPELABEL = REC.CUSTOMERTYPELABEL,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_AGREEMENT_STK;






Function ALIM_MKTQAFSL_AGREEMENT_CONTRA ( Nomlog      Varchar2,
                            P_DATE_TRAI DATE ,
                            p_code_pays varchar2) Return Number IS

BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_UPD_2 NUMBER := 0;
  V_FUNC VARCHAR2(30) := 'ALIM_MKTQAFSL_AGREEMENT_CONTRA';    
  V_TAB1 VARCHAR2(40) := 'MKTOV.MKTQT_AGREEMENT_CONTRACT'; 
  V_TAB2 VARCHAR2(30) := 'SRS'; 
  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor c_mkt Is
                    SELECT    
                            QTE.SQT_REQUEST_ID || OPRTNS.SCN_COUNTRY_CD ||'FSL' AS TECH_ID,
                              OPRTNS.SCN_CONTRACT_REFERENCE AS CONTRACTREF,
                              'FSL' AS BACKOFFICEORIGIN,
                              (CASE WHEN FLW.SFP_PRODUCT_CATEGORY_GROUP ='Operating Lease' THEN 'LLD' ELSE NULL END) AS PRODUCTCATEGORYCODE,
                              CNTRCT.SCN_CONTRACT_END_DATE AS REALDATEENDCONTRACT
                               ----- A REVOIR LA JOINTURE
                    FROM MKTOV.MKTQT_S_QTE QTE,
                        MKTOV.MKTQT_S_CNTRCT CNTRCT,
                        MKTOV.MKTQT_S_CNTRCT_OPRTNS OPRTNS,
                        MKTOV.MKTQT_S_CSTMR CSTMR, 
                        MKTOV.MKTQT_S_FPA_STCK_FLW FLW,
                        MKTOV.MKTQT_S_VHCLE VHCLE
                        
                    WHERE OPRTNS.SCN_CONTRACT_ID =  CNTRCT.SCN_CONTRACT_ID 
                    AND   OPRTNS.SCN_BUSINESSPARTNER_ID =  CSTMR.SCS_BUSINESSPARTNER_ID
                    AND   CNTRCT.SCN_CONTRACT_ID = FLW.SFP_CONTRACT_ID
                    AND   QTE.SQT_QUOTE_ID = FLW.SFP_QUOTE_ID
                    AND   OPRTNS.SCN_CONFIGVEHICLE_ID = VHCLE.SVH_CONFIGVEHICLE_ID
                    
                    AND CNTRCT.SCN_IS_BILLABLE <> 'Full Billing';



 /*******************************************************************************/
  BEGIN

	File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, V_FUNC,'## Alimentation de la table '||V_TAB1||' ##');
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC,'## Flux '||V_TAB2||' ##');

  FOR REC IN c_mkt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;

        INSERT INTO MKTOV.MKTQT_AGREEMENT_CONTRACT 
              (
TECH_ID,
CONTRACTREF,
BACKOFFICEORIGIN,
PRODUCTCATEGORYCODE,
REALDATEENDCONTRACT,
CODE_PAYS,
DATE_SITU					
              )
        VALUES
              (
REC.TECH_ID,
REC.CONTRACTREF,
REC.BACKOFFICEORIGIN,
REC.PRODUCTCATEGORYCODE,
REC.REALDATEENDCONTRACT,
P_CODE_PAYS,
p_date_trai
);

        V_INS := V_INS + 1;

        EXCEPTION
          When Dup_Val_On_Index Then
          Update  MKTOV.MKTQT_AGREEMENT_CONTRACT 
          Set     	
                    ---TECH_ID = REC.TECH_ID,
                    CONTRACTREF = REC.CONTRACTREF,
                    BACKOFFICEORIGIN = REC.BACKOFFICEORIGIN,
                    PRODUCTCATEGORYCODE = REC.PRODUCTCATEGORYCODE,
                    REALDATEENDCONTRACT = REC.REALDATEENDCONTRACT,
                    DATE_SITU	=	p_date_trai				
          Where   TECH_ID	=	REC.TECH_ID	
          AND     CODE_PAYS	=	P_CODE_PAYS;


          			V_UPD := V_UPD + 1;
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;
				Res := Mkt.Mktqaut.F_Write(File_Id,V_FUNC,'Message Erreur pl/sql :'||Sqlerrm);
      
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;
   
   RES := MKT.MKTQAUT.F_WRITE(FILE_ID, V_FUNC ,'Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
End ALIM_MKTQAFSL_AGREEMENT_CONTRA;





---------------------------------------------------------------------------------------------------
--                              EXPORT MILES 
---------------------------------------------------------------------------------------------------   




FUNCTION EXPORT_CUSTOMER_MILES_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_CODE_PAYS VARCHAR2, P_FILENAME_CUSTOMER VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_ACTIVITY  NUMBER(10) := 0;  
    V_NB_ACTIVITY_TRAITE NUMBER(10) := 0;

    V_NB_AGREEMENT  NUMBER(10) := 0;  
    V_NB_AGREEMENT_TRAITE NUMBER(10) := 0;
    
    V_NB_CONTACTS  NUMBER(10) := 0;  
    V_NB_CONTACTS_TRAITE NUMBER(10) := 0;
    
    V_NB_BANKINGS  NUMBER(10) := 0;  
    V_NB_BANKINGS_TRAITE NUMBER(10) := 0;
    
    V_NB_ID  NUMBER(10) := 0;  
    V_NB_ID_TRAITE NUMBER(10) := 0;
    
    V_NB_MEAN  NUMBER(10) := 0;  
    V_NB_MEAN_TRAITE NUMBER(10) := 0;
    
    V_NB_ADRESSES  NUMBER(10) := 0;  
    V_NB_ADRESSES_TRAITE NUMBER(10) := 0;

    V_NB_PHONES  NUMBER(10) := 0;  
    V_NB_PHONES_TRAITE NUMBER(10) := 0;

    V_NB_EMAILS  NUMBER(10) := 0;  
    V_NB_EMAILS_TRAITE NUMBER(10) := 0;
    
    V_NB_INFO  NUMBER(10) := 0;  
    V_NB_INFO_TRAITE NUMBER(10) := 0;

    V_NB_CROSSREF  NUMBER(10) := 0;  
    V_NB_CROSSREF_TRAITE NUMBER(10) := 0;
    V_NB_EXT  NUMBER(10) := 0;  
    V_NB_EXT_TRAITE NUMBER(10) := 0;    
    
    

CURSOR C_MKTQT_CUSTOMER IS

SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
TECH_DATEINSERTION AS TECH_DATEINSERTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
CUSTOMERTYPELABEL AS CUSTOMERTYPELABEL,
CREATIONPARTYDATE AS CREATIONPARTYDATE,
LASTUPDATEPARTYDATE AS LASTUPDATEPARTYDATE,
FULLNAME AS FULLNAME,
FIRSTCONTRACTDATE AS FIRSTCONTRACTDATE,
FIRSTNAME AS FIRSTNAME,
USAGENAME AS USAGENAME,
FISCCOUNTRYCODE AS FISCCOUNTRYCODE,
FISCCOUNTRYISO2 AS FISCCOUNTRYISO2,
BUSINESSNAME AS BUSINESSNAME,
COMPANYNAME AS COMPANYNAME,
LEGALCATEGORYCODE AS LEGALCATEGORYCODE,
LEGALCATEGORY AS LEGALCATEGORY,
CREATIONDATE AS CREATIONDATE,
ISDEALER AS ISDEALER,
ISVATELIGIBLE AS ISVATELIGIBLE,
BOORIGIN AS BOORIGIN,
ISELIGIBLE4CSF2ML AS ISELIGIBLE4CSF2ML,
FLEETFLAG AS FLEETFLAG,
STATUSCODE AS STATUSCODE,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUSTOMER
WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS
;


------------
CURSOR C_MKTQT_ACTIVITY (P_TECH_ID VARCHAR2) IS

SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
CODE AS CODE,
TYPECODE AS TYPECODE

FROM MKTOV.MKTQT_CUS_ACTIVITY
WHERE  SRCJVCODE = P_CODE_PAYS
;
------------







/*
CURSOR C_MKTQT_AGREEMENT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD')	AS TECH_DATEEXTRACTION	,
COUNTRYBRANCHCODE	AS COUNTRYBRANCHCODE	,
SRCPARTYID	AS SRCPARTYID	,
SRCJVCODE	AS SRCJVCODE	,
SRCAPPCODE	AS SRCAPPCODE	,
OPTOUTFLAG	AS OPTOUTFLAG	,
OPTINFLAG	AS OPTINFLAG	,
OPTINCUSTOMERSMS	AS OPTINCUSTOMERSMS	,
OPTINCUSTOMERPAPER	AS OPTINCUSTOMERPAPER	

FROM MKTOV.MKTQT_CUS_AGREEMENT
WHERE TECH_ID = P_TECH_ID
;
*/

CURSOR C_MKTQT_CONTACTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
CONTACTNAME AS CONTACTNAME,
EMAIL AS EMAIL,
PHONENUMBER AS PHONENUMBER

FROM MKTOV.MKTQT_CUS_PERSONCONTACTS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_BANKINGS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD')  AS TECH_DATEEXTRACTION ,
SRCPARTYID  AS SRCPARTYID ,
SRCJVCODE  AS SRCJVCODE ,
SRCAPPCODE  AS SRCAPPCODE ,
ROLEBANKINGCODE AS ROLEBANKINGCODE

FROM MKTOV.MKTQT_CUS_ROLEBANKINGS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_ID (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
NATIONALIDENTIFIERTYPECODE AS NATIONALIDENTIFIERTYPECODE,
NATIONALIDENTIFIER AS NATIONALIDENTIFIER

FROM MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_MEAN (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE

FROM MKTOV.MKTQT_CUS_CONTACTMEAN
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_ADRESSES (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
NUMBERANDSTREET AS NUMBERANDSTREET,
ZIPCODE AS ZIPCODE,
CITY AS CITY,
COUNTRYCODE AS COUNTRYCODE,
COUNTRYISO2 AS COUNTRYISO2,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_PHONES (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
PHONENUMBER AS PHONENUMBER,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_EMAILS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
EMAIL AS EMAIL,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_INFO (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
SEPAIBAN AS SEPAIBAN

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_CROSSREF (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_EXT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
APPLICATIONEXTCODE AS APPLICATIONEXTCODE,
APPLICATIONEXTLABEL AS APPLICATIONEXTLABEL,
PARTYREFEXT AS PARTYREFEXT,
JVEXTCODE AS JVEXTCODE

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := P_FILENAME_CUSTOMER;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_CUSTOMER_MILES_JSON', ' ## EXPORT CUSTOMER JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CUSTOMER
       WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CUSTOMER IN C_MKTQT_CUSTOMER LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         
    V_NB_AGREEMENT_TRAITE := 0;
    V_NB_CONTACTS_TRAITE := 0;
    V_NB_BANKINGS_TRAITE := 0;
    V_NB_ID_TRAITE := 0;
    V_NB_MEAN_TRAITE := 0;
    V_NB_INFO_TRAITE := 0;    
    V_NB_CROSSREF_TRAITE := 0;         
    
    
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CUSTOMER.TECH_ID || '",
"tech_dateExtraction":"' || S_MKTQT_CUSTOMER.TECH_DATEEXTRACTION || '",
"tech_dateInsertion":"' || S_MKTQT_CUSTOMER.TECH_DATEINSERTION || '",
"countryBranchCode":"' || S_MKTQT_CUSTOMER.COUNTRYBRANCHCODE || '",
"srcPartyId":"' || S_MKTQT_CUSTOMER.SRCPARTYID || '",
"srcJvCode":"' || S_MKTQT_CUSTOMER.SRCJVCODE || '",
"srcAppCode":"' || S_MKTQT_CUSTOMER.SRCAPPCODE || '",
"customerTypeLabel":"' || S_MKTQT_CUSTOMER.CUSTOMERTYPELABEL || '",
"creationPartyDate":"' || S_MKTQT_CUSTOMER.CREATIONPARTYDATE || '",
"lastUpdatePartyDate":"' || S_MKTQT_CUSTOMER.LASTUPDATEPARTYDATE || '",
"fullName":"' || S_MKTQT_CUSTOMER.FULLNAME || '",
"firstContractDate":"' || S_MKTQT_CUSTOMER.FIRSTCONTRACTDATE || '",
"firstName":"' || S_MKTQT_CUSTOMER.FIRSTNAME || '",
"usageName":"' || S_MKTQT_CUSTOMER.USAGENAME || '",
"fiscCountryCode":"' || S_MKTQT_CUSTOMER.FISCCOUNTRYCODE || '",
"fiscCountryIso2":"' || S_MKTQT_CUSTOMER.FISCCOUNTRYISO2 || '",
"businessName":"' || S_MKTQT_CUSTOMER.BUSINESSNAME || '",
"companyName":"' || S_MKTQT_CUSTOMER.COMPANYNAME || '",
"legalCategoryCode":"' || S_MKTQT_CUSTOMER.LEGALCATEGORYCODE || '",
"legalCategory":"' || S_MKTQT_CUSTOMER.LEGALCATEGORY || '",
"creationDate":"' || S_MKTQT_CUSTOMER.CREATIONDATE || '",
"isDealer":"' || S_MKTQT_CUSTOMER.ISDEALER || '",
"isVatEligible":"' || S_MKTQT_CUSTOMER.ISVATELIGIBLE || '",
"boOrigin":"' || S_MKTQT_CUSTOMER.BOORIGIN || '",
"isEligible4Csf2ml":"' || S_MKTQT_CUSTOMER.ISELIGIBLE4CSF2ML || '",
"fleetFlag":"' || S_MKTQT_CUSTOMER.FLEETFLAG || '",
"statusCode":"' || S_MKTQT_CUSTOMER.STATUSCODE || '",
"isLeasco":"' || S_MKTQT_CUSTOMER.ISLEASCO || '",
"isFinco":"' || S_MKTQT_CUSTOMER.ISFINCO || '",';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- ACTIVITY DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ACTIVITY
         FROM  MKTOV.MKTQT_CUS_ACTIVITY
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ACTIVITY := NULL;
    END;

    IF NVL(V_NB_ACTIVITY, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"agreement": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ACTIVITY IN C_MKTQT_ACTIVITY (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_ACTIVITY_TRAITE := V_NB_ACTIVITY_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"activity":{
        "tech_id":"' || S_MKTQT_ACTIVITY.TECH_ID || '",
        "tech_dateExtraction":"' || S_MKTQT_ACTIVITY.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_ACTIVITY.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_ACTIVITY.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_ACTIVITY.SRCAPPCODE || '",
        "code":"' || S_MKTQT_ACTIVITY.CODE || '",
        "typeCode":"' || S_MKTQT_ACTIVITY.TYPECODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_ACTIVITY_TRAITE = V_NB_ACTIVITY THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        }';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ACTIVITY FIN----------------------



                   --------------------- AGREEMENT DEBUT----------------------
/*
    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_AGREEMENT
         FROM  MKTOV.MKTQT_CUS_AGREEMENT
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_AGREEMENT := NULL;
    END;

    IF NVL(V_NB_AGREEMENT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"agreement": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_AGREEMENT IN C_MKTQT_AGREEMENT (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_AGREEMENT_TRAITE := V_NB_AGREEMENT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"agreement":{
        "tech_dateExtraction":"' || S_MKTQT_AGREEMENT.TECH_DATEEXTRACTION	 || '",
        "srcPartyId":"' || S_MKTQT_AGREEMENT.SRCPARTYID	 || '",
        "srcJvCode":"' || S_MKTQT_AGREEMENT.SRCJVCODE	 || '",
        "srcAppCode":"' || S_MKTQT_AGREEMENT.SRCAPPCODE	 || '",
        "optOutFlag":' || S_MKTQT_AGREEMENT.OPTOUTFLAG	 || ',
        "optInFlag":' || S_MKTQT_AGREEMENT.OPTINFLAG	 || ',
        "OptInCustomerSMS":' || S_MKTQT_AGREEMENT.OPTINCUSTOMERSMS	 || ',
        "OptInCustomerPaper":' || S_MKTQT_AGREEMENT.OPTINCUSTOMERPAPER	 || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_AGREEMENT_TRAITE = V_NB_AGREEMENT THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        }';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

*/
            --------------------- AGREEMENT FIN----------------------


                   --------------------- CONTACTS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTACTS
         FROM  MKTOV.MKTQT_CUS_PERSONCONTACTS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTACTS := NULL;
    END;

    IF NVL(V_NB_CONTACTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"personContacts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTACTS IN C_MKTQT_CONTACTS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CONTACTS_TRAITE := V_NB_CONTACTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_id":"' || S_MKTQT_CONTACTS.TECH_ID || '",
        "tech_dateExtraction":"' || S_MKTQT_CONTACTS.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_CONTACTS.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_CONTACTS.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_CONTACTS.SRCAPPCODE || '",
        "contactName":"' || S_MKTQT_CONTACTS.CONTACTNAME || '",
        "email":"' || S_MKTQT_CONTACTS.EMAIL || '",
        "phoneNumber":"' || S_MKTQT_CONTACTS.PHONENUMBER || '",';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);  
        
        
                if V_NB_CONTACTS_TRAITE = V_NB_CONTACTS THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTACTS FIN----------------------


                   --------------------- BANKINGS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_BANKINGS
         FROM  MKTOV.MKTQT_CUS_ROLEBANKINGS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_BANKINGS := NULL;
    END;

    IF NVL(V_NB_BANKINGS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"roleBankings": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_BANKINGS IN C_MKTQT_BANKINGS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_BANKINGS_TRAITE := V_NB_BANKINGS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_id":"' || S_MKTQT_BANKINGS.TECH_ID || '",            
        "tech_dateExtraction":"' || S_MKTQT_BANKINGS.TECH_DATEEXTRACTION  || '",
        "srcPartyId":"' || S_MKTQT_BANKINGS.SRCPARTYID  || '",
        "srcJvCode":"' || S_MKTQT_BANKINGS.SRCJVCODE  || '",
        "srcAppCode":"' || S_MKTQT_BANKINGS.SRCAPPCODE  || '",
        "roleBankingCode":"' || S_MKTQT_BANKINGS.ROLEBANKINGCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_BANKINGS_TRAITE = V_NB_BANKINGS THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- BANKINGS FIN----------------------



                   --------------------- ID DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ID
         FROM  MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ID := NULL;
    END;

    IF NVL(V_NB_ID, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"nationalIdentifiers": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ID IN C_MKTQT_ID (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_ID_TRAITE := V_NB_ID_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_id":"' || S_MKTQT_ID.TECH_ID || '",                  
        "srcPartyId":"' || S_MKTQT_ID.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_ID.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_ID.SRCAPPCODE || '",
        "nationalIdentifier":"' || S_MKTQT_ID.NATIONALIDENTIFIERTYPECODE || '",
        "nationalIdentifierTypeCode":"' || S_MKTQT_ID.NATIONALIDENTIFIER || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_ID_TRAITE = V_NB_ID THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ID FIN----------------------

                   --------------------- MEAN DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_MEAN
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_MEAN := NULL;
    END;

    IF NVL(V_NB_MEAN, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"contactMean":[';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_MEAN IN C_MKTQT_MEAN (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_MEAN_TRAITE := V_NB_MEAN_TRAITE+1;   ---- 
            V_NB_ADRESSES_TRAITE := 0;
            V_NB_PHONES_TRAITE := 0;
            V_NB_EMAILS_TRAITE := 0;
            
            V_LIGNE := '        {
        "tech_id":"' || S_MKTQT_MEAN.TECH_ID || '",                
        "tech_dateExtraction":"' || S_MKTQT_MEAN.TECH_DATEEXTRACTION || '",
        "countryBranchCode":"' || S_MKTQT_MEAN.COUNTRYBRANCHCODE || '",
        "srcPartyId":"' || S_MKTQT_MEAN.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_MEAN.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_MEAN.SRCAPPCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            

                               --------------------- ADRESSES DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ADRESSES
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ADRESSES := NULL;
    END;

    IF NVL(V_NB_ADRESSES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "adresses": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ADRESSES IN C_MKTQT_ADRESSES (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_ADRESSES_TRAITE := V_NB_ADRESSES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_ADRESSES.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_ADRESSES.TECH_DATEEXTRACTION || '",
                "numberAndStreet":"' || S_MKTQT_ADRESSES.NUMBERANDSTREET || '",
                "zipCode":"' || S_MKTQT_ADRESSES.ZIPCODE || '",
                "city":"' || S_MKTQT_ADRESSES.CITY || '",
                "countryCode":"' || S_MKTQT_ADRESSES.COUNTRYCODE || '",
                "countryIso2":"' || S_MKTQT_ADRESSES.COUNTRYISO2 || '",
                "isLeasco":"' || S_MKTQT_ADRESSES.ISLEASCO || '",
                "isFinco":"' || S_MKTQT_ADRESSES.ISFINCO || '"';
               res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_ADRESSES_TRAITE = V_NB_ADRESSES THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ADRESSES FIN----------------------
            
            
            
  
                               --------------------- PHONES DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PHONES
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PHONES := NULL;
    END;

    IF NVL(V_NB_PHONES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "phones": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_PHONES IN C_MKTQT_PHONES (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_PHONES_TRAITE := V_NB_PHONES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_PHONES.TECH_ID || '",
                "tech_dateExtraction":"' ||  S_MKTQT_PHONES.TECH_DATEEXTRACTION || '",
                "phoneNumber":"' ||  S_MKTQT_PHONES.PHONENUMBER || '",
                "isLeasco":"' ||  S_MKTQT_PHONES.ISLEASCO || '",
                "isFinco":"' ||  S_MKTQT_PHONES.ISFINCO || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);                 
  

                if V_NB_PHONES_TRAITE = V_NB_PHONES THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PHONES FIN----------------------
   
                               --------------------- EMAILS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_EMAILS
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_EMAILS := NULL;
    END;

    IF NVL(V_NB_EMAILS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "emails": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_EMAILS IN C_MKTQT_EMAILS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_EMAILS_TRAITE := V_NB_EMAILS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_EMAILS.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_EMAILS.TECH_DATEEXTRACTION || '",';
              res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);  
             
V_LIGNE := '                "email":"' || S_MKTQT_EMAILS.EMAIL || '",
                "isLeasco":' || S_MKTQT_EMAILS.ISLEASCO || ',
                "isFinco":' || S_MKTQT_EMAILS.ISFINCO || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_EMAILS_TRAITE = V_NB_EMAILS THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- EMAILS FIN----------------------

                if V_NB_MEAN_TRAITE = V_NB_MEAN THEN V_LIGNE :=  '      }';
                else V_LIGNE :=  '      },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- MEAN FIN----------------------

                              --------------------- INFO DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_INFO
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_INFO := NULL;
    END;

    IF NVL(V_NB_INFO, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"bankInformations": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_INFO IN C_MKTQT_INFO (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_INFO_TRAITE := V_NB_INFO_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_id":"' || S_MKTQT_INFO.TECH_ID || '",            
        "tech_dateExtraction":"' || S_MKTQT_INFO.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_INFO.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_INFO.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_INFO.SRCAPPCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
        
        
        IF S_MKTQT_INFO.SEPAIBAN IS NOT NULL THEN
            V_LIGNE := '        ,"sepaIban":"' || S_MKTQT_INFO.SEPAIBAN || '"';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
        END IF;    
        
                if V_NB_INFO_TRAITE = V_NB_INFO THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- INFO FIN----------------------
            
                              --------------------- CROSSREF DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CROSSREF
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CROSSREF := NULL;
    END;

    IF NVL(V_NB_CROSSREF, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"crossref": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CROSSREF IN C_MKTQT_CROSSREF (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CROSSREF_TRAITE := V_NB_CROSSREF_TRAITE+1;   ---- 
            V_NB_EXT_TRAITE := 0;
            
            V_LIGNE := '"crossref":{
        "tech_id":"' || S_MKTQT_CROSSREF.TECH_ID || '",                 
        "tech_dateExtraction":"' || S_MKTQT_CROSSREF.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_CROSSREF.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_CROSSREF.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_CROSSREF.SRCAPPCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
         
                                       --------------------- EXT DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_EXT
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_EXT := NULL;
    END;

    IF NVL(V_NB_EXT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "externalRefs": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_EXT IN C_MKTQT_EXT (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_EXT_TRAITE := V_NB_EXT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "applicationExtCode":"' || S_MKTQT_EXT.APPLICATIONEXTCODE || '",
                "applicationExtLabel":"' || S_MKTQT_EXT.APPLICATIONEXTLABEL || '",
                "partyRefExt":"' || S_MKTQT_EXT.PARTYREFEXT || '",
                "jvExtCode":"' || S_MKTQT_EXT.JVEXTCODE || '"';                
                
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_EXT_TRAITE = V_NB_EXT THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '              },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '             ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- EXT FIN----------------------
         
            
        
                if V_NB_CROSSREF_TRAITE = V_NB_CROSSREF THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CROSSREF FIN----------------------




    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CUSTOMER_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CUSTOMER.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_CUSTOMER_MILES_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CUSTOMER_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_CUSTOMER_MILES_JSON;






FUNCTION EXPORT_PROFIL_MILES_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_CODE_PAYS VARCHAR2, P_FILENAME_PROFIL VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_CONTRACTS  NUMBER(10) := 0;  
    V_NB_CONTRACTS_TRAITE NUMBER(10) := 0;





CURSOR C_MKTQT_CUSTOMER IS
SELECT 
TECH_ID AS TECH_ID,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
UNPAIDFLAG AS UNPAIDFLAG,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUSTOMER_PROFILE
WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS
;

CURSOR C_MKTQT_CONTRACTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
STAKEHOLDERROLE AS STAKEHOLDERROLE,
CONTRACTREF AS CONTRACTREF,
ACCOUNTSTATUS AS ACCOUNTSTATUS,
DEALERSHIPREF AS DEALERSHIPREF,
VEHSERIALNUMBER AS VEHSERIALNUMBER,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN

FROM MKTOV.MKTQT_CUSTOMER_PROFILE_CTT
WHERE TECH_ID = P_TECH_ID
;






BEGIN
  file_name := P_FILENAME_PROFIL;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_PROFIL_MILES_JSON', ' ##  EXPORT PROFIL JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CUSTOMER_PROFILE
       WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CUSTOMER IN C_MKTQT_CUSTOMER LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_CONTRACTS_TRAITE  := 0;

         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CUSTOMER.TECH_ID || '",
"countryBranchCode":"' || S_MKTQT_CUSTOMER.COUNTRYBRANCHCODE || '",
"srcPartyId":"' || S_MKTQT_CUSTOMER.SRCPARTYID || '",
"srcJvCode":"' || S_MKTQT_CUSTOMER.SRCJVCODE || '",
"srcAppCode":"' || S_MKTQT_CUSTOMER.SRCAPPCODE || '",
"unpaidFlag":"' || S_MKTQT_CUSTOMER.UNPAIDFLAG || '",
"isLeasco":"' || S_MKTQT_CUSTOMER.ISLEASCO || '",
"isFinco":"' || S_MKTQT_CUSTOMER.ISFINCO || '"';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- CONTRACTS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTRACTS
         FROM  MKTOV.MKTQT_CUSTOMER_PROFILE_CTT
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTRACTS := NULL;
    END;

    IF NVL(V_NB_CONTRACTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"contracts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTRACTS IN C_MKTQT_CONTRACTS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CONTRACTS_TRAITE := V_NB_CONTRACTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "stakeholderRole":"' || S_MKTQT_CONTRACTS.STAKEHOLDERROLE || '",
            "contractRef":"' || S_MKTQT_CONTRACTS.CONTRACTREF || '",
            "accountStatus":"' || S_MKTQT_CONTRACTS.ACCOUNTSTATUS || '",
            "dealershipRef":"' || S_MKTQT_CONTRACTS.DEALERSHIPREF || '",
            "vehSerialNumber":"' || S_MKTQT_CONTRACTS.VEHSERIALNUMBER || '",
            "isLeasco":"' || S_MKTQT_CONTRACTS.ISLEASCO || '",
            "isFinco":"' || S_MKTQT_CONTRACTS.ISFINCO || '",';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
            IF S_MKTQT_CONTRACTS.BACKOFFICEORIGIN IS NOT NULL THEN
V_LIGNE := '            ,"backOfficeOrigin":"' || S_MKTQT_CONTRACTS.BACKOFFICEORIGIN || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;   

                if V_NB_CONTRACTS_TRAITE = V_NB_CONTRACTS THEN V_LIGNE :=  '            }';
                else V_LIGNE :=  '            },';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTRACTS FIN----------------------


    




V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_PROFIL_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CUSTOMER.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_PROFIL_MILES_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_PROFIL_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_PROFIL_MILES_JSON;




FUNCTION EXPORT_AGREEMENT_MILES_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_CODE_PAYS VARCHAR2, P_FILENAME_AGREEMENT VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_REQUEST  NUMBER(10) := 0;  
    V_NB_REQUEST_TRAITE NUMBER(10) := 0;

    V_NB_CONTRACT  NUMBER(10) := 0;  
    V_NB_CONTRACT_TRAITE NUMBER(10) := 0;
    
    
    V_NB_VEHICLE  NUMBER(10) := 0;  
    V_NB_VEHICLE_TRAITE NUMBER(10) := 0;  
    V_NB_STK  NUMBER(10) := 0;  
    V_NB_STK_TRAITE NUMBER(10) := 0;

    --V_NB_FEES  NUMBER(10) := 0;  
    --V_NB_FEES_TRAITE NUMBER(10) := 0;



CURSOR C_MKTQT_AGREEMENT IS
SELECT 
TECH_ID AS TECH_ID,
TECH_DATEEXTRACTION AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
ISBUYBACKMAKE AS ISBUYBACKMAKE

FROM MKTOV.MKTQT_AGREEMENT
WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS
;

CURSOR C_MKTQT_REQUEST (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TECH_DATEEXTRACTION AS TECH_DATEEXTRACTION,
REQUESTREF AS REQUESTREF,
STATUSCODE AS STATUSCODE,
RESERVEDCONTRACTREF AS RESERVEDCONTRACTREF,
ACTIVATIONDATE AS ACTIVATIONDATE,
DATESTARTREQUEST AS DATESTARTREQUEST,
LIQUIDATIONDATE AS LIQUIDATIONDATE,
REQUESTSTATUS AS REQUESTSTATUS,
BRANDLABEL AS BRANDLABEL,
TOTALFINANCEDAMOUNTET  AS TOTALFINANCEDAMOUNTET ,
PRODUCTCATEGORYCODE AS PRODUCTCATEGORYCODE,
COMMERCIALPRODUCTLABEL AS COMMERCIALPRODUCTLABEL,
SELLERAGENCY AS SELLERAGENCY,
SALESMANCODE AS SALESMANCODE,
SALESMANNAME AS SALESMANNAME,
EMPLOYEESALESMANID AS EMPLOYEESALESMANID,
OFFERSTATUS AS OFFERSTATUS,
CREATIONDATE AS CREATIONDATE,
UPDATEDATE AS UPDATEDATE

FROM MKTOV.MKTQT_AGREEMENT_REQUEST
WHERE TECH_ID = P_TECH_ID
;



CURSOR C_MKTQT_VEHICLE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_DATEEXTRACTION AS TECH_DATEEXTRACTION,
REQUESTREF AS REQUESTREF,
VEHICLEREF AS VEHICLEREF,
SERIALNUMBER AS SERIALNUMBER,
REGISTRATIONNUMBER AS REGISTRATIONNUMBER,
DELIVERYDATE AS DELIVERYDATE,
INITIALCONTACTUALMILEAGE AS INITIALCONTACTUALMILEAGE,
CONTACTUALMILEAGE AS CONTACTUALMILEAGE,
STARTCONTRACTMILEAGE AS STARTCONTRACTMILEAGE,
EXPECTEDRETURNDATE AS EXPECTEDRETURNDATE,
REPURCHASEVEHICLEAMOUNTET AS REPURCHASEVEHICLEAMOUNTET,
KINDCODE AS KINDCODE,
ENERGYCODE AS ENERGYCODE

FROM MKTOV.MKTQT_AGREEMENT_VEH
WHERE TECH_ID = P_TECH_ID
;





CURSOR C_MKTQT_STK (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
REQUESTREF AS REQUESTREF,
USAGENAME AS USAGENAME,
FIRSTNAME AS FIRSTNAME,
EMAIL AS EMAIL,
PHONENUMBER AS PHONENUMBER,
COMPANYNAME AS COMPANYNAME,
BUSINESSNAME AS BUSINESSNAME,
NATIONALIDENTIFIER AS NATIONALIDENTIFIER,
NATIONALIDENTIFIERTYPE AS NATIONALIDENTIFIERTYPE,
CUSTOMERTYPELABEL AS CUSTOMERTYPELABEL

FROM MKTOV.MKTQT_AGREEMENT_STK
WHERE TECH_ID = P_TECH_ID
;



CURSOR C_MKTQT_CONTRACT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
CONTRACTREF AS CONTRACTREF,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN,
PRODUCTCATEGORYCODE AS PRODUCTCATEGORYCODE,
REALDATEENDCONTRACT AS REALDATEENDCONTRACT

FROM MKTOV.MKTQT_AGREEMENT_CONTRACT
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := P_FILENAME_AGREEMENT;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_AGREEMENT_MILES_JSON', ' ##  EXPORT AGREEMENT JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_AGREEMENT
       WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_AGREEMENT IN C_MKTQT_AGREEMENT LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_REQUEST_TRAITE  := 0;
         V_NB_CONTRACT_TRAITE  := 0;
         --V_NB_FEES_TRAITE  := 0;

         
         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_AGREEMENT.TECH_ID || '",
"tech_dateExtraction":"' || S_MKTQT_AGREEMENT.TECH_DATEEXTRACTION || '",
"countryBranchCode":"' || S_MKTQT_AGREEMENT.COUNTRYBRANCHCODE || '",
"isBuyBackMake":"' || S_MKTQT_AGREEMENT.ISBUYBACKMAKE || '"';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- REQUEST DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_REQUEST
         FROM  MKTOV.MKTQT_AGREEMENT_REQUEST
         WHERE TECH_ID = S_MKTQT_AGREEMENT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_REQUEST := NULL;
    END;

    IF NVL(V_NB_REQUEST, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_REQUEST IN C_MKTQT_REQUEST (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_REQUEST_TRAITE := V_NB_REQUEST_TRAITE+1;   ---- 
            V_NB_VEHICLE_TRAITE  := 0;
            V_NB_STK_TRAITE  := 0;
            
            V_LIGNE := '"request":{
                "tech_id":"' || S_MKTQT_REQUEST.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_REQUEST.TECH_DATEEXTRACTION || '",
                "requestRef":"' || S_MKTQT_REQUEST.REQUESTREF || '",
                "statusCode":"' || S_MKTQT_REQUEST.STATUSCODE || '",
                "reservedContractRef":"' || S_MKTQT_REQUEST.RESERVEDCONTRACTREF || '",
                "activationDate":"' || S_MKTQT_REQUEST.ACTIVATIONDATE || '",
                "dateStartRequest":"' || S_MKTQT_REQUEST.DATESTARTREQUEST || '",
                "liquidationDate":"' || S_MKTQT_REQUEST.LIQUIDATIONDATE || '",
                "requestStatus":"' || S_MKTQT_REQUEST.REQUESTSTATUS || '",
                "brandLabel":"' || S_MKTQT_REQUEST.BRANDLABEL || '",
                "totalFinancedAmountET ":"' || S_MKTQT_REQUEST.TOTALFINANCEDAMOUNTET  || '",
                "productCategoryCode":"' || S_MKTQT_REQUEST.PRODUCTCATEGORYCODE || '",
                "commercialProductLabel":"' || S_MKTQT_REQUEST.COMMERCIALPRODUCTLABEL || '",
                "sellerAgency":"' || S_MKTQT_REQUEST.SELLERAGENCY || '",
                "salesmanCode":"' || S_MKTQT_REQUEST.SALESMANCODE || '",
                "salesmanName":"' || S_MKTQT_REQUEST.SALESMANNAME || '",
                "employeeSalesmanId":"' || S_MKTQT_REQUEST.EMPLOYEESALESMANID || '",
                "offerStatus":"' || S_MKTQT_REQUEST.OFFERSTATUS || '",
                "creationDate":"' || S_MKTQT_REQUEST.CREATIONDATE || '",
                "updateDate":"' || S_MKTQT_REQUEST.UPDATEDATE || '"';                           
               
               
                                  --------------------- VEHICLE DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_VEHICLE
         FROM  MKTOV.MKTQT_AGREEMENT_VEH
         WHERE TECH_ID = S_MKTQT_REQUEST.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_VEHICLE := NULL;
    END;

    IF NVL(V_NB_VEHICLE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_VEHICLE IN C_MKTQT_VEHICLE (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_VEHICLE_TRAITE := V_NB_VEHICLE_TRAITE+1;   ---- 

            
            V_LIGNE := '"vehicle":{
                                "tech_dateExtraction":"' || S_MKTQT_VEHICLE.TECH_DATEEXTRACTION || '",
                                "requestRef":"' || S_MKTQT_VEHICLE.REQUESTREF || '",
                                "vehicleRef":"' || S_MKTQT_VEHICLE.VEHICLEREF || '",
                                "serialNumber":"' || S_MKTQT_VEHICLE.SERIALNUMBER || '",
                                "registrationNumber":"' || S_MKTQT_VEHICLE.REGISTRATIONNUMBER || '",
                                "deliveryDate":"' || S_MKTQT_VEHICLE.DELIVERYDATE || '",
                                "initialContactualMileage":"' || S_MKTQT_VEHICLE.INITIALCONTACTUALMILEAGE || '",
                                "contactualMileage":"' || S_MKTQT_VEHICLE.CONTACTUALMILEAGE || '",
                                "startContractMileage":"' || S_MKTQT_VEHICLE.STARTCONTRACTMILEAGE || '",
                                "expectedReturnDate":"' || S_MKTQT_VEHICLE.EXPECTEDRETURNDATE || '",
                                "repurchaseVehicleAmountET":"' || S_MKTQT_VEHICLE.REPURCHASEVEHICLEAMOUNTET || '",
                                "kindCode":"' || S_MKTQT_VEHICLE.KINDCODE || '",
                                "energyCode":"' || S_MKTQT_VEHICLE.ENERGYCODE || '"';                           
               

                if V_NB_VEHICLE_TRAITE = V_NB_VEHICLE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- VEHICLE FIN----------------------


                                             --------------------- STAKEHOLDERS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_STK
         FROM  MKTOV.MKTQT_AGREEMENT_STK
         WHERE TECH_ID = S_MKTQT_REQUEST.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_STK := NULL;
    END;

    IF NVL(V_NB_STK, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_STK IN C_MKTQT_STK (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_STK_TRAITE := V_NB_STK_TRAITE+1;   ---- 

            
            V_LIGNE := '"stakeholders":{
                                "tech_id":"' || S_MKTQT_STK.TECH_ID || '",
                                "requestRef":"' || S_MKTQT_STK.REQUESTREF || '",
                                "usageName":"' || S_MKTQT_STK.USAGENAME || '",
                                "firstName":"' || S_MKTQT_STK.FIRSTNAME || '",
                                "email":"' || S_MKTQT_STK.EMAIL || '",
                                "phoneNumber":"' || S_MKTQT_STK.PHONENUMBER || '",
                                "companyName":"' || S_MKTQT_STK.COMPANYNAME || '",
                                "businessName":"' || S_MKTQT_STK.BUSINESSNAME || '",
                                "nationalIdentifier":"' || S_MKTQT_STK.NATIONALIDENTIFIER || '",
                                "nationalIdentifierType":"' || S_MKTQT_STK.NATIONALIDENTIFIERTYPE || '",
                                "customerTypeLabel":"' || S_MKTQT_STK.CUSTOMERTYPELABEL || '"';                           
               

                if V_NB_STK_TRAITE = V_NB_STK THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


                                --------------------- STAKEHOLDERS FIN----------------------    
               
        

                if V_NB_REQUEST_TRAITE = V_NB_REQUEST THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- REQUEST FIN----------------------





                   --------------------- CONTRACT DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTRACT
         FROM  MKTOV.MKTQT_AGREEMENT_CONTRACT
         WHERE TECH_ID = S_MKTQT_AGREEMENT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTRACT := NULL;
    END;

    IF NVL(V_NB_CONTRACT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTRACT IN C_MKTQT_CONTRACT (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_CONTRACT_TRAITE := V_NB_CONTRACT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"contract":{
                "contractRef":"' || S_MKTQT_CONTRACT.CONTRACTREF || '",
                "backOfficeOrigin":"' || S_MKTQT_CONTRACT.BACKOFFICEORIGIN || '",
                "productCategoryCode":"' || S_MKTQT_CONTRACT.PRODUCTCATEGORYCODE || '",
                "realDateEndContract":"' || S_MKTQT_CONTRACT.REALDATEENDCONTRACT || '"'; 

                if V_NB_CONTRACT_TRAITE = V_NB_CONTRACT THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTRACT FIN----------------------




V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_AGREEMENT_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_AGREEMENT.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_AGREEMENT_MILES_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_AGREEMENT_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_AGREEMENT_MILES_JSON;





FUNCTION EXPORT_CONTRACT_MILES_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_CODE_PAYS VARCHAR2, P_FILENAME_CONTRAT VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;
    V_NB_FINANCING  NUMBER(10) := 0;
    V_NB_FINANCING_TRAITE  NUMBER(10) := 0;
    V_NB_SECURITIZATION NUMBER(10) := 0;
    V_NB_SECURITIZATION_TRAITE NUMBER(10) := 0;
    V_NB_ACCOUNT NUMBER(10) := 0;
    V_NB_ACCOUNT_TRAITE NUMBER(10) := 0;
    V_NB_PAYMEANACTIF NUMBER(10) := 0;
    V_NB_PAYMEANACTIF_TRAITE NUMBER(10) := 0;
    V_NB_VEHICULE NUMBER(10) := 0;
    V_NB_VEHICULE_TRAITE NUMBER(10) := 0;
    
    V_NB_AMOUNT NUMBER(10) := 0;
    V_NB_AMOUNT_TRAITE NUMBER(10) := 0;
    V_NB_ENDOFLIFE NUMBER(10) := 0;
    V_NB_ENDOFLIFE_TRAITE NUMBER(10) := 0;
    
    V_NB_SERVICES NUMBER(10) := 0;
    V_NB_SERVICES_TRAITE NUMBER(10) := 0;
    
    V_NB_SCHEDULES NUMBER(10) := 0;
    V_NB_SCHEDULES_TRAITE NUMBER(10) := 0;  
    
    V_NB_STAKEHOLDERS NUMBER(10) := 0;
    V_NB_STAKEHOLDERS_TRAITE NUMBER(10) := 0;
    
    V_NB_STAKEHOLDERS_ADRS NUMBER(10) := 0;
    V_NB_STAKEHOLDERS_ADRS_TRAITE NUMBER(10) := 0;
    
    V_NB_AMENDMENT NUMBER(10) := 0;
    V_NB_AMENDMENT_TRAITE NUMBER(10) := 0;
        
    V_NB_AMENDMENT_EXTEN NUMBER(10) := 0;
    V_NB_AMENDMENT_EXTEN_TRAITE NUMBER(10) := 0;
     
    V_NB_SIGNATORY NUMBER(10) := 0;
    V_NB_SIGNATORY_TRAITE NUMBER(10) := 0;  
   
   
   
    
CURSOR C_MKTQT_CONTRACT IS
SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
CONTRACTREF AS CONTRACTREF,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN,
CONTRACTSTATUS AS CONTRACTSTATUS,
ACCOUNTSTATUS AS ACCOUNTSTATUS,
TO_CHAR(ACCOUNTSTATUSCHANGEDATE,'YYYY-MM-DD') AS ACCOUNTSTATUSCHANGEDATE,
TO_CHAR(ACTIVATIONDATE,'YYYY-MM-DD') AS ACTIVATIONDATE,
DURATIONCONTRACTINIT AS DURATIONCONTRACTINIT,
DURATIONCONTRACT AS DURATIONCONTRACT,
TO_CHAR(DATEENDCONTRACT,'YYYY-MM-DD') AS DATEENDCONTRACT,
TO_CHAR(REALDATEENDCONTRACT,'YYYY-MM-DD') AS REALDATEENDCONTRACT,
ENDCONTRACTCODE AS ENDCONTRACTCODE,
PRODUCTCATEGORYLABEL AS PRODUCTCATEGORYLABEL,
PRODUCTCATEGORYCODE AS PRODUCTCATEGORYCODE,
SELLERAGENCY AS SELLERAGENCY,
SALESMANFULLNAME AS SALESMANFULLNAME,
SALESMANCODE AS SALESMANCODE,
PRODUCTCODE AS PRODUCTCODE,
PRODUCTSUBCODE AS PRODUCTSUBCODE,
COMMERCIALPRODUCTCODE AS COMMERCIALPRODUCTCODE,
FINANCIALPRODUCTLABEL AS FINANCIALPRODUCTLABEL,
FINANCIALPRODUCTCODE AS FINANCIALPRODUCTCODE,
OFFERREF AS OFFERREF,
OFFERVERSION AS OFFERVERSION,
STATECODE AS STATECODE,
TO_CHAR(DATEENDCONTRACTWHENRETURNED,'YYYY-MM-DD') AS DATEENDCONTRACTWHENRETURNED,
STATUSCODEOFCASEFINALIZED AS STATUSCODEOFCASEFINALIZED,
EARLYSETTLEMENTPOSSIBLEFLAG AS EARLYSETTLEMENTPOSSIBLEFLAG,
ISBUYBACKMAKE AS ISBUYBACKMAKE,
BUYBACKTYPE AS BUYBACKTYPE,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO
FROM MKTOV.MKTQT_CONTRACT
WHERE COUNTRYBRANCHCODE = P_CODE_PAYS
;


CURSOR C_FINANCING (P_TECH_ID VARCHAR2) IS 
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
TOTALFINANCEDAMOUNTET AS TOTALFINANCEDAMOUNTET,
AMOUNTWITHDEPOSIT AS AMOUNTWITHDEPOSIT,
INITIALTOTALFINANCEDAMOUNTET AS INITIALTOTALFINANCEDAMOUNTET,
INITIALRESIDUALVALUEAMOUNTET AS INITIALRESIDUALVALUEAMOUNTET,
RESIDUALVALUEAMOUNTET AS RESIDUALVALUEAMOUNTET,
RESIDUALVALUEAMOUNTUNADJUSTED AS RESIDUALVALUEAMOUNTUNADJUSTED,
TO_CHAR(DATESTARTCONTRACT, 'YYYY-MM-DD') AS DATESTARTCONTRACT,
NUMBERUNPAID AS NUMBERUNPAID,
AMOUNTREMAININGCAPITAL AS AMOUNTREMAININGCAPITAL,
FLAGSECURITIZED AS FLAGSECURITIZED,
TO_CHAR(STARTDATEOFDUEDATE, 'YYYY-MM-DD') AS STARTDATEOFDUEDATE,
TO_CHAR(ENDDATEOFDUEDATE, 'YYYY-MM-DD') AS ENDDATEOFDUEDATE,
NOMINALRATE AS NOMINALRATE,
USURYEXCLUSIONFLAG AS USURYEXCLUSIONFLAG,
(CASE WHEN SUBSTR(TO_CHAR(COSTADDITIONALMILEAGE),1,1) = ',' THEN  REPLACE(TO_CHAR(COSTADDITIONALMILEAGE),',','0,') ELSE TO_CHAR(COSTADDITIONALMILEAGE) END) AS COSTADDITIONALMILEAGE,
FEESAPPLICATION AS FEESAPPLICATION,
FIN_AMT_INIT_INTERST_OUTSERV AS FIN_AMT_INIT_INTERST_OUTSERV,
RENEGOTIATIONDATE AS RENEGOTIATIONDATE

FROM MKTOV.MKTQT_FINANCING
WHERE TECH_ID = P_TECH_ID
;



CURSOR C_ACCOUNT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
TO_CHAR(NEXTDUEDATE,'YYYY-MM-DD') AS NEXTDUEDATE,
NEXTRENTAMOUNTIT AS NEXTRENTAMOUNTIT,
NEXTRENTAMOUNTET AS NEXTRENTAMOUNTET,
NBPAYMENTNOTBILLED AS NBPAYMENTNOTBILLED,
AMOUNTFINANCIALINITRENTET AS AMOUNTFINANCIALINITRENTET,
AMOUNTFINANCIALINITRENTIT AS AMOUNTFINANCIALINITRENTIT,
AMOUNTFINANCIALRENTET AS AMOUNTFINANCIALRENTET,
AMOUNTFINANCIALRENTIT AS AMOUNTFINANCIALRENTIT,
AMOUNTFINANCIALSERVET AS AMOUNTFINANCIALSERVET,
AMOUNTFINANCIALSERVIT AS AMOUNTFINANCIALSERVIT,
AMOUNTFINANCIALRENTWITHSERVET AS AMOUNTFINANCIALRENTWITHSERVET,
AMOUNTFINANCIALRENTWITHSERVIT AS AMOUNTFINANCIALRENTWITHSERVIT,
DAYOFPAYMENT AS DAYOFPAYMENT

FROM MKTOV.MKTQT_ACCOUNT 
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_PAYMEANACTIF (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
BANKACCOUNTNUMBER AS BANKACCOUNTNUMBER

FROM MKTOV.MKTQT_CPAYMEANACTIF 
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_VEHICULE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
CONTRACTREF AS CONTRACTREF,
SERIALNUMBER AS SERIALNUMBER,
DELIVERYDATE AS DELIVERYDATE,
INITIALCONTRACTUALMILEAGE AS INITIALCONTRACTUALMILEAGE,
TO_CHAR(EXPECTEDRETURNDATE,'YYYY-MM-DD') AS EXPECTEDRETURNDATE,
REPURCHASEVEHICLEAMOUNTET AS REPURCHASEVEHICLEAMOUNTET,
STARTCONTRACTMILEAGE AS STARTCONTRACTMILEAGE,
CONTACTUALMILEAGE AS CONTACTUALMILEAGE

FROM MKTOV.MKTQT_CVEHICULE
WHERE TECH_ID = P_TECH_ID
;




CURSOR C_SERVICES (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
SERVICEREF AS SERVICEREF,
LABELSERVICE AS LABELSERVICE,
TO_CHAR(DATESTARTSERVICE, 'YYYY-MM-DD') AS DATESTARTSERVICE,
TO_CHAR(DATEENDSERVICE, 'YYYY-MM-DD') AS DATEENDSERVICE,
NEXTPAYMENTAMOUNTIT AS NEXTPAYMENTAMOUNTIT,
NEXTPAYMENTAMOUNTET AS NEXTPAYMENTAMOUNTET,
TOTALTAMOUNTIT AS TOTALTAMOUNTIT,
TOTALTAMOUNTET AS TOTALTAMOUNTET,
REASONOFENDSERVICE AS REASONOFENDSERVICE

FROM MKTOV.MKTQT_SERVICES
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_SCHEDULES (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
SCHEDULENUMBER AS SCHEDULENUMBER,
TO_CHAR(STARTDUEDATE, 'YYYY-MM-DD') AS STARTDUEDATE,
TO_CHAR(DATESTARTOFPERIODPAYMENT, 'YYYY-MM-DD') AS DATESTARTOFPERIODPAYMENT,
TO_CHAR(DATEENDOFPERIODPAYMENT, 'YYYY-MM-DD') AS DATEENDOFPERIODPAYMENT,
DURATION AS DURATION,
INTERESTAMOUNT AS INTERESTAMOUNT,
CHARGEAMOUNT AS CHARGEAMOUNT,
AMOUNTWITHOUTSERVICEET AS AMOUNTWITHOUTSERVICEET,
AMOUNTWITHOUTSERVICEIT AS AMOUNTWITHOUTSERVICEIT,
AMOUNTWITHSERVICEET AS AMOUNTWITHSERVICEET,
AMOUNTWITHSERVICEIT AS AMOUNTWITHSERVICEIT,
RATE AS RATE,
RESIDUALVALUEAMOUNTET AS RESIDUALVALUEAMOUNTET

FROM MKTOV.MKTQT_SCHEDULES
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_STAKEHOLDERS (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
STAKEHOLDERROLE AS STAKEHOLDERROLE,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
DEALERSHIPREF AS DEALERSHIPREF

FROM MKTOV.MKTQT_STAKEHOLDERS
WHERE TECH_ID = P_TECH_ID
;



CURSOR C_SIGNATORY (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
NAME AS NAME,
EMAIL AS EMAIL
FROM MKTOV.MKTQT_SIGNATORY
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := P_FILENAME_CONTRAT;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_CONTRACT_MILES_JSON', ' ## EXPORT CONTRACT JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CONTRACT
       WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CONTRACT IN C_MKTQT_CONTRACT LOOP
       
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
        V_NB_FINANCING_TRAITE   := 0;
        --V_NB_SECURITIZATION_TRAITE  := 0;
        V_NB_ACCOUNT_TRAITE  := 0; 
        V_NB_PAYMEANACTIF_TRAITE  := 0;
        V_NB_VEHICULE_TRAITE  := 0;
        --V_NB_AMOUNT_TRAITE  := 0;
        --V_NB_ENDOFLIFE_TRAITE  := 0;
        V_NB_SERVICES_TRAITE  := 0;
        V_NB_SCHEDULES_TRAITE  := 0;  
        V_NB_STAKEHOLDERS_TRAITE  := 0;  
        --V_NB_STAKEHOLDERS_ADRS_TRAITE  := 0;    
        --V_NB_AMENDMENT_TRAITE  := 0;  
        --V_NB_AMENDMENT_EXTEN_TRAITE  := 0;
        V_NB_SIGNATORY_TRAITE  := 0;  
                
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CONTRACT.TECH_ID || '",
"tech_dateExtraction":"' || S_MKTQT_CONTRACT.TECH_DATEEXTRACTION || '",
"countryBranchCode":"' || S_MKTQT_CONTRACT.COUNTRYBRANCHCODE || '",
"contractRef":"' || S_MKTQT_CONTRACT.CONTRACTREF || '",
"backOfficeOrigin":"' || S_MKTQT_CONTRACT.BACKOFFICEORIGIN || '",
"contractStatus":"' || S_MKTQT_CONTRACT.CONTRACTSTATUS || '",
"accountStatus":"' || S_MKTQT_CONTRACT.ACCOUNTSTATUS || '",
"accountStatusChangeDate":"' || S_MKTQT_CONTRACT.ACCOUNTSTATUSCHANGEDATE || '",
"activationDate":"' || S_MKTQT_CONTRACT.ACTIVATIONDATE || '",
"durationContractInit":"' || S_MKTQT_CONTRACT.DURATIONCONTRACTINIT || '",
"durationContract":"' || S_MKTQT_CONTRACT.DURATIONCONTRACT || '",
"dateEndContract":"' || S_MKTQT_CONTRACT.DATEENDCONTRACT || '",
"realDateEndContract":"' || S_MKTQT_CONTRACT.REALDATEENDCONTRACT || '",
"endContractCode":"' || S_MKTQT_CONTRACT.ENDCONTRACTCODE || '",
"productCategoryLabel":"' || S_MKTQT_CONTRACT.PRODUCTCATEGORYLABEL || '",
"productCategoryCode":"' || S_MKTQT_CONTRACT.PRODUCTCATEGORYCODE || '",
"sellerAgency":"' || S_MKTQT_CONTRACT.SELLERAGENCY || '",
"salesmanFullName":"' || S_MKTQT_CONTRACT.SALESMANFULLNAME || '",
"salesmanCode":"' || S_MKTQT_CONTRACT.SALESMANCODE || '",
"productCode":"' || S_MKTQT_CONTRACT.PRODUCTCODE || '",
"productSubCode":"' || S_MKTQT_CONTRACT.PRODUCTSUBCODE || '",
"commercialProductCode":"' || S_MKTQT_CONTRACT.COMMERCIALPRODUCTCODE || '",
"financialProductLabel":"' || S_MKTQT_CONTRACT.FINANCIALPRODUCTLABEL || '",
"financialProductCode":"' || S_MKTQT_CONTRACT.FINANCIALPRODUCTCODE || '",
"offerRef":"' || S_MKTQT_CONTRACT.OFFERREF || '",
"offerVersion":"' || S_MKTQT_CONTRACT.OFFERVERSION || '",
"stateCode":"' || S_MKTQT_CONTRACT.STATECODE || '",
"dateEndContractWhenReturned":"' || S_MKTQT_CONTRACT.DATEENDCONTRACTWHENRETURNED || '",
"statusCodeOfCaseFinalized":"' || S_MKTQT_CONTRACT.STATUSCODEOFCASEFINALIZED || '",
"earlySettlementPossibleFlag":"' || S_MKTQT_CONTRACT.EARLYSETTLEMENTPOSSIBLEFLAG || '",
"isBuyBackMake":"' || S_MKTQT_CONTRACT.ISBUYBACKMAKE || '",
"buyBackType":"' || S_MKTQT_CONTRACT.BUYBACKTYPE || '",
"isLeasco":"' || S_MKTQT_CONTRACT.ISLEASCO || '",
"isFinco":"' || S_MKTQT_CONTRACT.ISFINCO || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


    -----------------------------------FINANCING-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO V_NB_FINANCING
         FROM MKTOV.MKTQT_FINANCING
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_FINANCING := NULL;
    END;

     FOR S_FINANCING IN C_FINANCING (S_MKTQT_CONTRACT.TECH_ID) LOOP
            V_NB_FINANCING_TRAITE := V_NB_FINANCING_TRAITE+1;   ---- A REVOIR 
            
            
            V_LIGNE := '"financing":{
                "tech_id":"' || S_FINANCING.TECH_ID || '",
                "contractRef":"' || S_FINANCING.CONTRACTREF || '",
                "totalFinancedAmountET":"' || S_FINANCING.TOTALFINANCEDAMOUNTET || '",
                "amountWithDeposit":"' || S_FINANCING.AMOUNTWITHDEPOSIT || '",
                "initialTotalFinancedAmountET":"' || S_FINANCING.INITIALTOTALFINANCEDAMOUNTET || '",
                "InitialResidualValueAmountET":"' || S_FINANCING.INITIALRESIDUALVALUEAMOUNTET || '",
                "residualValueAmountET":"' || S_FINANCING.RESIDUALVALUEAMOUNTET || '",
                "residualValueAmountUnadjusted":"' || S_FINANCING.RESIDUALVALUEAMOUNTUNADJUSTED || '",
                "dateStartContract":"' || S_FINANCING.DATESTARTCONTRACT || '",
                "numberUnpaid":"' || S_FINANCING.NUMBERUNPAID || '",
                "amountRemainingCapital":"' || S_FINANCING.AMOUNTREMAININGCAPITAL || '",
                "flagSecuritized":"' || S_FINANCING.FLAGSECURITIZED || '",
                "startDateOfDueDate":"' || S_FINANCING.STARTDATEOFDUEDATE || '",
                "endDateOfDueDate":"' || S_FINANCING.ENDDATEOFDUEDATE || '",
                "nominalRate":"' || S_FINANCING.NOMINALRATE || '",
                "usuryExclusionFlag":"' || S_FINANCING.USURYEXCLUSIONFLAG || '",
                "costAdditionalMileage":"' || S_FINANCING.COSTADDITIONALMILEAGE || '",
                "feesApplication":"' || S_FINANCING.FEESAPPLICATION || '",
                "financedAmountInitWithInterestWithoutService":"' || S_FINANCING.FIN_AMT_INIT_INTERST_OUTSERV || '",
                "renegotiationDate":"' || S_FINANCING.RENEGOTIATIONDATE || '"';
   
                if V_NB_FINANCING_TRAITE = V_NB_FINANCING THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
         
       END LOOP;
    V_LIGNE := '';  -------- null

 
    
 -----------------------------------ACCOUNT -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ACCOUNT 
         FROM  MKTOV.MKTQT_ACCOUNT 
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ACCOUNT  := NULL;
    END;

    IF NVL(V_NB_ACCOUNT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_ACCOUNT IN C_ACCOUNT (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_ACCOUNT_TRAITE := V_NB_ACCOUNT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"account":{
                "tech_id":"' || S_ACCOUNT.TECH_ID || '",
                "contractRef":"' || S_ACCOUNT.CONTRACTREF || '",
                "nextDueDate":"' || S_ACCOUNT.NEXTDUEDATE || '",
                "nextRentAmountIT":"' || S_ACCOUNT.NEXTRENTAMOUNTIT || '",
                "nextRentAmountET":"' || S_ACCOUNT.NEXTRENTAMOUNTET || '",
                "nbPaymentNotBilled":"' || S_ACCOUNT.NBPAYMENTNOTBILLED || '",
                "amountFinancialInitRentET":"' || S_ACCOUNT.AMOUNTFINANCIALINITRENTET || '",
                "amountFinancialInitRentIT":"' || S_ACCOUNT.AMOUNTFINANCIALINITRENTIT || '",
                "amountFinancialRentET":"' || S_ACCOUNT.AMOUNTFINANCIALRENTET || '",
                "amountFinancialRentIT":"' || S_ACCOUNT.AMOUNTFINANCIALRENTIT || '",
                "amountFinancialServET":"' || S_ACCOUNT.AMOUNTFINANCIALSERVET || '",
                "amountFinancialServIT":"' || S_ACCOUNT.AMOUNTFINANCIALSERVIT || '",
                "amountFinancialRentWithServET":"' || S_ACCOUNT.AMOUNTFINANCIALRENTWITHSERVET || '",
                "amountFinancialRentWithServIT":"' || S_ACCOUNT.AMOUNTFINANCIALRENTWITHSERVIT || '",
                "dayOfPayment":"' || S_ACCOUNT.DAYOFPAYMENT || '"';

                if V_NB_ACCOUNT_TRAITE = V_NB_ACCOUNT THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

 -----------------------------------PAYMEANACTIF -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PAYMEANACTIF 
         FROM  MKTOV.MKTQT_CPAYMEANACTIF
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PAYMEANACTIF  := NULL;
    END;

    IF NVL(V_NB_PAYMEANACTIF, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_PAYMEANACTIF IN C_PAYMEANACTIF (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_PAYMEANACTIF_TRAITE := V_NB_PAYMEANACTIF_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"payMeanActif":{
                "tech_id":"' || S_PAYMEANACTIF.TECH_ID || '",
                "contractRef":"' || S_PAYMEANACTIF.CONTRACTREF || '",
                "bankAccountNumber":"' || S_PAYMEANACTIF.BANKACCOUNTNUMBER || '"';


                if V_NB_PAYMEANACTIF_TRAITE = V_NB_PAYMEANACTIF THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

 -----------------------------------VEHICULE -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_VEHICULE 
         FROM  MKTOV.MKTQT_CVEHICULE
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_VEHICULE  := NULL;
    END;

    IF NVL(V_NB_VEHICULE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"vehicule": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_VEHICULE IN C_VEHICULE (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_VEHICULE_TRAITE := V_NB_VEHICULE_TRAITE+1;    
               -- V_NB_AMOUNT_TRAITE  := 0;
               --- V_NB_ENDOFLIFE_TRAITE  := 0;
            
            V_LIGNE := '"vehicule ":{
                "tech_id":"' || S_VEHICULE.TECH_ID || '",
                "tech_dateExtraction":"' || S_VEHICULE.TECH_DATEEXTRACTION || '",
                "contractRef":"' || S_VEHICULE.CONTRACTREF || '",
                "serialNumber":"' || S_VEHICULE.SERIALNUMBER || '",
                "deliveryDate":"' || S_VEHICULE.DELIVERYDATE || '",
                "initialContractualMileage":"' || S_VEHICULE.INITIALCONTRACTUALMILEAGE || '",
                "expectedReturnDate":"' || S_VEHICULE.EXPECTEDRETURNDATE || '",
                "repurchaseVehicleAmountET":"' || S_VEHICULE.REPURCHASEVEHICLEAMOUNTET || '",
                "startContractMileage":"' || S_VEHICULE.STARTCONTRACTMILEAGE || '",
                "contactualMileage":"' || S_VEHICULE.CONTACTUALMILEAGE || '"';
              ---  res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                if V_NB_VEHICULE_TRAITE = V_NB_VEHICULE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null





 -----------------------------------SERVICES-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SERVICES
         FROM  MKTOV.MKTQT_SERVICES
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SERVICES  := NULL;
    END;

    IF NVL(V_NB_SERVICES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"services": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_SERVICES IN C_SERVICES (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SERVICES_TRAITE := V_NB_SERVICES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_SERVICES.TECH_ID || '",
                "contractRef":"' || S_SERVICES.CONTRACTREF || '",
                "serviceRef":"' || S_SERVICES.SERVICEREF || '",
                "labelService":"' || S_SERVICES.LABELSERVICE || '",
                "dateStartService":"' || S_SERVICES.DATESTARTSERVICE || '",
                "dateEndService":"' || S_SERVICES.DATEENDSERVICE || '",
                "nextPaymentAmountIT":"' || S_SERVICES.NEXTPAYMENTAMOUNTIT || '",
                "nextPaymentAmountET":"' || S_SERVICES.NEXTPAYMENTAMOUNTET || '",
                "totaltAmountIT":"' || S_SERVICES.TOTALTAMOUNTIT || '",
                "totaltAmountET":"' || S_SERVICES.TOTALTAMOUNTET || '",
                "reasonOfEndService":"' || S_SERVICES.REASONOFENDSERVICE || '"';
     
        

                if V_NB_SERVICES_TRAITE = V_NB_SERVICES THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
---------------------------------------



 -----------------------------------SCHEDULES-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SCHEDULES
         FROM  MKTOV.MKTQT_SCHEDULES
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SCHEDULES  := NULL;
    END;

    IF NVL(V_NB_SCHEDULES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"schedules": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       
       FOR S_SCHEDULES IN C_SCHEDULES (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SCHEDULES_TRAITE := V_NB_SCHEDULES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_SCHEDULES.TECH_ID || '",
                "contractRef":"' || S_SCHEDULES.CONTRACTREF || '",
                "scheduleNumber":"' || S_SCHEDULES.SCHEDULENUMBER || '",
                "startDueDate":"' || S_SCHEDULES.STARTDUEDATE || '",
                "dateStartOfPeriodPayment":"' || S_SCHEDULES.DATESTARTOFPERIODPAYMENT || '",
                "dateEndOfPeriodPayment":"' || S_SCHEDULES.DATEENDOFPERIODPAYMENT || '",
                "duration":"' || S_SCHEDULES.DURATION || '",
                "interestAmount":"' || S_SCHEDULES.INTERESTAMOUNT || '",
                "chargeAmount":"' || S_SCHEDULES.CHARGEAMOUNT || '",
                "amountWithoutServiceET":"' || S_SCHEDULES.AMOUNTWITHOUTSERVICEET || '",
                "amountWithoutServiceIT":"' || S_SCHEDULES.AMOUNTWITHOUTSERVICEIT || '",
                "amountWithServiceET":"' || S_SCHEDULES.AMOUNTWITHSERVICEET || '",
                "amountWithServiceIT":"' || S_SCHEDULES.AMOUNTWITHSERVICEIT || '",
                "rate":"' || S_SCHEDULES.RATE || '",
                "residualValueAmountET":"' || S_SCHEDULES.RESIDUALVALUEAMOUNTET || '"';
               


                if V_NB_SCHEDULES_TRAITE = V_NB_SCHEDULES THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;


            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
    
    
-----------------------------------STAKEHOLDERS-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_STAKEHOLDERS
         FROM  MKTOV.MKTQT_STAKEHOLDERS
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_STAKEHOLDERS  := NULL;
    END;

    IF NVL(V_NB_STAKEHOLDERS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"stakeholders": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_STAKEHOLDERS IN C_STAKEHOLDERS (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_STAKEHOLDERS_TRAITE := V_NB_STAKEHOLDERS_TRAITE+1;   ---- 
            --V_NB_STAKEHOLDERS_ADRS_TRAITE  := 0; 
            
            V_LIGNE := '                {
                "tech_id":"' || S_STAKEHOLDERS.TECH_ID || '",
                "contractRef":"' || S_STAKEHOLDERS.CONTRACTREF || '",
                "stakeholderRole":"' || S_STAKEHOLDERS.STAKEHOLDERROLE || '",
                "srcPartyId":"' || S_STAKEHOLDERS.SRCPARTYID || '",
                "srcJvCode":"' || S_STAKEHOLDERS.SRCJVCODE || '",
                "srcAppCode":"' || S_STAKEHOLDERS.SRCAPPCODE || '",
                "dealershipRef":"' || S_STAKEHOLDERS.DEALERSHIPREF || '"';
    
                if V_NB_STAKEHOLDERS_TRAITE = V_NB_STAKEHOLDERS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- STAKEHOLDERS FIN----------------------  
    
    
    
                   --------------------- SIGNATORY DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SIGNATORY
         FROM  MKTOV.MKTQT_SIGNATORY
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SIGNATORY := NULL;
    END;

    IF NVL(V_NB_SIGNATORY, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_SIGNATORY IN C_SIGNATORY (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SIGNATORY_TRAITE := V_NB_SIGNATORY_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"signatory":{
                        "name":"' || S_SIGNATORY.NAME	 || '",
                        "email":"' || S_SIGNATORY.EMAIL	 || '"';
                           
               

                if V_NB_SIGNATORY_TRAITE = V_NB_SIGNATORY THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- SIGNATORY FIN----------------------


    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CONTRACT_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CONTRACT.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_CONTRACT_MILES_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CONTRACT_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_CONTRACT_MILES_JSON;






FUNCTION EXPORT_ASSET_MILES_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_CODE_PAYS VARCHAR2, P_FILENAME_ASSET VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_VEHICLE  NUMBER(10) := 0;  
    V_NB_VEHICLE_TRAITE NUMBER(10) := 0;
    V_NB_LABELS  NUMBER(10) := 0;  
    V_NB_LABELS_TRAITE NUMBER(10) := 0;
    V_NB_PRICING  NUMBER(10) := 0;  
    V_NB_PRICING_TRAITE NUMBER(10) := 0;

    V_NB_BASEPRICE  NUMBER(10) := 0;  
    V_NB_BASEPRICE_TRAITE NUMBER(10) := 0;
    V_NB_DISCOUNTS  NUMBER(10) := 0;  
    V_NB_DISCOUNTS_TRAITE NUMBER(10) := 0;
    
    V_NB_LIFECYCLE  NUMBER(10) := 0;  
    V_NB_LIFECYCLE_TRAITE NUMBER(10) := 0;
    
    V_NB_DOMAINREFS  NUMBER(10) := 0;  
    V_NB_DOMAINREFS_TRAITE NUMBER(10) := 0;
    
    V_NB_CROSSREF NUMBER(10) := 0;    
    V_NB_CROSSREF_TRAITE NUMBER(10) := 0;
    V_NB_OPTION NUMBER(10) := 0;    
    V_NB_OPTION_TRAITE NUMBER(10) := 0;
    V_NB_ENDOFLIFE NUMBER(10) := 0;    
    V_NB_ENDOFLIFE_TRAITE NUMBER(10) := 0;    
    
    
    

CURSOR C_MKTQT_ASSET IS
SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE
FROM MKTOV.MKTQT_ASSET
WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS
;

CURSOR C_MKTQT_VEHICLE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID ,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION ,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE ,
SERIALNUMBER AS SERIALNUMBER ,
BRANDLABEL AS BRANDLABEL ,
DELIVERYDATE AS DELIVERYDATE ,
REGISTRATIONNUMBER AS REGISTRATIONNUMBER ,
FIRSTCIRCULATIONDATE AS FIRSTCIRCULATIONDATE ,
INITIALMILEAGE AS INITIALMILEAGE ,
CO2EMISSIONNEDC AS CO2EMISSIONNEDC ,
CO2CLASSCODE AS CO2CLASSCODE ,
REPLACE(FISCALHORSEPOWER,',','.') AS FISCALHORSEPOWER ,
KINDCODE AS KINDCODE ,
ENERGYCODE AS ENERGYCODE ,
CUBICCAPACITY AS CUBICCAPACITY ,
MAXIMUMPOWERKW AS MAXIMUMPOWERKW ,
MAXLADENWEIGHT AS MAXLADENWEIGHT ,
KERBWEIGHT AS KERBWEIGHT ,
ISLEASCO AS ISLEASCO ,
ISFINCO AS ISFINCO ,
CONTRACTREF AS CONTRACTREF 

FROM MKTOV.MKTQT_ASSET_VEHICULE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_LABELS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
LANGUAGECODE AS LANGUAGECODE,
VERSIONLABELSHORT AS VERSIONLABELSHORT,
VERSIONLABELLONG AS VERSIONLABELLONG

FROM MKTOV.MKTQT_ASSET_VEHICULE_LABELS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_CROSSREF (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TECH_LASTUPDATEDATE AS TECH_LASTUPDATEDATE,
IDENTIFIER AS IDENTIFIER,
IDENTIFIERTYPE AS IDENTIFIERTYPE

FROM MKTOV.MKTQT_ASSET_VEHICULE_CROSSREF
WHERE TECH_ID = P_TECH_ID
;





CURSOR C_MKTQT_PRICING (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TECH_DATEEXTRACTION AS TECH_DATEEXTRACTION,
VEHICLEREF AS VEHICLEREF,
OPTIONSTOTALAMOUNTET AS OPTIONSTOTALAMOUNTET,
ACCESSORIESTOTALAMOUNTET AS ACCESSORIESTOTALAMOUNTET,
ENVIRONMENTALBONUS AS ENVIRONMENTALBONUS

FROM MKTOV.MKTQT_VEHICULE_PRICING
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_BASEPRICE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
REPLACE(AMOUNTET,',','.') AS AMOUNTET

FROM MKTOV.MKTQT_VEHICULE_BASEPRICE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_DISCOUNTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
REPLACE(AMOUNTET,',','.') AS AMOUNTET

FROM MKTOV.MKTQT_VEHICULE_PRICE_DISCOUNT
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_OPTION (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
VEHICLEREF AS VEHICLEREF,
LABELSHORT AS LABELSHORT

FROM MKTOV.MKTQT_VEHICULE_OPTION
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_LIFECYCLE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
VEHICLEREF AS VEHICLEREF,
SERIALNUMBER AS SERIALNUMBER,
REGISTRATIONNUMBER AS REGISTRATIONNUMBER,
DATEREGISTRATION AS DATEREGISTRATION

FROM MKTOV.MKTQT_VEHICULE_LIFECYCLE
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_ENDOFLIFE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
CONTACTENDOFLIFEDATE AS CONTACTENDOFLIFEDATE,
EARLYTERMINATIONFLAG AS EARLYTERMINATIONFLAG,
DEALERRETURNDATE AS DEALERRETURNDATE,
CHOICECUSTOMERRETURNDATE AS CHOICECUSTOMERRETURNDATE,
REALRETURNDATE AS REALRETURNDATE,
BUYERDEALERNAME AS BUYERDEALERNAME,
BUYERDEALERREF AS BUYERDEALERREF,
BUYERDEALERZIPCODE AS BUYERDEALERZIPCODE,
BUYERDEALERCITY AS BUYERDEALERCITY

FROM MKTOV.MKTQT_VEHICULE_ENDOFLIFE
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_DOMAINREFS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
VEHICLEREF AS VEHICLEREF,
SERIALNUMBER AS SERIALNUMBER,
CONTRACTREF AS CONTRACTREF,
ACCOUNTSTATUS AS ACCOUNTSTATUS,
SRCPARTYID AS SRCPARTYID,
NATIONALID AS NATIONALID

FROM MKTOV.MKTQT_VEHICULE_DOMAINREFS
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := P_FILENAME_ASSET;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_ASSET_MILES_JSON', ' ##  EXPORT ASSET JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_ASSET
       WHERE  COUNTRYBRANCHCODE = P_CODE_PAYS;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_ASSET IN C_MKTQT_ASSET LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_VEHICLE_TRAITE := 0;
         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_ASSET.TECH_ID  || '",
"tech_dateExtraction":"' || S_MKTQT_ASSET.TECH_DATEEXTRACTION  || '",
"countryBranchCode":"' || S_MKTQT_ASSET.COUNTRYBRANCHCODE  || '"';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                  --------------------- VEHICLE DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_VEHICLE
         FROM  MKTOV.MKTQT_ASSET_VEHICULE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_VEHICLE := NULL;
    END;

    IF NVL(V_NB_VEHICLE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"vehicle":[';
       ---res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_VEHICLE IN C_MKTQT_VEHICLE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_VEHICLE_TRAITE := V_NB_VEHICLE_TRAITE+1;   ---- 
            V_NB_LABELS_TRAITE := 0;
            V_NB_PRICING_TRAITE := 0;
            V_NB_LIFECYCLE_TRAITE :=0;
            V_NB_DOMAINREFS_TRAITE :=0;
            
            V_NB_CROSSREF_TRAITE :=0;
            V_NB_OPTION_TRAITE := 0;
            V_NB_ENDOFLIFE_TRAITE :=0;
            
            
            
            V_LIGNE := '"vehicle":{
"tech_id":"' || S_MKTQT_VEHICLE.TECH_ID || '",
"tech_dateExtraction":"' || S_MKTQT_VEHICLE.TECH_DATEEXTRACTION || '",
"countryBranchCode":"' || S_MKTQT_VEHICLE.COUNTRYBRANCHCODE || '",
"serialNumber":"' || S_MKTQT_VEHICLE.SERIALNUMBER || '",
"brandLabel":"' || S_MKTQT_VEHICLE.BRANDLABEL || '",
"deliveryDate":"' || S_MKTQT_VEHICLE.DELIVERYDATE || '",
"registrationNumber":"' || S_MKTQT_VEHICLE.REGISTRATIONNUMBER || '",
"firstCirculationDate":"' || S_MKTQT_VEHICLE.FIRSTCIRCULATIONDATE || '",
"initialMileage":"' || S_MKTQT_VEHICLE.INITIALMILEAGE || '",
"co2EmissionNEDC":"' || S_MKTQT_VEHICLE.CO2EMISSIONNEDC || '",
"co2ClassCode":"' || S_MKTQT_VEHICLE.CO2CLASSCODE || '",
"fiscalHorsePower":"' || S_MKTQT_VEHICLE.FISCALHORSEPOWER || '",
"kindCode":"' || S_MKTQT_VEHICLE.KINDCODE || '",
"energyCode":"' || S_MKTQT_VEHICLE.ENERGYCODE || '",
"cubicCapacity":"' || S_MKTQT_VEHICLE.CUBICCAPACITY || '",
"maximumPowerKW":"' || S_MKTQT_VEHICLE.MAXIMUMPOWERKW || '",
"maxLadenWeight":"' || S_MKTQT_VEHICLE.MAXLADENWEIGHT || '",
"kerbWeight":"' || S_MKTQT_VEHICLE.KERBWEIGHT || '",
"isLeasco":"' || S_MKTQT_VEHICLE.ISLEASCO || '",
"isFinco":"' || S_MKTQT_VEHICLE.ISFINCO || '",
"contractRef":"' || S_MKTQT_VEHICLE.CONTRACTREF || '"';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 

          

                  --------------------- LABELS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_LABELS
         FROM  MKTOV.MKTQT_ASSET_VEHICULE_LABELS
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_LABELS := NULL;
    END;

    IF NVL(V_NB_LABELS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"labels": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_LABELS IN C_MKTQT_LABELS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_LABELS_TRAITE := V_NB_LABELS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "languageCode":"' || S_MKTQT_LABELS.LANGUAGECODE || '",
            "versionLabelShort":"' || S_MKTQT_LABELS.VERSIONLABELSHORT || '",
            "versionLabelLong":"' || S_MKTQT_LABELS.VERSIONLABELLONG || '"';                  
               

                if V_NB_LABELS_TRAITE = V_NB_LABELS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- LABELS FIN----------------------


                  --------------------- CROSSREF DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CROSSREF
         FROM  MKTOV.MKTQT_ASSET_VEHICULE_CROSSREF
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CROSSREF := NULL;
    END;

    IF NVL(V_NB_CROSSREF, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"crossRefs": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CROSSREF IN C_MKTQT_CROSSREF (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_CROSSREF_TRAITE := V_NB_CROSSREF_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "tech_id":"' || S_MKTQT_CROSSREF.TECH_ID || '",
            "tech_lastUpdateDate":"' || S_MKTQT_CROSSREF.TECH_LASTUPDATEDATE || '",
            "identifier":"' || S_MKTQT_CROSSREF.IDENTIFIER || '",
            "identifierType":"' || S_MKTQT_CROSSREF.IDENTIFIERTYPE || '"';                  
               

                if V_NB_CROSSREF_TRAITE = V_NB_CROSSREF THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CROSSREF FIN----------------------


                  --------------------- PRICING DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PRICING
         FROM  MKTOV.MKTQT_VEHICULE_PRICING
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PRICING := NULL;
    END;

    IF NVL(V_NB_PRICING, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"labels": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_PRICING IN C_MKTQT_PRICING (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_PRICING_TRAITE := V_NB_PRICING_TRAITE+1;   ---- 
            V_NB_BASEPRICE_TRAITE := 0;
            V_NB_DISCOUNTS_TRAITE := 0;
            
            
            V_LIGNE := '            "pricing":{
                        "tech_id":"' || S_MKTQT_PRICING.TECH_ID || '",
                        "tech_dateExtraction":"' || S_MKTQT_PRICING.TECH_DATEEXTRACTION || '",
                        "vehicleRef":"' || S_MKTQT_PRICING.VEHICLEREF || '",
                        "optionsTotalAmountET":"' || S_MKTQT_PRICING.OPTIONSTOTALAMOUNTET || '",
                        "accessoriesTotalAmountET":"' || S_MKTQT_PRICING.ACCESSORIESTOTALAMOUNTET || '",
                        "environmentalBonus":"' || S_MKTQT_PRICING.ENVIRONMENTALBONUS || '"';                  
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              
                                ---------------------  PRICING: BASEPRICE  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_BASEPRICE
         FROM  MKTOV.MKTQT_VEHICULE_BASEPRICE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_BASEPRICE := NULL;
    END;

    IF NVL(V_NB_BASEPRICE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"basePrice": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_BASEPRICE IN C_MKTQT_BASEPRICE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_BASEPRICE_TRAITE := V_NB_BASEPRICE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            "basePrice":{
                        "amountET":' || S_MKTQT_BASEPRICE.AMOUNTET || '';
   

                if V_NB_BASEPRICE_TRAITE = V_NB_BASEPRICE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PRICING: BASEPRICE  FIN----------------------
              
                                ---------------------  PRICING: DISCOUNT  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_DISCOUNTS
         FROM  MKTOV.MKTQT_VEHICULE_PRICE_DISCOUNT
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_DISCOUNTS := NULL;
    END;

    IF NVL(V_NB_DISCOUNTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '                "discounts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_DISCOUNTS IN C_MKTQT_DISCOUNTS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_DISCOUNTS_TRAITE := V_NB_DISCOUNTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                    "amountET":' || S_MKTQT_DISCOUNTS.AMOUNTET || '';
                 
               

                if V_NB_DISCOUNTS_TRAITE = V_NB_DISCOUNTS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            ---------------------  PRICING:  DISCOUNT  FIN----------------------              
           

                if V_NB_PRICING_TRAITE = V_NB_PRICING THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PRICING FIN----------------------




                                --------------------- OPTION  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_OPTION
         FROM  MKTOV.MKTQT_VEHICULE_OPTION
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_OPTION := NULL;
    END;

    IF NVL(V_NB_OPTION, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"options": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_OPTION IN C_MKTQT_OPTION (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_OPTION_TRAITE := V_NB_OPTION_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_OPTION.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_OPTION.TECH_DATEEXTRACTION || '",
                "countryBranchCode":"' || S_MKTQT_OPTION.COUNTRYBRANCHCODE || '",
                "vehicleRef":"' || S_MKTQT_OPTION.VEHICLEREF || '",
                "labelShort":"' || S_MKTQT_OPTION.LABELSHORT || '"';
                 
               

                if V_NB_OPTION_TRAITE = V_NB_OPTION THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- OPTION FIN----------------------              
              

              --------------------- LIFECYCLE  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_LIFECYCLE
         FROM  MKTOV.MKTQT_VEHICULE_LIFECYCLE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_LIFECYCLE := NULL;
    END;

    IF NVL(V_NB_LIFECYCLE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"lifecycle": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_LIFECYCLE IN C_MKTQT_LIFECYCLE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_LIFECYCLE_TRAITE := V_NB_LIFECYCLE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_LIFECYCLE.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_LIFECYCLE.TECH_DATEEXTRACTION || '",
                "countryBranchCode":"' || S_MKTQT_LIFECYCLE.COUNTRYBRANCHCODE || '",
                "vehicleRef":"' || S_MKTQT_LIFECYCLE.VEHICLEREF || '",
                "serialNumber":"' || S_MKTQT_LIFECYCLE.SERIALNUMBER || '",
                "registrationNumber":"' || S_MKTQT_LIFECYCLE.REGISTRATIONNUMBER || '",
                "dateRegistration":"' || S_MKTQT_LIFECYCLE.DATEREGISTRATION || '"';
                 
               

                if V_NB_LIFECYCLE_TRAITE = V_NB_LIFECYCLE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- LIFECYCLE FIN----------------------              
              

              --------------------- ENDOFLIFE  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ENDOFLIFE
         FROM  MKTOV.MKTQT_VEHICULE_ENDOFLIFE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ENDOFLIFE := NULL;
    END;

    IF NVL(V_NB_ENDOFLIFE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"endOfLife": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ENDOFLIFE IN C_MKTQT_ENDOFLIFE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_ENDOFLIFE_TRAITE := V_NB_ENDOFLIFE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "contactEndOfLifeDate":"' || S_MKTQT_ENDOFLIFE.CONTACTENDOFLIFEDATE || '",
                "earlyTerminationFlag":"' || S_MKTQT_ENDOFLIFE.EARLYTERMINATIONFLAG || '",
                "dealerReturnDate":"' || S_MKTQT_ENDOFLIFE.DEALERRETURNDATE || '",
                "choiceCustomerReturnDate":"' || S_MKTQT_ENDOFLIFE.CHOICECUSTOMERRETURNDATE || '",
                "realReturnDate":"' || S_MKTQT_ENDOFLIFE.REALRETURNDATE || '",
                "buyerDealerName":"' || S_MKTQT_ENDOFLIFE.BUYERDEALERNAME || '",
                "buyerDealerRef":"' || S_MKTQT_ENDOFLIFE.BUYERDEALERREF || '",
                "buyerDealerZipCode":"' || S_MKTQT_ENDOFLIFE.BUYERDEALERZIPCODE || '",
                "buyerDealerCity":"' || S_MKTQT_ENDOFLIFE.BUYERDEALERCITY || '"';
                 
               

                if V_NB_ENDOFLIFE_TRAITE = V_NB_ENDOFLIFE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ENDOFLIFE FIN----------------------              
              

                
                              --------------------- DOMAINREFS  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_DOMAINREFS
         FROM  MKTOV.MKTQT_VEHICULE_DOMAINREFS
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_DOMAINREFS := NULL;
    END;

    IF NVL(V_NB_DOMAINREFS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"domainRefs": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_DOMAINREFS IN C_MKTQT_DOMAINREFS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_DOMAINREFS_TRAITE := V_NB_DOMAINREFS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_id":"' || S_MKTQT_DOMAINREFS.TECH_ID || '",
                "tech_dateExtraction":"' || S_MKTQT_DOMAINREFS.TECH_DATEEXTRACTION || '",
                "countryBranchCode":"' || S_MKTQT_DOMAINREFS.COUNTRYBRANCHCODE || '",
                "vehicleRef":"' || S_MKTQT_DOMAINREFS.VEHICLEREF || '",
                "serialNumber":"' || S_MKTQT_DOMAINREFS.SERIALNUMBER || '",
                "contractRef":"' || S_MKTQT_DOMAINREFS.CONTRACTREF || '",
                "accountStatus":"' || S_MKTQT_DOMAINREFS.ACCOUNTSTATUS || '",
                "srcPartyId":"' || S_MKTQT_DOMAINREFS.SRCPARTYID || '",
                "nationalId":"' || S_MKTQT_DOMAINREFS.NATIONALID || '"';
                 
               

                if V_NB_DOMAINREFS_TRAITE = V_NB_DOMAINREFS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- DOMAINREFS FIN----------------------            
         
         
         
         
               
               

                if V_NB_VEHICLE_TRAITE = V_NB_VEHICLE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       -- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- VEHICLE FIN----------------------






V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_ASSET_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_ASSET.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_ASSET_MILES_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_ASSET_MILES_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
          
END EXPORT_ASSET_MILES_JSON;








END MKTQADSCUS;
