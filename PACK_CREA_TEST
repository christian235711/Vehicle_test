create or replace PACKAGE BODY PACK_CREA_TEST AS

  FUNCTION CREATION_FICHIER_SQL(NOMLOG VARCHAR2, P_DATE_TRAIT DATE, P_PATH VARCHAR2, FICHIER_PARAM VARCHAR2, NOM_CREATEUR VARCHAR2, NOM_SCHEMA VARCHAR2, DEBUT_NOM_INDEX VARCHAR2, DEBUT_NOM_TABLE VARCHAR2, NOM_UNIVERS VARCHAR2) RETURN NUMBER AS
  
  --BEGIN 
  
  --DECLARE
  
  
   liste_tables VARCHAR2(2000) := 
'MKTQT_CONTRACT,
MKTQT_FINANCING,
MKTQT_SECURITIZATION,
MKTQT_ACCOUNT,
MKTQT_CPAYMEANACTIF,
MKTQT_CVEHICULE,
MKTQT_VEHICULE_AMT,
MKTQT_VEHICULE_ENDOFLIFE,
MKTQT_SERVICES,
MKTQT_SCHEDULES,
MKTQT_STAKEHOLDER,
MKTQT_STAKEHOLDER_ADRS,
MKTQT_AMENDMENT,
MKTQT_AMENDMENT_EXTENSION,
MKTQT_SIGNATORY,
MKTQT_AGREEMENT,
MKTQT_AGREEMENT_REQUEST,
MKTQT_AGREEMENT_CONTRACT,
MKTQT_AGREEMENT_FEES,
MKTQT_CUSTOMER_PROFILE,
MKTQT_CUSTOMER_PROFILE_CTT,
MKTQT_ASSET,
MKTQT_ASSET_VEHICULE,
MKTQT_ASSET_VEHICULE_LABELS,
MKTQT_VEHICULE_PRICING,
MKTQT_VEHICULE_BASEPRICE,
MKTQT_VEHICULE_PRICE_DISCOUNT,
MKTQT_VEHICULE_LIFECYCLE,
MKTQT_VEHICULE_DOMAINREFS,
MKTQT_CUSTOMER,
MKTQT_CUS_AGREEMENT,
MKTQT_CUS_PERSONCONTACTS,
MKTQT_CUS_ROLEBANKINGS,
MKTQT_CUS_NATIONALIDENTIFIERS,
MKTQT_CUS_CONTACTMEAN,
MKTQT_CUS_CONTACTMEAN_ADRS,
MKTQT_CUS_CONTACTMEAN_PHONES,
MKTQT_CUS_CONTACTMEAN_EMAILS,
MKTQT_CUS_CONTACTMEAN_BANKINFO,
MKTQT_CUS_CONTACTMEAN_CROSSREF,
MKTQT_CUS_CONTACTMEAN_EXTREFS,
MKTQT_ASSET_VEHICULE_CROSSREF,
MKTQT_VEHICULE_OPTION,
MKTQT_CUS_ACTIVITY,
MKTQT_AGREEMENT_VEH,
MKTQT_AGREEMENT_STK,';
  
    FILE_ID UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    RES     NUMBER := 0;
    V_ERR     NUMBER := 0;
    NOMBRE_FICHIER  NUMBER := 0;
    V_STR VARCHAR2(34) ;
    NB_1 NUMBER := 0;
    V_TEMP  NUMBER := 0;
    V_ITER NUMBER := 0;
    V_LIGNE VARCHAR2(6000) ;
    V_KEYS VARCHAR2(100);
    V_FIRST VARCHAR2(1);
  
    CURSOR CUR (V_STR VARCHAR2 ) IS
    SELECT COLUMN_NAME,
        (CASE WHEN DATA_TYPE = 'DATE' THEN  DATA_TYPE
              WHEN DATA_TYPE = 'NUMBER' THEN DATA_TYPE || '(' || DATA_LENGTH ||  ',0)'
             WHEN DATA_TYPE = 'VARCHAR2' THEN DATA_TYPE || '(' || DATA_LENGTH ||  ' CHAR)'
            ELSE NULL
        END) AS DATA_TYPE,
        LENGTH(COLUMN_NAME) AS LENGTH_DATA,
        MAX(LENGTH(COLUMN_NAME)) OVER () AS MAX_LENGTH,
        nullable as nullable
    FROM user_tab_columns
    WHERE table_name = V_STR ;
  
  
  
  
  BEGIN
  File_Id := Mkt.Mktqaut.F_Open(Nomlog);
  Res := Mkt.Mktqaut.F_Write(File_Id, '','ECRITURE DES FICHIERS');

    liste_tables := REPLACE(REPLACE(liste_tables,CHR(13),''),CHR(10),''); 
  
  
    for elem in 1..46 loop   
        begin
        
            NB_1 := INSTR(liste_tables,',') ;
            V_STR := SUBSTR(liste_tables,0,NB_1-1);
            liste_tables := SUBSTR(liste_tables,NB_1 +1); 
                  
            Res := Mkt.Mktqaut.F_Write(File_Id, 'FICHIER ' || TO_CHAR(elem) , TO_CHAR(V_STR) );
            
            file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path, V_STR || '.sql'); 
            
            
V_LIGNE := '/**
*-- Description : Creation de la table definitive ' || V_STR ||
'
*-- Auteur : ' || NOM_CREATEUR || 
'
*-- Date Creation : ' || TO_char(P_DATE_TRAIT) ||
'
*/
-- -------------------------------------------------------------------------
-- Chargement des parametres ORACLE
-- -------------------------------------------------------------------------

SET SERVEROUTPUT ON
SET TERMOUT ON
SET ECHO ON
SET FEED ON
SET HEAD ON
@@' || FICHIER_PARAM ||
'
-- -------------------------------------------------------------------------
-- LOG
-- -------------------------------------------------------------------------

-- -------------------------------------------------------------------------
-- TABLE
-- -------------------------------------------------------------------------
';
utl_file.put_line(file_id_cvs,V_LIGNE);      
utl_file.fflush(file_id_cvs);          
            
V_LIGNE := 'DROP TABLE ' || NOM_SCHEMA || '.' || V_STR ||  ' CASCADE CONSTRAINTS;' || 
' 

CREATE TABLE ' || NOM_SCHEMA || '.' || V_STR || ' (';
utl_file.put_line(file_id_cvs,V_LIGNE);                
            
            
            BEGIN
            SELECT count(*)
            INTO V_TEMP
            FROM user_tab_columns
            WHERE table_name = V_STR ;
            END;
        
            V_ITER := 0;
            V_KEYS := '(';
            V_FIRST := 'N';
            for cur_elem in cur(V_STR) loop
                begin
                    V_ITER := V_ITER+ 1;
                       
                    IF cur_elem.NULLABLE = 'N' AND V_FIRST = 'Y' THEN
                        V_KEYS := V_KEYS || ',' || cur_elem.COLUMN_NAME;    
                    END IF;    
                       
                    IF cur_elem.NULLABLE = 'N' AND V_FIRST = 'N' THEN
                        V_KEYS := V_KEYS || cur_elem.COLUMN_NAME;
                        V_FIRST :='Y';   
                    END IF;
                    

                       
                       /*            
                    IF cur_elem.NULLABLE = 'N' AND V_ITER = 1  THEN 
                        V_KEYS := V_KEYS || cur_elem.COLUMN_NAME;    
                    END IF;
                    
                    IF cur_elem.NULLABLE = 'N' AND V_ITER > 1  THEN 
                        V_KEYS := V_KEYS || ',' || cur_elem.COLUMN_NAME;    
                    END IF;        
                    
                    */
                                   
                    IF V_ITER = V_TEMP THEN
                        utl_file.put_line(file_id_cvs, cur_elem.COLUMN_NAME || '    ' || LPAD(' ', cur_elem.MAX_LENGTH-cur_elem.LENGTH_DATA, ' ') || '   ' || cur_elem.DATA_TYPE);
                    ELSE
                        utl_file.put_line(file_id_cvs, cur_elem.COLUMN_NAME || '    ' || LPAD(' ', cur_elem.MAX_LENGTH-cur_elem.LENGTH_DATA, ' ') || '   ' || cur_elem.DATA_TYPE ||  ','  );
                    END IF;               
                    
                    utl_file.fflush(file_id_cvs);
                    --Res := Mkt.Mktqaut.F_Write(File_Id, cur_elem.COLUMN_NAME,'');
               
                end;
            end loop;
             
            
            
            IF V_ERR=1 THEN EXIT;
            END IF;
            
        
        
        exception
            when others then 
                commit;
                V_ERR := 1;
                Res := Mkt.Mktqaut.F_Write(File_Id,'','Message Erreur pl/sql :'||Sqlerrm);
                return V_ERR;
        end;
        
        
        V_KEYS := V_KEYS || ')';
        
V_LIGNE := ');



-- -------------------------------------------------------------------------
-- INDEX
-- -------------------------------------------------------------------------
----------------------------------------------------------------------------

CREATE UNIQUE INDEX ' || NOM_SCHEMA || '.' || REPLACE(V_STR, DEBUT_NOM_TABLE, DEBUT_NOM_INDEX) || ' ON ' || NOM_SCHEMA || '.' ||  V_STR ||
'
'
|| V_KEYS || 
'   
TABLESPACE &&V_TBS_I;


----------------------------------------------------------------------------
-- CONSTRAINT PK
----------------------------------------------------------------------------

ALTER TABLE ' ||  NOM_SCHEMA || '.' || V_STR || ' ADD (
  CONSTRAINT ' || REPLACE(V_STR, DEBUT_NOM_TABLE, DEBUT_NOM_INDEX) || ' PRIMARY KEY
'
|| V_KEYS || 
'
    USING INDEX 
    TABLESPACE &&V_TBS_I);


---------------------------------------------------------------------------- 
-- SYNONYM
---------------------------------------------------------------------------- 

----------------------------------------------------------------------------
-- GRANT
----------------------------------------------------------------------------
GRANT SELECT ON ' || NOM_SCHEMA || '.' || V_STR || ' TO ' ||  NOM_UNIVERS || ';




----------------------------------------------------------------------------
-- COMMENTS
----------------------------------------------------------------------------


SHOW ERRORS
SPOOL OFF
exit;
';        
 utl_file.put_line(file_id_cvs, V_LIGNE)   ;    
        
        
    UTL_FILE.FCLOSE(file_id_cvs);
    end loop;
    commit;
    
    
    UTL_FILE.FCLOSE(FILE_ID);
    
    return V_ERR;
    end;




END PACK_CREA_TEST;
