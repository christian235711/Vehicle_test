create or replace package body mktqads as



FUNCTION EXPORT_CONTRACT_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;
    V_NB_FINANCING  NUMBER(10) := 0;
    V_NB_FINANCING_TRAITE  NUMBER(10) := 0;
    V_NB_SECURITIZATION NUMBER(10) := 0;
    V_NB_SECURITIZATION_TRAITE NUMBER(10) := 0;
    V_NB_ACCOUNT NUMBER(10) := 0;
    V_NB_ACCOUNT_TRAITE NUMBER(10) := 0;
    V_NB_PAYMEANACTIF NUMBER(10) := 0;
    V_NB_PAYMEANACTIF_TRAITE NUMBER(10) := 0;
    V_NB_VEHICULE NUMBER(10) := 0;
    V_NB_VEHICULE_TRAITE NUMBER(10) := 0;
    
    V_NB_AMOUNT NUMBER(10) := 0;
    V_NB_AMOUNT_TRAITE NUMBER(10) := 0;
    V_NB_ENDOFLIFE NUMBER(10) := 0;
    V_NB_ENDOFLIFE_TRAITE NUMBER(10) := 0;
    
    V_NB_SERVICES NUMBER(10) := 0;
    V_NB_SERVICES_TRAITE NUMBER(10) := 0;
    
    V_NB_SCHEDULES NUMBER(10) := 0;
    V_NB_SCHEDULES_TRAITE NUMBER(10) := 0;  
    
    V_NB_STAKEHOLDERS NUMBER(10) := 0;
    V_NB_STAKEHOLDERS_TRAITE NUMBER(10) := 0;
    
    V_NB_STAKEHOLDERS_ADRS NUMBER(10) := 0;
    V_NB_STAKEHOLDERS_ADRS_TRAITE NUMBER(10) := 0;
    
    V_NB_AMENDMENT NUMBER(10) := 0;
    V_NB_AMENDMENT_TRAITE NUMBER(10) := 0;
        
    V_NB_AMENDMENT_EXTEN NUMBER(10) := 0;
    V_NB_AMENDMENT_EXTEN_TRAITE NUMBER(10) := 0;
     
    V_NB_SIGNATORY NUMBER(10) := 0;
    V_NB_SIGNATORY_TRAITE NUMBER(10) := 0;  
   
   
   
    
CURSOR C_MKTQT_CONTRACT IS
SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
CONTRACTREF AS CONTRACTREF,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN,
CONTRACTSTATUS AS CONTRACTSTATUS,
ACCOUNTSTATUS AS ACCOUNTSTATUS,
TO_CHAR(ACCOUNTSTATUSCHANGEDATE,'YYYY-MM-DD') AS ACCOUNTSTATUSCHANGEDATE,
TO_CHAR(ACTIVATIONDATE,'YYYY-MM-DD') AS ACTIVATIONDATE,
DURATIONCONTRACTINIT AS DURATIONCONTRACTINIT,
DURATIONCONTRACT AS DURATIONCONTRACT,
TO_CHAR(DATEENDCONTRACT,'YYYY-MM-DD') AS DATEENDCONTRACT,
TO_CHAR(REALDATEENDCONTRACT,'YYYY-MM-DD') AS REALDATEENDCONTRACT,
---ENDCONTRACTCODE AS ENDCONTRACTCODE,
---PRODUCTCATEGORYLABEL AS PRODUCTCATEGORYLABEL,
PRODUCTCATEGORYCODE AS PRODUCTCATEGORYCODE,
SELLERAGENCY AS SELLERAGENCY,
SALESMANFULLNAME AS SALESMANFULLNAME,
SALESMANCODE AS SALESMANCODE,
PRODUCTCODE AS PRODUCTCODE,
PRODUCTSUBCODE AS PRODUCTSUBCODE,
COMMERCIALPRODUCTCODE AS COMMERCIALPRODUCTCODE,
---FINANCIALPRODUCTLABEL AS FINANCIALPRODUCTLABEL,
---FINANCIALPRODUCTCODE AS FINANCIALPRODUCTCODE,
---OFFERREF AS OFFERREF,
---OFFERVERSION AS OFFERVERSION,
---STATECODE AS STATECODE,
TO_CHAR(DATEENDCONTRACTWHENRETURNED,'YYYY-MM-DD') AS DATEENDCONTRACTWHENRETURNED,
----STATUSCODEOFCASEFINALIZED AS STATUSCODEOFCASEFINALIZED,
----EARLYSETTLEMENTPOSSIBLEFLAG AS EARLYSETTLEMENTPOSSIBLEFLAG,
ISBUYBACKMAKE AS ISBUYBACKMAKE,
BUYBACKTYPE AS BUYBACKTYPE,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO
FROM MKTOV.MKTQT_CONTRACT
;


CURSOR C_FINANCING (P_TECH_ID VARCHAR2) IS 
SELECT DISTINCT
----TECH_ID AS TECH_ID,
CONTRACTREF AS CONTRACTREF,
TOTALFINANCEDAMOUNTET AS TOTALFINANCEDAMOUNTET,
INITIALTOTALFINANCEDAMOUNTET AS INITIALTOTALFINANCEDAMOUNTET,
FIXEDASSETAMOUNTET AS FIXEDASSETAMOUNTET,
RESIDUALVALUEAMOUNTET AS RESIDUALVALUEAMOUNTET,
RESIDUALVALUEDEALERAMOUNTET AS RESIDUALVALUEDEALERAMOUNTET,
TO_CHAR(DATESTARTCONTRACT, 'YYYY-MM-DD') AS DATESTARTCONTRACT,
AMOUNTDEPOSIT AS AMOUNTDEPOSIT,
NUMBERUNPAID AS NUMBERUNPAID,
AMOUNTREMAININGCAPITAL AS AMOUNTREMAININGCAPITAL,
TO_CHAR(STARTDATEOFDUEDATE, 'YYYY-MM-DD') AS STARTDATEOFDUEDATE,
TO_CHAR(ENDDATEOFDUEDATE, 'YYYY-MM-DD') AS ENDDATEOFDUEDATE,
NOMINALRATE AS NOMINALRATE,
RATETYPE AS RATETYPE,
TAEGRATE AS TAEGRATE,
(CASE WHEN SUBSTR(TO_CHAR(COSTADDITIONALMILEAGE),1,1) = ',' THEN  REPLACE(TO_CHAR(COSTADDITIONALMILEAGE),',','0,') ELSE TO_CHAR(COSTADDITIONALMILEAGE) END)  AS COSTADDITIONALMILEAGE,
---Ltrim(rtrim(to_char(COSTADDITIONALMILEAGE, '9999999999990D999'),0),' ') AS COSTADDITIONALMILEAGE,
FIN_AMT_INIT_INTERST_OUTSERV AS FIN_AMT_INIT_INTERST_OUTSERV,
DATE_SITU AS DATE_SITU,
CODE_PAYS AS CODE_PAYS

FROM MKTOV.MKTQT_FINANCING
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_SECURITIZATION (P_TECH_ID VARCHAR2) IS 
SELECT DISTINCT
CONTRACTREF  AS CONTRACTREF,
DATESTART AS DATESTART,
ID AS ID,
ISSECURIZED AS ISSECURIZED

FROM  MKTOV.MKTQT_SECURITIZATION 
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_ACCOUNT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
CONTRACTREF	AS CONTRACTREF	,
BALLOONVALUEAMOUNT	AS BALLOONVALUEAMOUNT	,
TO_CHAR(NEXTDUEDATE,'YYYY-MM-DD')	AS NEXTDUEDATE	,
NEXTRENTAMOUNTET	AS NEXTRENTAMOUNTET	,
NBPAYMENTNOTBILLED	AS NBPAYMENTNOTBILLED	,
LASTPAIDAMOUNTET	AS LASTPAIDAMOUNTET	,
AMOUNTFINANCIALINITRENTET	AS AMOUNTFINANCIALINITRENTET	,
AMOUNTFINANCIALRENTET	AS AMOUNTFINANCIALRENTET	,
AMOUNTFINANCIALRENTWITHSERVIT	AS AMOUNTFINANCIALRENTWITHSERVIT	,
DAYOFPAYMENT	AS DAYOFPAYMENT	,
PERIODICITY	AS PERIODICITY	,
(CASE WHEN SUBSTR(TO_CHAR(CHARGEAMOUNTET),1,1) = ',' THEN REPLACE(TO_CHAR(CHARGEAMOUNTET),',','0,') ELSE TO_CHAR(CHARGEAMOUNTET)  END)	AS CHARGEAMOUNTET	

FROM MKTOV.MKTQT_ACCOUNT 
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_PAYMEANACTIF (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TECH_ID  AS TECH_ID ,
CONTRACTREF  AS CONTRACTREF ,
PAYMENTTYPECODE  AS PAYMENTTYPECODE ,
BANKAGENCY  AS BANKAGENCY ,
BANKACCOUNTNUMBER  AS BANKACCOUNTNUMBER ,
BANKACCOUNTKEY  AS BANKACCOUNTKEY ,
BANKNUMBER  AS BANKNUMBER ,
BANKNAME  AS BANKNAME ,
SEPAIBAN  AS SEPAIBAN 

FROM MKTOV.MKTQT_CPAYMEANACTIF 
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_VEHICULE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD')	AS TECH_DATEEXTRACTION	,
CONTRACTREF	AS CONTRACTREF	,
SERIALNUMBER	AS SERIALNUMBER	,
DELIVERYDATE	AS DELIVERYDATE	,
TO_CHAR(EXPECTEDRETURNDATE,'YYYY-MM-DD')	AS EXPECTEDRETURNDATE	,
STATECODE	AS STATECODE	,
USAGECODE	AS USAGECODE	,
CONTACTUALMILEAGE	AS CONTACTUALMILEAGE	

FROM MKTOV.MKTQT_CVEHICULE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_VEHICULE_AMT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
SELLERPRICEIT AS SELLERPRICEIT,
(CASE WHEN SUBSTR(TO_CHAR(EXCESSMILEAGERATE),1,1)=',' THEN  REPLACE(TO_CHAR(EXCESSMILEAGERATE),',','0,') ELSE  TO_CHAR(EXCESSMILEAGERATE) END) AS EXCESSMILEAGERATE,
(CASE WHEN SUBSTR(TO_CHAR(UNDERMILEAGERATE),1,1)=',' THEN  REPLACE(TO_CHAR(UNDERMILEAGERATE),',','0,') ELSE  TO_CHAR(UNDERMILEAGERATE) END) AS UNDERMILEAGERATE

FROM MKTOV.MKTQT_VEHICULE_AMT 
WHERE TECH_ID = P_TECH_ID
;



CURSOR C_VEHICULE_ENDOFLIFE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
CONTACTENDOFLIFEDATE	AS CONTACTENDOFLIFEDATE	,
(CASE WHEN EARLYTERMINATIONFLAG = 'Y' THEN 'true' WHEN EARLYTERMINATIONFLAG = 'N' THEN 'false' ELSE NULL END) AS EARLYTERMINATIONFLAG	,
DEALERRETURNDATE	AS DEALERRETURNDATE	,
CHOICECUSTOMERRETURNDATE	AS CHOICECUSTOMERRETURNDATE	,
REALRETURNDATE	AS REALRETURNDATE	,
CONTACTEMAILCUSTOMERFLAG	AS CONTACTEMAILCUSTOMERFLAG	,
CONTACTEMAILCUSTOMERDATE	AS CONTACTEMAILCUSTOMERDATE	,
CONTACTPHONECUSTOMERFLAG	AS CONTACTPHONECUSTOMERFLAG	,
CONTACTPHONECUSTOMERDATE	AS CONTACTPHONECUSTOMERDATE	,
RESALEDEALERFLAG	AS RESALEDEALERFLAG	,
RESALECUSTOMERFLAG	AS RESALECUSTOMERFLAG	,
MILEAGEENDOFLIFE	AS MILEAGEENDOFLIFE	,
REFURBISHMENT	AS REFURBISHMENT	,
BUYERDEALERNAME	AS BUYERDEALERNAME	,
BUYERDEALERCITY	AS BUYERDEALERCITY	

FROM  MKTOV.MKTQT_VEHICULE_ENDOFLIFE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_SERVICES (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
CONTRACTREF	AS CONTRACTREF	,
SERVICEREF	AS SERVICEREF	,
EXTERNALSERVICEID	AS EXTERNALSERVICEID	,
SERVICECODETYPE	AS SERVICECODETYPE	,
LABELSERVICE	AS LABELSERVICE	,
TO_CHAR(DATESTARTSERVICE, 'YYYY-MM-DD')	AS DATESTARTSERVICE	,
TO_CHAR(DATEENDSERVICE, 'YYYY-MM-DD')	AS DATEENDSERVICE	,
DURATIONSERVICE	AS DURATIONSERVICE	,
DATERESILIATION	AS DATERESILIATION	,
NEXTPAYMENTAMOUNTET	AS NEXTPAYMENTAMOUNTET	,
TOTALTAMOUNTET	AS TOTALTAMOUNTET	,
REASONOFENDSERVICE	AS REASONOFENDSERVICE	,
FLAGCEM	AS FLAGCEM	,
TOTALAMOUNTSERVICE	AS TOTALAMOUNTSERVICE	

FROM MKTOV.MKTQT_SERVICES
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_SCHEDULES (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
CONTRACTREF	AS CONTRACTREF	,
NUMBEROFMONTHLYPAYMENT	AS NUMBEROFMONTHLYPAYMENT	,
TO_CHAR(INVOICEDATE, 'YYYY-MM-DD')	AS INVOICEDATE	,
TO_CHAR(DATESTARTOFPERIODPAYMENT, 'YYYY-MM-DD')  AS DATESTARTOFPERIODPAYMENT	,
TO_CHAR(DATEENDOFPERIODPAYMENT, 'YYYY-MM-DD')	AS DATEENDOFPERIODPAYMENT	,
DURATION	AS DURATION	,
INTERESTAMOUNT	AS INTERESTAMOUNT	,
(CASE WHEN UNPAIDFLAG = 'Y' THEN 'true' WHEN  UNPAIDFLAG = 'N' THEN 'false' ELSE NULL END)	AS UNPAIDFLAG	

FROM MKTOV.MKTQT_SCHEDULES
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_STAKEHOLDERS (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
CONTRACTREF	AS CONTRACTREF	,
STAKEHOLDERROLE	AS STAKEHOLDERROLE	,
SRCPARTYID	AS SRCPARTYID	,
SRCJVCODE	AS SRCJVCODE	,
SRCAPPCODE1	AS SRCAPPCODE1	,
SRCDEALERSHIPID	AS SRCDEALERSHIPID	,
SRCAPPCODE2	AS SRCAPPCODE2	

FROM MKTOV.MKTQT_STAKEHOLDERS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_STAKEHOLDERS_ADRS (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
NUMBERANDSTREET AS NUMBERANDSTREET	,
ZIPCODE	AS ZIPCODE	,
CITY	AS CITY	,
DEPARTMENT	AS DEPARTMENT	

FROM MKTOV.MKTQT_STAKEHOLDER_ADRS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_AMENDMENT (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD')	AS TECH_DATEEXTRACTION	,
AMENDEMENTREF	AS AMENDEMENTREF	,
TYPECODE	AS TYPECODE	,
TO_CHAR(APPLICATIONDATE,'YYYY-MM-DD')	AS APPLICATIONDATE	

FROM MKTOV.MKTQT_AMENDMENT
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_AMENDMENT_EXTEN (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
TYPECODE	AS TYPECODE	,
(CASE WHEN AUTOMATICFLAG = 'Y' THEN 'true' WHEN AUTOMATICFLAG = 'N' THEN 'false' ELSE AUTOMATICFLAG END) AS AUTOMATICFLAG	,
PREVIOUSDURATION	AS PREVIOUSDURATION	,
NEWDURATION	AS NEWDURATION	,
PREVIOUSMILEAGE	AS PREVIOUSMILEAGE	,
NEWMILEAGE	AS NEWMILEAGE	,
PREVIOUSRVAMOUNT	AS PREVIOUSRVAMOUNT	,
NEWRVAMOUNT	AS NEWRVAMOUNT	,

(CASE WHEN SUBSTR(TO_CHAR(PREVIOUSRATE),1,1)=',' THEN  REPLACE(TO_CHAR(PREVIOUSRATE),',','0,') ELSE  TO_CHAR(PREVIOUSRATE) END) AS PREVIOUSRATE,
(CASE WHEN SUBSTR(TO_CHAR(NEWRATE),1,1)=',' THEN  REPLACE(TO_CHAR(NEWRATE),',','0,') ELSE  TO_CHAR(NEWRATE) END) AS NEWRATE,
---PREVIOUSRATE	AS PREVIOUSRATE	,
---NEWRATE	AS NEWRATE	,

PREVIOUSRENT	AS PREVIOUSRENT	,
NEWRENT	AS NEWRENT	,
PREVIOUSSERVICEMOUNT	AS PREVIOUSSERVICEMOUNT	,
NEWSERVICEAMOUNT	AS NEWSERVICEAMOUNT	,
NEWAMOUNTFEES	AS NEWAMOUNTFEES	,
NEWTOTALOUSTANDING	AS NEWTOTALOUSTANDING	

FROM MKTOV.MKTQT_AMENDMENT_EXTENSION
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_SIGNATORY (P_TECH_ID VARCHAR2)   IS
SELECT DISTINCT
NAME AS NAME,
EMAIL AS EMAIL
FROM MKTOV.MKTQT_SIGNATORY
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_CONTRACT_JSON', ' ## EXPORT CONTRACT JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CONTRACT;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CONTRACT IN C_MKTQT_CONTRACT LOOP
       
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
        V_NB_FINANCING_TRAITE   := 0;
        V_NB_SECURITIZATION_TRAITE  := 0;
        V_NB_ACCOUNT_TRAITE  := 0; 
        V_NB_PAYMEANACTIF_TRAITE  := 0;
        V_NB_VEHICULE_TRAITE  := 0;
        --V_NB_AMOUNT_TRAITE  := 0;
        --V_NB_ENDOFLIFE_TRAITE  := 0;
        V_NB_SERVICES_TRAITE  := 0;
        V_NB_SCHEDULES_TRAITE  := 0;  
        V_NB_STAKEHOLDERS_TRAITE  := 0;  
        --V_NB_STAKEHOLDERS_ADRS_TRAITE  := 0;    
        V_NB_AMENDMENT_TRAITE  := 0;  
        --V_NB_AMENDMENT_EXTEN_TRAITE  := 0;
        --V_NB_SIGNATORY_TRAITE  := 0;  
                
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CONTRACT.TECH_ID  || '",
"tech_dateExtraction":"' || S_MKTQT_CONTRACT.TECH_DATEEXTRACTION  || '",
"countryBranchCode":"' || S_MKTQT_CONTRACT.COUNTRYBRANCHCODE  || '",
"contractRef":"' || S_MKTQT_CONTRACT.CONTRACTREF  || '",
"backOfficeOrigin":"' || S_MKTQT_CONTRACT.BACKOFFICEORIGIN  || '",
"contractStatus":"' || S_MKTQT_CONTRACT.CONTRACTSTATUS  || '",
"accountStatus":"' || S_MKTQT_CONTRACT.ACCOUNTSTATUS  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CONTRACT.ACCOUNTSTATUSCHANGEDATE IS NOT NULL THEN
V_LIGNE := '"accountStatusChangeDate":"' || S_MKTQT_CONTRACT.ACCOUNTSTATUSCHANGEDATE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"activationDate":"' || S_MKTQT_CONTRACT.ACTIVATIONDATE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF INSTR(S_MKTQT_CONTRACT.DURATIONCONTRACTINIT,'.') = 0  THEN
V_LIGNE := '"durationContractInit":' || REPLACE(S_MKTQT_CONTRACT.DURATIONCONTRACTINIT,',','.')  || ',';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


V_LIGNE := '"durationContract":' || REPLACE(S_MKTQT_CONTRACT.DURATIONCONTRACT,',','.')  || ',
"dateEndContract":"' || S_MKTQT_CONTRACT.DATEENDCONTRACT  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CONTRACT.REALDATEENDCONTRACT IS NOT NULL THEN
V_LIGNE := '"realDateEndContract":"' || S_MKTQT_CONTRACT.REALDATEENDCONTRACT  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

/*IF S_MKTQT_CONTRACT.ENDCONTRACTCODE IS NOT NULL THEN
V_LIGNE := '"ENDCONTRACTCODE":"' || S_MKTQT_CONTRACT.ENDCONTRACTCODE  || '",';
'"PRODUCTCATEGORYLABEL":"' || S_MKTQT_CONTRACT.PRODUCTCATEGORYLABEL  || '",
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;*/

V_LIGNE := '"productCategoryCode":"' || S_MKTQT_CONTRACT.PRODUCTCATEGORYCODE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CONTRACT.SELLERAGENCY IS NOT NULL  THEN
V_LIGNE := '"sellerAgency":"' || S_MKTQT_CONTRACT.SELLERAGENCY  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CONTRACT.SALESMANFULLNAME IS NOT NULL THEN
V_LIGNE := '"salesmanFullName":"' || REPLACE(S_MKTQT_CONTRACT.SALESMANFULLNAME,'"','')  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CONTRACT.SALESMANCODE IS NOT NULL THEN
V_LIGNE := '"salesmanCode":"' || S_MKTQT_CONTRACT.SALESMANCODE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


V_LIGNE := '"productCode":"' || S_MKTQT_CONTRACT.PRODUCTCODE  || '",
"productSubCode":"' || S_MKTQT_CONTRACT.PRODUCTSUBCODE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CONTRACT.COMMERCIALPRODUCTCODE IS NOT NULL THEN
V_LIGNE := '"commercialProductLabel":"' || S_MKTQT_CONTRACT.COMMERCIALPRODUCTCODE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

/*V_LIGNE := '"FINANCIALPRODUCTLABEL":"' || S_MKTQT_CONTRACT.FINANCIALPRODUCTLABEL  || '",
"FINANCIALPRODUCTCODE":"' || S_MKTQT_CONTRACT.FINANCIALPRODUCTCODE  || '",
"OFFERREF":"' || S_MKTQT_CONTRACT.OFFERREF  || '",
"OFFERVERSION":"' || S_MKTQT_CONTRACT.OFFERVERSION  || '",
"STATECODE":"' || S_MKTQT_CONTRACT.STATECODE  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);*/

IF S_MKTQT_CONTRACT.DATEENDCONTRACTWHENRETURNED IS NOT NULL THEN
V_LIGNE := '"dateEndContractWhenReturned":"' || S_MKTQT_CONTRACT.DATEENDCONTRACTWHENRETURNED  || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

/*
IF S_MKTQT_CONTRACT.STATUSCODEOFCASEFINALIZED IS NOT NULL THEN
V_LIGNE := '"STATUSCODEOFCASEFINALIZED":"' || S_MKTQT_CONTRACT.STATUSCODEOFCASEFINALIZED  || '",';
"EARLYSETTLEMENTPOSSIBLEFLAG":' || S_MKTQT_CONTRACT.EARLYSETTLEMENTPOSSIBLEFLAG  || ',
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;*/


V_LIGNE := '"isBuyBackMake":' || S_MKTQT_CONTRACT.ISBUYBACKMAKE  || ',
"buyBackType":"' || S_MKTQT_CONTRACT.BUYBACKTYPE  || '",
"isLeasco":' || S_MKTQT_CONTRACT.ISLEASCO  || ',
"isFinco":' || S_MKTQT_CONTRACT.ISFINCO  || ',';    ---- 

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    -----------------------------------FINANCING-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO V_NB_FINANCING
         FROM MKTOV.MKTQT_FINANCING
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_FINANCING := NULL;
    END;

     FOR S_FINANCING IN C_FINANCING (S_MKTQT_CONTRACT.TECH_ID) LOOP
            V_NB_FINANCING_TRAITE := V_NB_FINANCING_TRAITE+1;   ---- A REVOIR 
            
            
            V_LIGNE := '"financing":{
                "contractRef":"' || S_FINANCING.CONTRACTREF || '",
                "totalFinancedAmountET":' || REPLACE(S_FINANCING.TOTALFINANCEDAMOUNTET,',','.') || ',
                "initialTotalFinancedAmountET":' || REPLACE(S_FINANCING.INITIALTOTALFINANCEDAMOUNTET,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
             
                IF S_FINANCING.FIXEDASSETAMOUNTET IS NOT NULL THEN     
V_LIGNE := '                "fixedAssetAmountET":' || REPLACE(S_FINANCING.FIXEDASSETAMOUNTET,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
                IF S_FINANCING.RESIDUALVALUEAMOUNTET IS NOT NULL THEN
V_LIGNE := '                "residualValueAmountET":' || REPLACE(S_FINANCING.RESIDUALVALUEAMOUNTET,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
               IF S_FINANCING.RESIDUALVALUEDEALERAMOUNTET IS NOT NULL THEN
V_LIGNE := '                "residualValueDealerAmountET":' || REPLACE(S_FINANCING.RESIDUALVALUEDEALERAMOUNTET,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
V_LIGNE := '                "dateStartContract":"' || S_FINANCING.DATESTARTCONTRACT || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
               
                
                IF S_FINANCING.AMOUNTDEPOSIT IS NOT NULL THEN 
V_LIGNE := '                "amountDeposit":' || REPLACE(S_FINANCING.AMOUNTDEPOSIT,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;              
                
                
V_LIGNE := '                "numberUnpaid":' || REPLACE(S_FINANCING.NUMBERUNPAID,',','.') || ',
                "amountRemainingCapital":' || REPLACE(S_FINANCING.AMOUNTREMAININGCAPITAL,',','.') || ',
                "startDateOfDueDate":"' || S_FINANCING.STARTDATEOFDUEDATE || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                IF S_FINANCING.ENDDATEOFDUEDATE IS NOT NULL THEN
V_LIGNE := '                "endDateOfDueDate":"' || S_FINANCING.ENDDATEOFDUEDATE || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;               
                
                IF S_FINANCING.NOMINALRATE IS NOT NULL THEN
V_LIGNE := '                "nominalRate":' || REPLACE(S_FINANCING.NOMINALRATE,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;

                IF S_FINANCING.RATETYPE IS NOT NULL THEN
V_LIGNE := '                "rateType":' || REPLACE(S_FINANCING.RATETYPE,',','.') || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);     
                END IF;
                
V_LIGNE := '                "taegRate":' || REPLACE(S_FINANCING.TAEGRATE,',','.') || ',
                "costAdditionalMileage":' || REPLACE(S_FINANCING.COSTADDITIONALMILEAGE,',','.') || ',
                "financedAmountInitWithInterestWithoutService":' || REPLACE(S_FINANCING.FIN_AMT_INIT_INTERST_OUTSERV,',','.') || '';


                if V_NB_FINANCING_TRAITE = V_NB_FINANCING THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
         
       END LOOP;
    V_LIGNE := '';  -------- null

    -----------------------------------SECURITIZATION-----------------------------
  
    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SECURITIZATION
         FROM  MKTOV.MKTQT_SECURITIZATION 
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SECURITIZATION := NULL;
    END;

    IF NVL(V_NB_SECURITIZATION, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee 
    
       V_LIGNE := '"securitization": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       
       FOR S_SECURITIZATION IN C_SECURITIZATION (S_MKTQT_CONTRACT.TECH_ID) LOOP
            V_NB_SECURITIZATION_TRAITE := V_NB_SECURITIZATION_TRAITE+1;  
            
            V_LIGNE := '        {
                "contractRef":"' || S_SECURITIZATION.CONTRACTREF || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                
                IF S_SECURITIZATION.ISSECURIZED IS NOT NULL THEN
V_LIGNE := '                ,"isSecurized":' || S_SECURITIZATION.ISSECURIZED || '';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
                IF S_SECURITIZATION.DATESTART IS NOT NULL THEN
V_LIGNE := '                ,"dateStart":"' || S_SECURITIZATION.DATESTART || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
                IF S_SECURITIZATION.ID IS NOT NULL THEN              
V_LIGNE := '                ,"id":"' || S_SECURITIZATION.ID || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;



                if V_NB_SECURITIZATION_TRAITE = V_NB_SECURITIZATION THEN V_LIGNE := '}';
                else V_LIGNE := '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            

       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
 -----------------------------------ACCOUNT -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ACCOUNT 
         FROM  MKTOV.MKTQT_ACCOUNT 
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ACCOUNT  := NULL;
    END;

    IF NVL(V_NB_ACCOUNT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_ACCOUNT IN C_ACCOUNT (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_ACCOUNT_TRAITE := V_NB_ACCOUNT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"account":{
                "contractRef":"' || S_ACCOUNT.CONTRACTREF	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
            IF S_ACCOUNT.BALLOONVALUEAMOUNT IS NOT NULL THEN   
V_LIGNE :='                 "balloonValueAmount":' || REPLACE(S_ACCOUNT.BALLOONVALUEAMOUNT,',','.')	 || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;
                
           IF S_ACCOUNT.NEXTDUEDATE IS NOT NULL THEN     
V_LIGNE :='                 "nextDueDate":"' || S_ACCOUNT.NEXTDUEDATE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;



V_LIGNE :='                "nextRentAmountET":' || REPLACE(S_ACCOUNT.NEXTRENTAMOUNTET,',','.')	 || ',
                "nbPaymentNotBilled":' || REPLACE(S_ACCOUNT.NBPAYMENTNOTBILLED,',','.')	 || ',
                "lastPaidAmountET":' || REPLACE(S_ACCOUNT.LASTPAIDAMOUNTET,',','.')	 || ',
                "amountFinancialInitRentET":' || REPLACE(S_ACCOUNT.AMOUNTFINANCIALINITRENTET,',','.')	 || ',
                "amountFinancialRentET":' || REPLACE(S_ACCOUNT.AMOUNTFINANCIALRENTET,',','.')	 || ',
                "amountFinancialRentWithServIT":' || REPLACE(S_ACCOUNT.AMOUNTFINANCIALRENTWITHSERVIT,',','.')	 || ',
                "dayOfPayment":' || REPLACE(S_ACCOUNT.DAYOFPAYMENT,',','.')	 || ',
                "periodicity":"' || S_ACCOUNT.PERIODICITY	 || '",
                "chargeAmountET":' || REPLACE(S_ACCOUNT.CHARGEAMOUNTET,',','.')	 || '';

                if V_NB_ACCOUNT_TRAITE = V_NB_ACCOUNT THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

 -----------------------------------PAYMEANACTIF -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PAYMEANACTIF 
         FROM  MKTOV.MKTQT_CPAYMEANACTIF
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PAYMEANACTIF  := NULL;
    END;

    IF NVL(V_NB_PAYMEANACTIF, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_PAYMEANACTIF IN C_PAYMEANACTIF (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_PAYMEANACTIF_TRAITE := V_NB_PAYMEANACTIF_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"payMeanActif":{
                "contractRef":"' || S_PAYMEANACTIF.CONTRACTREF  || '",
                "paymentTypeCode":"' || S_PAYMEANACTIF.PAYMENTTYPECODE  || '",
                "bankAgency":"' || S_PAYMEANACTIF.BANKAGENCY  || '",
                "bankAccountNumber":"' || S_PAYMEANACTIF.BANKACCOUNTNUMBER  || '",
                "bankAccountKey":"' || S_PAYMEANACTIF.BANKACCOUNTKEY  || '",
                "bankNumber":"' || S_PAYMEANACTIF.BANKNUMBER  || '",
                "bankName":"' || S_PAYMEANACTIF.BANKNAME  || '",
                "sepaIban":"' || S_PAYMEANACTIF.SEPAIBAN  || '"';


                if V_NB_PAYMEANACTIF_TRAITE = V_NB_PAYMEANACTIF THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

 -----------------------------------VEHICULE -----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_VEHICULE 
         FROM  MKTOV.MKTQT_CVEHICULE
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_VEHICULE  := NULL;
    END;

    IF NVL(V_NB_VEHICULE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"vehicule": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_VEHICULE IN C_VEHICULE (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_VEHICULE_TRAITE := V_NB_VEHICULE_TRAITE+1;    
                V_NB_AMOUNT_TRAITE  := 0;
                V_NB_ENDOFLIFE_TRAITE  := 0;
            
            V_LIGNE := '"vehicule ":{
                "tech_dateExtraction":"' || S_VEHICULE.TECH_DATEEXTRACTION	 || '",
                "contractRef":"' || S_VEHICULE.CONTRACTREF	 || '",
                "serialNumber":"' || S_VEHICULE.SERIALNUMBER	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
            IF S_VEHICULE.DELIVERYDATE IS NOT NULL THEN    
V_LIGNE := '                "deliveryDate":"' || S_VEHICULE.DELIVERYDATE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;    
            
                
V_LIGNE := '                "expectedReturnDate":"' || S_VEHICULE.EXPECTEDRETURNDATE	 || '",
                "stateCode":"' || S_VEHICULE.STATECODE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                IF S_VEHICULE.USAGECODE IS NOT NULL THEN
V_LIGNE := '                "usageCode":"' || S_VEHICULE.USAGECODE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
V_LIGNE := '                "contactualMileage":' || REPLACE(S_VEHICULE.CONTACTUALMILEAGE,',','.')	 || '';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);



 -----------------------------------VEHICULE AMOUNT DEBUT-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_AMOUNT 
         FROM  MKTOV.MKTQT_VEHICULE_AMT
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_AMOUNT  := NULL;
    END;

    IF NVL(V_NB_AMOUNT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_VEHICULE_AMT IN C_VEHICULE_AMT (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_AMOUNT_TRAITE := V_NB_AMOUNT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            "amount":{';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            V_LIGNE := '';
            
            IF S_VEHICULE_AMT.SELLERPRICEIT IS NOT NULL THEN
V_LIGNE :=  '"sellerPriceIT":' || REPLACE(S_VEHICULE_AMT.SELLERPRICEIT,',','.')  || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;  
                       
V_LIGNE := '"excessMileageRate":' || REPLACE(S_VEHICULE_AMT.EXCESSMILEAGERATE,',','.')  || '';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            IF S_VEHICULE_AMT.UNDERMILEAGERATE IS NOT NULL THEN
V_LIGNE := ',"underMileageRate":' || REPLACE(S_VEHICULE_AMT.UNDERMILEAGERATE,',','.')  || '';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;

                if V_NB_AMOUNT_TRAITE = V_NB_AMOUNT THEN V_LIGNE :=   '}';
                else V_LIGNE := '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

-----------------------------------VEHICULE AMOUNT FIN-----------------------------

-----------------------------------VEHICULE ENDOFLIFE DEBUT-----------------------------


    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ENDOFLIFE 
         FROM  MKTOV.MKTQT_VEHICULE_ENDOFLIFE 
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ENDOFLIFE  := NULL;
    END;

    IF NVL(V_NB_ENDOFLIFE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_VEHICULE_ENDOFLIFE IN C_VEHICULE_ENDOFLIFE (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_ENDOFLIFE_TRAITE := V_NB_ENDOFLIFE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            "endOfLife":{';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            V_LIGNE :='';
            
            IF S_VEHICULE_ENDOFLIFE.CONTACTENDOFLIFEDATE IS NOT NULL THEN
V_LIGNE := '                        "contactEndOfLifeDate":"' || S_VEHICULE_ENDOFLIFE.CONTACTENDOFLIFEDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;           
                        
 
                IF V_LIGNE != '' THEN res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, ','); END IF;
V_LIGNE := '                        "earlyTerminationFlag":' || S_VEHICULE_ENDOFLIFE.EARLYTERMINATIONFLAG || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
 


            IF S_VEHICULE_ENDOFLIFE.DEALERRETURNDATE IS NOT NULL THEN 
V_LIGNE := '                        ,"dealerReturnDate":"' || S_VEHICULE_ENDOFLIFE.DEALERRETURNDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.CHOICECUSTOMERRETURNDATE IS NOT NULL THEN 
V_LIGNE :=  '                        ,"choiceCustomerReturnDate":"' || S_VEHICULE_ENDOFLIFE.CHOICECUSTOMERRETURNDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.REALRETURNDATE IS NOT NULL THEN 
V_LIGNE := '                        ,"realReturnDate":"' || S_VEHICULE_ENDOFLIFE.REALRETURNDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.CONTACTEMAILCUSTOMERFLAG IS NOT NULL THEN       
V_LIGNE := '                        ,"contactEmailCustomerFlag":' || S_VEHICULE_ENDOFLIFE.CONTACTEMAILCUSTOMERFLAG || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.CONTACTEMAILCUSTOMERDATE IS NOT NULL THEN       
V_LIGNE := '                        ,"contactEmailCustomerDate":"' || S_VEHICULE_ENDOFLIFE.CONTACTEMAILCUSTOMERDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.CONTACTPHONECUSTOMERFLAG IS NOT NULL THEN           
V_LIGNE := '                        ,"contactPhoneCustomerFlag":' || S_VEHICULE_ENDOFLIFE.CONTACTPHONECUSTOMERFLAG || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.CONTACTPHONECUSTOMERDATE IS NOT NULL THEN    
V_LIGNE := '                        ,"contactPhoneCustomerDate":"' || S_VEHICULE_ENDOFLIFE.CONTACTPHONECUSTOMERDATE || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.RESALEDEALERFLAG IS NOT NULL THEN  
V_LIGNE := '                        ,"resaleDealerFlag":' || S_VEHICULE_ENDOFLIFE.RESALEDEALERFLAG || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
                        
            IF S_VEHICULE_ENDOFLIFE.RESALECUSTOMERFLAG IS NOT NULL THEN   
V_LIGNE := '                        ,"resaleCustomerFlag":' || S_VEHICULE_ENDOFLIFE.RESALECUSTOMERFLAG || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
            
            IF S_VEHICULE_ENDOFLIFE.MILEAGEENDOFLIFE IS NOT NULL THEN   
V_LIGNE := '                        ,"mileageEndOfLIfe":' || REPLACE(S_VEHICULE_ENDOFLIFE.MILEAGEENDOFLIFE,',','.') || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.REFURBISHMENT IS NOT NULL THEN    
V_LIGNE := '                        ,"refurbishment":' || REPLACE(S_VEHICULE_ENDOFLIFE.REFURBISHMENT,',','.') || '';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
            IF S_VEHICULE_ENDOFLIFE.BUYERDEALERNAME IS NOT NULL THEN        
V_LIGNE := '                        ,"buyerDealerName":"' || S_VEHICULE_ENDOFLIFE.BUYERDEALERNAME || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
                        
            IF S_VEHICULE_ENDOFLIFE.BUYERDEALERCITY IS NOT NULL THEN    
V_LIGNE := '                        ,"buyerDealerCity":"' || S_VEHICULE_ENDOFLIFE.BUYERDEALERCITY || '"';res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF; 
                                    
                        

                if V_NB_ENDOFLIFE_TRAITE = V_NB_ENDOFLIFE THEN V_LIGNE := '}';
                else V_LIGNE := '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
    
-----------------------------------VEHICULE ENDOFLIFE FIN-----------------------------

                if V_NB_VEHICULE_TRAITE = V_NB_VEHICULE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null





 -----------------------------------SERVICES-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SERVICES
         FROM  MKTOV.MKTQT_SERVICES
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SERVICES  := NULL;
    END;

    IF NVL(V_NB_SERVICES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"services": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_SERVICES IN C_SERVICES (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SERVICES_TRAITE := V_NB_SERVICES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "contractRef":"' || S_SERVICES.CONTRACTREF	 || '",
                "serviceRef":"' || S_SERVICES.SERVICEREF	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                
                IF S_SERVICES.EXTERNALSERVICEID IS NOT NULL THEN
V_LIGNE := '                "externalServiceId":"' || S_SERVICES.EXTERNALSERVICEID	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
                IF S_SERVICES.SERVICECODETYPE IS NOT NULL THEN
V_LIGNE := '                "serviceCodeType":"' || S_SERVICES.SERVICECODETYPE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
               
V_LIGNE := '                "labelService":"' || REPLACE(S_SERVICES.LABELSERVICE,',','.')	 || '",
                "dateStartService":"' || S_SERVICES.DATESTARTSERVICE	 || '",
                "dateEndService":"' || S_SERVICES.DATEENDSERVICE	 || '",
                "durationService":' || REPLACE(S_SERVICES.DURATIONSERVICE,',','.')	 || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                IF S_SERVICES.DATERESILIATION IS NOT NULL THEN
V_LIGNE := '                "dateResiliation":"' || S_SERVICES.DATERESILIATION	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
V_LIGNE := '                "nextPaymentAmountET":' || REPLACE(S_SERVICES.NEXTPAYMENTAMOUNTET,',','.')	 || ',
                "totaltAmountET":' || REPLACE(S_SERVICES.TOTALTAMOUNTET,',','.')	 || ',';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                IF S_SERVICES.REASONOFENDSERVICE IS NOT NULL THEN
V_LIGNE := '                "reasonOfEndService":"' || S_SERVICES.REASONOFENDSERVICE	 || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
V_LIGNE := '                "flagCEM":' || S_SERVICES.FLAGCEM	 || ',
                "totalAmountService ":' || REPLACE(S_SERVICES.TOTALAMOUNTSERVICE,',','.')	 || '';


                if V_NB_SERVICES_TRAITE = V_NB_SERVICES THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
---------------------------------------



 -----------------------------------SCHEDULES-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SCHEDULES
         FROM  MKTOV.MKTQT_SCHEDULES
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SCHEDULES  := NULL;
    END;

    IF NVL(V_NB_SCHEDULES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"schedules": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       
       FOR S_SCHEDULES IN C_SCHEDULES (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SCHEDULES_TRAITE := V_NB_SCHEDULES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "contractRef":"' || S_SCHEDULES.CONTRACTREF	 || '",
                "numberOfMonthlyPayment":' || REPLACE(S_SCHEDULES.NUMBEROFMONTHLYPAYMENT,',','.')	 || ',
                "invoiceDate":"' || S_SCHEDULES.INVOICEDATE	 || '",
                "dateStartOfPeriodPayment":"' || S_SCHEDULES.DATESTARTOFPERIODPAYMENT	 || '",
                "dateEndOfPeriodPayment":"' || S_SCHEDULES.DATEENDOFPERIODPAYMENT	 || '",
                "duration":' || REPLACE(S_SCHEDULES.DURATION,',','.')	 || ',
                "interestAmount":' || REPLACE(S_SCHEDULES.INTERESTAMOUNT,',','.')	 || ',
                "unpaidFlag":' || S_SCHEDULES.UNPAIDFLAG	 || '';
               


                if V_NB_SCHEDULES_TRAITE = V_NB_SCHEDULES THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;


            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
    
    
-----------------------------------STAKEHOLDERS-----------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_STAKEHOLDERS
         FROM  MKTOV.MKTQT_STAKEHOLDERS
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_STAKEHOLDERS  := NULL;
    END;

    IF NVL(V_NB_STAKEHOLDERS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"stakeholders": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_STAKEHOLDERS IN C_STAKEHOLDERS (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_STAKEHOLDERS_TRAITE := V_NB_STAKEHOLDERS_TRAITE+1;   ---- 
            V_NB_STAKEHOLDERS_ADRS_TRAITE  := 0; 
            
            V_LIGNE := '                {
                "contractRef":"' || S_STAKEHOLDERS.CONTRACTREF	 || '",
                "stakeholderRole":"' || S_STAKEHOLDERS.STAKEHOLDERROLE	 || '",
                "srcPartyId":"' || S_STAKEHOLDERS.SRCPARTYID	 || '",
                "srcJvCode":"' || S_STAKEHOLDERS.SRCJVCODE	 || '",
                "srcAppCode":"' || S_STAKEHOLDERS.SRCAPPCODE1	 || '",
                "srcDealershipId":"' || S_STAKEHOLDERS.SRCDEALERSHIPID	 || '",
                "srcAppCode":"' || S_STAKEHOLDERS.SRCAPPCODE2	 || '"';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                    ---------------------STAKEHOLDERS_ADRS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_STAKEHOLDERS_ADRS
         FROM  MKTOV.MKTQT_STAKEHOLDER_ADRS
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_STAKEHOLDERS_ADRS  := NULL;
    END;

    IF NVL(V_NB_STAKEHOLDERS_ADRS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_STAKEHOLDERS_ADRS IN C_STAKEHOLDERS_ADRS (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_STAKEHOLDERS_ADRS_TRAITE := V_NB_STAKEHOLDERS_ADRS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"principalAddress":{
                        "numberAndStreet":"' || S_STAKEHOLDERS_ADRS.NUMBERANDSTREET	 || '",
                        "zipCode":"' || S_STAKEHOLDERS_ADRS.ZIPCODE	 || '",
                        "city":"' || S_STAKEHOLDERS_ADRS.CITY	 || '",
                        "department":"' || S_STAKEHOLDERS_ADRS.DEPARTMENT	 || '"';               
               

                if V_NB_STAKEHOLDERS_ADRS_TRAITE = V_NB_STAKEHOLDERS_ADRS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
                ---------------------STAKEHOLDERS_ADRS FIN----------------------


                if V_NB_STAKEHOLDERS_TRAITE = V_NB_STAKEHOLDERS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
    
       
                    ---------------------AMENDMENT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_AMENDMENT
         FROM  MKTOV.MKTQT_AMENDMENT
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_AMENDMENT  := NULL;
    END;

    IF NVL(V_NB_AMENDMENT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"amendment": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_AMENDMENT IN C_AMENDMENT (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_AMENDMENT_TRAITE := V_NB_AMENDMENT_TRAITE+1;   ---- 
                V_NB_AMENDMENT_EXTEN_TRAITE  := 0;
                V_NB_SIGNATORY_TRAITE  := 0;
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_AMENDMENT.TECH_DATEEXTRACTION	 || '",
                "amendementRef":"' || S_AMENDMENT.AMENDEMENTREF	 || '",
                "typeCode":"' || S_AMENDMENT.TYPECODE	 || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
            IF S_AMENDMENT.APPLICATIONDATE IS NOT NULL THEN
V_LIGNE := ',                "applicationDate":"' || S_AMENDMENT.APPLICATIONDATE	 || '"'; 
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;
            
            ------------------------------AMENDMENT_EXTEN DEBUT------------------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_AMENDMENT_EXTEN
         FROM  MKTOV.MKTQT_AMENDMENT_EXTENSION
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_AMENDMENT_EXTEN  := NULL;
    END;

    IF NVL(V_NB_AMENDMENT_EXTEN, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_AMENDMENT_EXTEN IN C_AMENDMENT_EXTEN (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_AMENDMENT_EXTEN_TRAITE := V_NB_AMENDMENT_EXTEN_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"extension":{
                        "typeCode":"' || S_AMENDMENT_EXTEN.TYPECODE	 || '",';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                        
           IF S_AMENDMENT_EXTEN.AUTOMATICFLAG IS NOT NULL THEN             
V_LIGNE := '                        "automaticFlag":' || S_AMENDMENT_EXTEN.AUTOMATICFLAG	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
           END IF;  
           
            IF S_AMENDMENT_EXTEN.PREVIOUSDURATION IS NOT NULL THEN         
V_LIGNE := '                        "previousDuration":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSDURATION,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;
            IF S_AMENDMENT_EXTEN.NEWDURATION IS NOT NULL THEN
V_LIGNE := '                        "newDuration":' || REPLACE(S_AMENDMENT_EXTEN.NEWDURATION,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
             END IF;
             IF S_AMENDMENT_EXTEN.PREVIOUSMILEAGE IS NOT NULL THEN           
V_LIGNE := '                        "previousMileage":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSMILEAGE,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
             END IF;
             IF  S_AMENDMENT_EXTEN.NEWMILEAGE IS NOT NULL THEN           
V_LIGNE := '                        "newMileage":' || REPLACE(S_AMENDMENT_EXTEN.NEWMILEAGE,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;          
             IF S_AMENDMENT_EXTEN.PREVIOUSRVAMOUNT IS NOT NULL THEN           
V_LIGNE := '                        "previousRvAmount":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSRVAMOUNT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;          
              IF S_AMENDMENT_EXTEN.NEWRVAMOUNT IS NOT NULL THEN          
V_LIGNE := '                        "newRvAmount":' || REPLACE(S_AMENDMENT_EXTEN.NEWRVAMOUNT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
               END IF;         
             IF  S_AMENDMENT_EXTEN.PREVIOUSRATE	 IS NOT NULL THEN           
V_LIGNE := '                        "previousRate":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSRATE,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;          
             IF S_AMENDMENT_EXTEN.NEWRATE IS NOT NULL THEN           
V_LIGNE := '                        "newRate":' || REPLACE(S_AMENDMENT_EXTEN.NEWRATE,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;          
             IF S_AMENDMENT_EXTEN.PREVIOUSRENT IS NOT NULL THEN           
V_LIGNE := '                        "previousRent":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSRENT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
             END IF;           
             IF S_AMENDMENT_EXTEN.NEWRENT IS NOT NULL THEN           
V_LIGNE := '                        "newRent":' || REPLACE(S_AMENDMENT_EXTEN.NEWRENT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;          
                        
                        
             IF S_AMENDMENT_EXTEN.PREVIOUSSERVICEMOUNT IS NOT NULL THEN                         
V_LIGNE := '                        "previousServicemount":' || REPLACE(S_AMENDMENT_EXTEN.PREVIOUSSERVICEMOUNT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;
             IF S_AMENDMENT_EXTEN.NEWSERVICEAMOUNT IS NOT NULL THEN  
V_LIGNE := '                        "newServiceAmount":' || REPLACE(S_AMENDMENT_EXTEN.NEWSERVICEAMOUNT,',','.')	 || ',';
                        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              END IF;                        
          
V_LIGNE := '                        "newAmountFees":' || REPLACE(S_AMENDMENT_EXTEN.NEWAMOUNTFEES,',','.')	 || '';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
                     IF S_AMENDMENT_EXTEN.NEWTOTALOUSTANDING IS NOT NULL THEN 
V_LIGNE := ',                        "newTotalOustanding":' || REPLACE(S_AMENDMENT_EXTEN.NEWTOTALOUSTANDING,',','.')	 || '';                              
               res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                    END IF;
                    
                   
                if V_NB_AMENDMENT_EXTEN_TRAITE = V_NB_AMENDMENT_EXTEN THEN V_LIGNE :=   '}';
                else V_LIGNE :='}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null
            ------------------------------AMENDMENT_EXTEN FIN------------------------------


                   --------------------- SIGNATORY DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_SIGNATORY
         FROM  MKTOV.MKTQT_SIGNATORY
         WHERE TECH_ID = S_MKTQT_CONTRACT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_SIGNATORY := NULL;
    END;

    IF NVL(V_NB_SIGNATORY, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_SIGNATORY IN C_SIGNATORY (S_MKTQT_CONTRACT.TECH_ID)LOOP
            V_NB_SIGNATORY_TRAITE := V_NB_SIGNATORY_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"signatory":{
                        "name":"' || S_SIGNATORY.NAME	 || '",
                        "email":"' || S_SIGNATORY.EMAIL	 || '"';
                           
               

                if V_NB_SIGNATORY_TRAITE = V_NB_SIGNATORY THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- SIGNATORY FIN----------------------
------------------------------------------------------------

                if V_NB_AMENDMENT_TRAITE = V_NB_AMENDMENT THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null   

     --------DERNIERE PARTIE      

    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CONTRACT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CONTRACT.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_CONTRACT_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CONTRACT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_CONTRACT_JSON;













FUNCTION EXPORT_AGREEMENT_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_REQUEST  NUMBER(10) := 0;  
    V_NB_REQUEST_TRAITE NUMBER(10) := 0;

    V_NB_CONTRACT  NUMBER(10) := 0;  
    V_NB_CONTRACT_TRAITE NUMBER(10) := 0;
    
    V_NB_FEES  NUMBER(10) := 0;  
    V_NB_FEES_TRAITE NUMBER(10) := 0;



CURSOR C_MKTQT_AGREEMENT IS
SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE
FROM MKTOV.MKTQT_AGREEMENT
;

CURSOR C_MKTQT_REQUEST (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
REQUESTREF AS REQUESTREF
FROM MKTOV.MKTQT_AGREEMENT_REQUEST
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_CONTRACT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
CONTRACTREF AS CONTRACTREF,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN

FROM MKTOV.MKTQT_AGREEMENT_CONTRACT
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_FEES (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
FEETYPE AS FEETYPE,
FEELABEL AS FEELABEL,
FEECODE AS FEECODE,
REPLACE(INVOICINGAMOUNT,',','.') AS INVOICINGAMOUNT,
TRANSACTIONIDBACKOFFICE AS TRANSACTIONIDBACKOFFICE,
TO_CHAR(LASTINVOICINGDATE,'YYYY-MM-DD') AS LASTINVOICINGDATE,
SPREADFLAG AS SPREADFLAG

FROM MKTOV.MKTQT_AGREEMENT_FEES
WHERE TECH_ID = P_TECH_ID
;





BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_AGREEMENT_JSON', ' ##  EXPORT AGREEMENT JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_AGREEMENT;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_AGREEMENT IN C_MKTQT_AGREEMENT LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_REQUEST_TRAITE  := 0;
         V_NB_CONTRACT_TRAITE  := 0;
         V_NB_FEES_TRAITE  := 0;
         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_AGREEMENT.TECH_ID  || '",
"tech_dateExtraction":"' || S_MKTQT_AGREEMENT.TECH_DATEEXTRACTION  || '",
"countryBranchCode":"' || S_MKTQT_AGREEMENT.COUNTRYBRANCHCODE  || '"';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- REQUEST DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_REQUEST
         FROM  MKTOV.MKTQT_AGREEMENT_REQUEST
         WHERE TECH_ID = S_MKTQT_AGREEMENT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_REQUEST := NULL;
    END;

    IF NVL(V_NB_REQUEST, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_REQUEST IN C_MKTQT_REQUEST (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_REQUEST_TRAITE := V_NB_REQUEST_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"request":{
            "requestRef":"' || S_MKTQT_REQUEST.REQUESTREF	 || '"';                           
               

                if V_NB_REQUEST_TRAITE = V_NB_REQUEST THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- REQUEST FIN----------------------


                   --------------------- CONTRACT DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTRACT
         FROM  MKTOV.MKTQT_AGREEMENT_CONTRACT
         WHERE TECH_ID = S_MKTQT_AGREEMENT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTRACT := NULL;
    END;

    IF NVL(V_NB_CONTRACT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
      --- V_LIGNE := '"account": [';
      --- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTRACT IN C_MKTQT_CONTRACT (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_CONTRACT_TRAITE := V_NB_CONTRACT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"contract":{
            "contractRef":"' || S_MKTQT_CONTRACT.CONTRACTREF	 || '",                           
            "backOfficeOrigin":"' || S_MKTQT_CONTRACT.BACKOFFICEORIGIN	 || '"'; 

                if V_NB_CONTRACT_TRAITE = V_NB_CONTRACT THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       ---V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTRACT FIN----------------------

                  --------------------- FEES DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_FEES
         FROM  MKTOV.MKTQT_AGREEMENT_FEES
         WHERE TECH_ID = S_MKTQT_AGREEMENT.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_FEES := NULL;
    END;

    IF NVL(V_NB_FEES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"fees": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_FEES IN C_MKTQT_FEES (S_MKTQT_AGREEMENT.TECH_ID)LOOP
            V_NB_FEES_TRAITE := V_NB_FEES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "feeType":"' || S_MKTQT_FEES.FEETYPE || '",
            "feelabel":"' || S_MKTQT_FEES.FEELABEL || '",
            "feeCode":"' || S_MKTQT_FEES.FEECODE || '",
            "invoicingAmount":' || S_MKTQT_FEES.INVOICINGAMOUNT || ',
            "transactionIdBackOffice":"' || S_MKTQT_FEES.TRANSACTIONIDBACKOFFICE || '",
            "lastInvoicingDate":"' || S_MKTQT_FEES.LASTINVOICINGDATE || '",
            "spreadFlag":' || S_MKTQT_FEES.SPREADFLAG || '';                  
               

                if V_NB_FEES_TRAITE = V_NB_FEES THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- FEES FIN----------------------






V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_AGREEMENT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_AGREEMENT.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_AGREEMENT_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_AGREEMENT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_AGREEMENT_JSON;




FUNCTION EXPORT_ASSET_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_VEHICLE  NUMBER(10) := 0;  
    V_NB_VEHICLE_TRAITE NUMBER(10) := 0;
    V_NB_LABELS  NUMBER(10) := 0;  
    V_NB_LABELS_TRAITE NUMBER(10) := 0;
    V_NB_PRICING  NUMBER(10) := 0;  
    V_NB_PRICING_TRAITE NUMBER(10) := 0;

    V_NB_BASEPRICE  NUMBER(10) := 0;  
    V_NB_BASEPRICE_TRAITE NUMBER(10) := 0;
    V_NB_DISCOUNTS  NUMBER(10) := 0;  
    V_NB_DISCOUNTS_TRAITE NUMBER(10) := 0;
    
    V_NB_LIFECYCLE  NUMBER(10) := 0;  
    V_NB_LIFECYCLE_TRAITE NUMBER(10) := 0;
    
    V_NB_DOMAINREFS  NUMBER(10) := 0;  
    V_NB_DOMAINREFS_TRAITE NUMBER(10) := 0;
    

CURSOR C_MKTQT_ASSET IS
SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE
FROM MKTOV.MKTQT_ASSET
;

CURSOR C_MKTQT_VEHICLE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE	AS COUNTRYBRANCHCODE	,
SERIALNUMBER	AS SERIALNUMBER	,
BRANDCODE	AS BRANDCODE	,
BRANDLABEL	AS BRANDLABEL	,
DELIVERYDATE	AS DELIVERYDATE	,
REGISTRATIONNUMBER	AS REGISTRATIONNUMBER	,
FISCALHORSEPOWER	AS FISCALHORSEPOWER	,
KINDCODE	AS KINDCODE	,
ENERGYCODE	AS ENERGYCODE	,
CURRENTMILEAGE	AS CURRENTMILEAGE	,
ISLEASCO	AS ISLEASCO	,
ISFINCO	AS ISFINCO	,
CONTRACTREF	AS CONTRACTREF	

FROM MKTOV.MKTQT_ASSET_VEHICULE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_LABELS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
LANGUAGECODE AS LANGUAGECODE,
VERSIONLABELSHORT AS VERSIONLABELSHORT,
VERSIONLABELLONG AS VERSIONLABELLONG

FROM MKTOV.MKTQT_ASSET_VEHICULE_LABELS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_PRICING (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
REPLACE(AMOUNTET,',','.') AS AMOUNTET,
REPLACE(OPTIONSTOTALAMOUNTET,',','.') AS OPTIONSTOTALAMOUNTET,
REPLACE(ACCESSORIESTOTALAMOUNTET,',','.') AS ACCESSORIESTOTALAMOUNTET,
ENVIRONMENTALBONUS AS ENVIRONMENTALBONUS

FROM MKTOV.MKTQT_VEHICULE_PRICING
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_BASEPRICE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
REPLACE(AMOUNTET,',','.') AS AMOUNTET,
REPLACE(VATAMOUNT,',','.') AS VATAMOUNT

FROM MKTOV.MKTQT_VEHICULE_BASEPRICE
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_DISCOUNTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TYPECODE AS TYPECODE,
SOURCECODE AS SOURCECODE,
REPLACE(AMOUNTET,',','.') AS AMOUNTET

FROM MKTOV.MKTQT_VEHICULE_PRICE_DISCOUNT
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_LIFECYCLE (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
MODIFICATIONTYPE AS MODIFICATIONTYPE,
SERIALNUMBER AS SERIALNUMBER,
REGISTRATIONNUMBER AS REGISTRATIONNUMBER,
TO_CHAR(DATEREGISTRATION,'YYYY-MM-DD') AS DATEREGISTRATION,
REPLACE(CURRENTMILEAGE,',','.') AS CURRENTMILEAGE

FROM MKTOV.MKTQT_VEHICULE_LIFECYCLE
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_DOMAINREFS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION,'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SERIALNUMBER AS SERIALNUMBER,
CONTRACTREF AS CONTRACTREF,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
STATECODE AS STATECODE

FROM MKTOV.MKTQT_VEHICULE_DOMAINREFS
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_ASSET_JSON', ' ##  EXPORT ASSET JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_ASSET;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_ASSET IN C_MKTQT_ASSET LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_VEHICLE_TRAITE := 0;
         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_ASSET.TECH_ID  || '",
"tech_dateExtraction":"' || S_MKTQT_ASSET.TECH_DATEEXTRACTION  || '",
"countryBranchCode":"' || S_MKTQT_ASSET.COUNTRYBRANCHCODE  || '"';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                  --------------------- VEHICLE DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_VEHICLE
         FROM  MKTOV.MKTQT_ASSET_VEHICULE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_VEHICLE := NULL;
    END;

    IF NVL(V_NB_VEHICLE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"vehicle":[';
       ---res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_VEHICLE IN C_MKTQT_VEHICLE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_VEHICLE_TRAITE := V_NB_VEHICLE_TRAITE+1;   ---- 
            V_NB_LABELS_TRAITE := 0;
            V_NB_PRICING_TRAITE := 0;
            V_NB_LIFECYCLE_TRAITE :=0;
            V_NB_DOMAINREFS_TRAITE :=0;
            
            V_LIGNE := '"vehicle":{
"tech_dateExtraction":"' || S_MKTQT_VEHICLE.TECH_DATEEXTRACTION	 || '",
"countryBranchCode":"' || S_MKTQT_VEHICLE.COUNTRYBRANCHCODE	 || '",
"serialNumber":"' || S_MKTQT_VEHICLE.SERIALNUMBER	 || '",
"brandCode":"' || S_MKTQT_VEHICLE.BRANDCODE	 || '",
"brandLabel":"' || S_MKTQT_VEHICLE.BRANDLABEL	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 

IF S_MKTQT_VEHICLE.DELIVERYDATE IS NOT NULL THEN
V_LIGNE := '"deliveryDate":"' || S_MKTQT_VEHICLE.DELIVERYDATE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 
END IF;

IF S_MKTQT_VEHICLE.REGISTRATIONNUMBER IS NOT NULL THEN
V_LIGNE := '"registrationNumber":"' || S_MKTQT_VEHICLE.REGISTRATIONNUMBER	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 
END IF;


V_LIGNE := '"fiscalHorsePower":' || S_MKTQT_VEHICLE.FISCALHORSEPOWER	 || ',
"kindCode":"' || S_MKTQT_VEHICLE.KINDCODE	 || '",
"energyCode":"' || S_MKTQT_VEHICLE.ENERGYCODE	 || '",
"currentMileage":' || S_MKTQT_VEHICLE.CURRENTMILEAGE	 || ',
"isLeasco":' || S_MKTQT_VEHICLE.ISLEASCO	 || ',
"isFinco":' || S_MKTQT_VEHICLE.ISFINCO	 || ',
"contractRef":"' || S_MKTQT_VEHICLE.CONTRACTREF	 || '"';                 
               
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            

                  --------------------- LABELS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_LABELS
         FROM  MKTOV.MKTQT_ASSET_VEHICULE_LABELS
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_LABELS := NULL;
    END;

    IF NVL(V_NB_LABELS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"labels": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_LABELS IN C_MKTQT_LABELS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_LABELS_TRAITE := V_NB_LABELS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "languageCode":"' || S_MKTQT_LABELS.LANGUAGECODE || '",
            "versionLabelShort":"' || S_MKTQT_LABELS.VERSIONLABELSHORT || '",
            "versionLabelLong":"' || S_MKTQT_LABELS.VERSIONLABELLONG || '"';                  
               

                if V_NB_LABELS_TRAITE = V_NB_LABELS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- LABELS FIN----------------------


                  --------------------- PRICING DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PRICING
         FROM  MKTOV.MKTQT_VEHICULE_PRICING
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PRICING := NULL;
    END;

    IF NVL(V_NB_PRICING, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"labels": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_PRICING IN C_MKTQT_PRICING (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_PRICING_TRAITE := V_NB_PRICING_TRAITE+1;   ---- 
            V_NB_BASEPRICE_TRAITE := 0;
            V_NB_DISCOUNTS_TRAITE := 0;
            
            
            V_LIGNE := '            "pricing":{';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
            IF S_MKTQT_PRICING.AMOUNTET IS NOT NULL THEN
V_LIGNE := '                        "amountET":' || S_MKTQT_PRICING.AMOUNTET || ',';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;
            
            IF S_MKTQT_PRICING.OPTIONSTOTALAMOUNTET IS NOT NULL THEN
V_LIGNE := '                        "optionsTotalAmountET":' || S_MKTQT_PRICING.OPTIONSTOTALAMOUNTET || ',';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;
            
            
V_LIGNE := '                        "accessoriesTotalAmountET":' || S_MKTQT_PRICING.ACCESSORIESTOTALAMOUNTET || ',
                        "environmentalBonus":"' || S_MKTQT_PRICING.ENVIRONMENTALBONUS || '"';                  
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
              
                                ---------------------  PRICING: BASEPRICE  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_BASEPRICE
         FROM  MKTOV.MKTQT_VEHICULE_BASEPRICE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_BASEPRICE := NULL;
    END;

    IF NVL(V_NB_BASEPRICE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"basePrice": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_BASEPRICE IN C_MKTQT_BASEPRICE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_BASEPRICE_TRAITE := V_NB_BASEPRICE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            "basePrice":{';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            IF S_MKTQT_BASEPRICE.AMOUNTET IS NOT NULL THEN
V_LIGNE := '                        "amountET":' || S_MKTQT_BASEPRICE.AMOUNTET || ',';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;        
            
V_LIGNE := '                        "vatAmount":' || S_MKTQT_BASEPRICE.VATAMOUNT || '';                

                if V_NB_BASEPRICE_TRAITE = V_NB_BASEPRICE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PRICING: BASEPRICE  FIN----------------------
              
                                ---------------------  PRICING: DISCOUNT  DEBUT----------------------
/*
    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_DISCOUNTS
         FROM  MKTOV.MKTQT_VEHICULE_PRICE_DISCOUNT
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_DISCOUNTS := NULL;
    END;

    IF NVL(V_NB_DISCOUNTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '                "discounts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_DISCOUNTS IN C_MKTQT_DISCOUNTS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_DISCOUNTS_TRAITE := V_NB_DISCOUNTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                    "typeCode":"' || S_MKTQT_DISCOUNTS.TYPECODE || '",
                    "sourceCode":"' || S_MKTQT_DISCOUNTS.SOURCECODE || '",
                    "amountET":' || S_MKTQT_DISCOUNTS.AMOUNTET || '';
                 
               

                if V_NB_DISCOUNTS_TRAITE = V_NB_DISCOUNTS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

*/
            ---------------------  PRICING:  DISCOUNT  FIN----------------------              
           

                if V_NB_PRICING_TRAITE = V_NB_PRICING THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PRICING FIN----------------------
               
                                --------------------- LIFECYCLE  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_LIFECYCLE
         FROM  MKTOV.MKTQT_VEHICULE_LIFECYCLE
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_LIFECYCLE := NULL;
    END;

    IF NVL(V_NB_LIFECYCLE, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"lifecycle": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_LIFECYCLE IN C_MKTQT_LIFECYCLE (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_LIFECYCLE_TRAITE := V_NB_LIFECYCLE_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_MKTQT_LIFECYCLE.TECH_DATEEXTRACTION || '",
                "countryBranchCode":"' || S_MKTQT_LIFECYCLE.COUNTRYBRANCHCODE || '",
                "modificationType":"' || S_MKTQT_LIFECYCLE.MODIFICATIONTYPE || '",
                "serialNumber":"' || S_MKTQT_LIFECYCLE.SERIALNUMBER || '",
                "registrationNumber":"' || S_MKTQT_LIFECYCLE.REGISTRATIONNUMBER || '",
                "dateRegistration":"' || S_MKTQT_LIFECYCLE.DATEREGISTRATION || '",
                "currentMileage":' || S_MKTQT_LIFECYCLE.CURRENTMILEAGE || '';
                 
               

                if V_NB_LIFECYCLE_TRAITE = V_NB_LIFECYCLE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- LIFECYCLE FIN----------------------              
              
                
                              --------------------- DOMAINREFS  DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_DOMAINREFS
         FROM  MKTOV.MKTQT_VEHICULE_DOMAINREFS
         WHERE TECH_ID = S_MKTQT_ASSET.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_DOMAINREFS := NULL;
    END;

    IF NVL(V_NB_DOMAINREFS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"domainRefs": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_DOMAINREFS IN C_MKTQT_DOMAINREFS (S_MKTQT_ASSET.TECH_ID)LOOP
            V_NB_DOMAINREFS_TRAITE := V_NB_DOMAINREFS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_MKTQT_DOMAINREFS.TECH_DATEEXTRACTION || '",
                "countryBranchCode":"' || S_MKTQT_DOMAINREFS.COUNTRYBRANCHCODE || '",
                "serialNumber":"' || S_MKTQT_DOMAINREFS.SERIALNUMBER || '",
                "contractRef":"' || S_MKTQT_DOMAINREFS.CONTRACTREF || '",
                "backOfficeOrigin":"' || S_MKTQT_DOMAINREFS.BACKOFFICEORIGIN || '",
                "srcPartyId":"' || S_MKTQT_DOMAINREFS.SRCPARTYID || '",
                "srcJvCode":"' || S_MKTQT_DOMAINREFS.SRCJVCODE || '",
                "srcAppCode":"' || S_MKTQT_DOMAINREFS.SRCAPPCODE || '",
                "stateCode":"' || S_MKTQT_DOMAINREFS.STATECODE || '"';
                 
               

                if V_NB_DOMAINREFS_TRAITE = V_NB_DOMAINREFS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- DOMAINREFS FIN----------------------            
         
         
         
         
               
               

                if V_NB_VEHICLE_TRAITE = V_NB_VEHICLE THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '}';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       -- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- VEHICLE FIN----------------------






V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_ASSET_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_ASSET.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_ASSET_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_ASSET_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
          
END EXPORT_ASSET_JSON;




FUNCTION EXPORT_PROFIL_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_CONTRACTS  NUMBER(10) := 0;  
    V_NB_CONTRACTS_TRAITE NUMBER(10) := 0;





CURSOR C_MKTQT_CUSTOMER IS
SELECT 
TECH_ID AS TECH_ID,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUSTOMER_PROFILE
;

CURSOR C_MKTQT_CONTRACTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
STAKEHOLDERROLE AS STAKEHOLDERROLE,
CONTRACTREF AS CONTRACTREF,
ACCOUNTSTATUS AS ACCOUNTSTATUS,
DEALERSHIPREF AS DEALERSHIPREF,
VEHSERIALNUMBER AS VEHSERIALNUMBER,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO,
BACKOFFICEORIGIN AS BACKOFFICEORIGIN

FROM MKTOV.MKTQT_CUSTOMER_PROFILE_CTT
WHERE TECH_ID = P_TECH_ID
;






BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_PROFIL_JSON', ' ##  EXPORT PROFIL JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CUSTOMER_PROFILE;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CUSTOMER IN C_MKTQT_CUSTOMER LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         V_NB_CONTRACTS_TRAITE  := 0;

         
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CUSTOMER.TECH_ID || '",
"countryBranchCode":"' || S_MKTQT_CUSTOMER.COUNTRYBRANCHCODE || '",
"srcJvCode":"' || S_MKTQT_CUSTOMER.SRCJVCODE || '",
"srcAppCode":"' || S_MKTQT_CUSTOMER.SRCAPPCODE || '",
"isLeasco":' || S_MKTQT_CUSTOMER.ISLEASCO || ',
"isFinco":' || S_MKTQT_CUSTOMER.ISFINCO || '';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- CONTRACTS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTRACTS
         FROM  MKTOV.MKTQT_CUSTOMER_PROFILE_CTT
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTRACTS := NULL;
    END;

    IF NVL(V_NB_CONTRACTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"contracts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTRACTS IN C_MKTQT_CONTRACTS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CONTRACTS_TRAITE := V_NB_CONTRACTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '            {
            "stakeholderRole":"' || S_MKTQT_CONTRACTS.STAKEHOLDERROLE || '",
            "contractRef":"' || S_MKTQT_CONTRACTS.CONTRACTREF || '",
            "accountStatus":"' || S_MKTQT_CONTRACTS.ACCOUNTSTATUS || '",
            "dealershipRef":"' || S_MKTQT_CONTRACTS.DEALERSHIPREF || '",
            "vehSerialNumber":"' || S_MKTQT_CONTRACTS.VEHSERIALNUMBER || '",
            "isLeasco":' || S_MKTQT_CONTRACTS.ISLEASCO || ',
            "isFinco":' || S_MKTQT_CONTRACTS.ISFINCO || '';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
            IF S_MKTQT_CONTRACTS.BACKOFFICEORIGIN IS NOT NULL THEN
V_LIGNE := '            ,"backOfficeOrigin":"' || S_MKTQT_CONTRACTS.BACKOFFICEORIGIN || '"';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            END IF;   

                if V_NB_CONTRACTS_TRAITE = V_NB_CONTRACTS THEN V_LIGNE :=  '            }';
                else V_LIGNE :=  '            },';
                end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTRACTS FIN----------------------


    




V_LIGNE:='';
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_PROFIL_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CUSTOMER.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_PROFIL_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_PROFIL_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_PROFIL_JSON;








FUNCTION EXPORT_CUSTOMER_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;

    V_NB_AGREEMENT  NUMBER(10) := 0;  
    V_NB_AGREEMENT_TRAITE NUMBER(10) := 0;
    
    V_NB_CONTACTS  NUMBER(10) := 0;  
    V_NB_CONTACTS_TRAITE NUMBER(10) := 0;
    
    V_NB_BANKINGS  NUMBER(10) := 0;  
    V_NB_BANKINGS_TRAITE NUMBER(10) := 0;
    
    V_NB_ID  NUMBER(10) := 0;  
    V_NB_ID_TRAITE NUMBER(10) := 0;
    
    V_NB_MEAN  NUMBER(10) := 0;  
    V_NB_MEAN_TRAITE NUMBER(10) := 0;
    
    V_NB_ADRESSES  NUMBER(10) := 0;  
    V_NB_ADRESSES_TRAITE NUMBER(10) := 0;

    V_NB_PHONES  NUMBER(10) := 0;  
    V_NB_PHONES_TRAITE NUMBER(10) := 0;

    V_NB_EMAILS  NUMBER(10) := 0;  
    V_NB_EMAILS_TRAITE NUMBER(10) := 0;
    
    V_NB_INFO  NUMBER(10) := 0;  
    V_NB_INFO_TRAITE NUMBER(10) := 0;

    V_NB_CROSSREF  NUMBER(10) := 0;  
    V_NB_CROSSREF_TRAITE NUMBER(10) := 0;
    V_NB_EXT  NUMBER(10) := 0;  
    V_NB_EXT_TRAITE NUMBER(10) := 0;    
    
    

CURSOR C_MKTQT_CUSTOMER IS

SELECT 
TECH_ID AS TECH_ID,
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION	,
COUNTRYBRANCHCODE	AS COUNTRYBRANCHCODE	,
SRCPARTYID	AS SRCPARTYID	,
SRCJVCODE	AS SRCJVCODE	,
SRCAPPCODE	AS SRCAPPCODE	,
CUSTOMERTYPECODE	AS CUSTOMERTYPECODE	,
LASTUPDATEPARTYDATE	AS LASTUPDATEPARTYDATE	,
FULLNAME	AS FULLNAME	,
LEGALENTITYIDENTIFIER	AS LEGALENTITYIDENTIFIER	,
CIVILITYCODE	AS CIVILITYCODE	,
FIRSTNAME	AS FIRSTNAME	,
USAGENAME	AS USAGENAME	,
FISCCOUNTRYCODE	AS FISCCOUNTRYCODE	,
OCCUPATIONLABEL	AS OCCUPATIONLABEL	,
OCCUPATIONTYPECODE	AS OCCUPATIONTYPECODE	,
OCCUPATIONCOMPANYNAME	AS OCCUPATIONCOMPANYNAME	,
ISGROUPEMPLOYEE	AS ISGROUPEMPLOYEE	,
BUSINESSNAME	AS BUSINESSNAME	,
COMPANYNAME	AS COMPANYNAME	,
NACELABEL	AS NACELABEL	,
NBEMPLOYEES	AS NBEMPLOYEES	,
TOTALFLEET	AS TOTALFLEET	,
ISDEALER	AS ISDEALER	,
FLAGDEMATERIALIZATION	AS FLAGDEMATERIALIZATION	,
ISVATELIGIBLE AS ISVATELIGIBLE ,
ISLEASCO	AS ISLEASCO	,
ISFINCO	AS ISFINCO	
FROM MKTOV.MKTQT_CUSTOMER
;


CURSOR C_MKTQT_AGREEMENT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD')	AS TECH_DATEEXTRACTION	,
COUNTRYBRANCHCODE	AS COUNTRYBRANCHCODE	,
SRCPARTYID	AS SRCPARTYID	,
SRCJVCODE	AS SRCJVCODE	,
SRCAPPCODE	AS SRCAPPCODE	,
OPTOUTFLAG	AS OPTOUTFLAG	,
OPTINFLAG	AS OPTINFLAG	,
OPTINCUSTOMERSMS	AS OPTINCUSTOMERSMS	,
OPTINCUSTOMERPAPER	AS OPTINCUSTOMERPAPER	

FROM MKTOV.MKTQT_CUS_AGREEMENT
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_CONTACTS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION ,
SRCPARTYID AS SRCPARTYID ,
SRCJVCODE AS SRCJVCODE ,
SRCAPPCODE AS SRCAPPCODE ,
CONTACTNAME AS CONTACTNAME ,
CONTACTFIRSTNAME AS CONTACTFIRSTNAME ,
CONTACTCIVILITY AS CONTACTCIVILITY 

FROM MKTOV.MKTQT_CUS_PERSONCONTACTS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_BANKINGS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD')  AS TECH_DATEEXTRACTION ,
SRCPARTYID  AS SRCPARTYID ,
SRCJVCODE  AS SRCJVCODE ,
SRCAPPCODE  AS SRCAPPCODE ,
ROLEBANKINGCODE AS ROLEBANKINGCODE

FROM MKTOV.MKTQT_CUS_ROLEBANKINGS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_ID (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
NATIONALIDENTIFIERTYPECODE AS NATIONALIDENTIFIERTYPECODE,
NATIONALIDENTIFIER AS NATIONALIDENTIFIER

FROM MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_MEAN (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
COUNTRYBRANCHCODE AS COUNTRYBRANCHCODE,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE

FROM MKTOV.MKTQT_CUS_CONTACTMEAN
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_ADRESSES (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
TYPEUSECODE AS TYPEUSECODE,
NUMBERANDSTREET AS NUMBERANDSTREET,
COMPLEMENT AS COMPLEMENT,
ZIPCODE AS ZIPCODE,
LOCALITY AS LOCALITY,
CITY AS CITY,
COUNTRYCODE AS COUNTRYCODE,
COUNTRYISO2 AS COUNTRYISO2,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_PHONES (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
ASSIGNMENTCODE AS ASSIGNMENTCODE,
VALIDITYDATE AS VALIDITYDATE,
PHONENUMBER AS PHONENUMBER,
ISBUSINESSUSE AS ISBUSINESSUSE,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_EMAILS (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
VALIDITYDATE AS VALIDITYDATE,
EMAIL AS EMAIL,
ISLEASCO AS ISLEASCO,
ISFINCO AS ISFINCO

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS
WHERE TECH_ID = P_TECH_ID
;

CURSOR C_MKTQT_INFO (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE,
BANKACCOUNTNUMBER AS BANKACCOUNTNUMBER,
BANKNUMBER AS BANKNUMBER,
BANKNAME AS BANKNAME,
SEPAIBAN AS SEPAIBAN

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_CROSSREF (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
TO_CHAR(TECH_DATEEXTRACTION, 'YYYY-MM-DD') AS TECH_DATEEXTRACTION,
SRCPARTYID AS SRCPARTYID,
SRCJVCODE AS SRCJVCODE,
SRCAPPCODE AS SRCAPPCODE

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF
WHERE TECH_ID = P_TECH_ID
;


CURSOR C_MKTQT_EXT (P_TECH_ID VARCHAR2) IS
SELECT DISTINCT
APPLICATIONEXTCODE AS APPLICATIONEXTCODE,
APPLICATIONEXTLABEL AS APPLICATIONEXTLABEL,
PARTYREFEXT AS PARTYREFEXT

FROM MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS
WHERE TECH_ID = P_TECH_ID
;



BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_CUSTOMER_JSON', ' ## EXPORT CUSTOMER JSON' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTOV.MKTQT_CUSTOMER;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_CUSTOMER IN C_MKTQT_CUSTOMER LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
         
    V_NB_AGREEMENT_TRAITE := 0;
    V_NB_CONTACTS_TRAITE := 0;
    V_NB_BANKINGS_TRAITE := 0;
    V_NB_ID_TRAITE := 0;
    V_NB_MEAN_TRAITE := 0;
    V_NB_INFO_TRAITE := 0;    
    V_NB_CROSSREF_TRAITE := 0;         
    
    
         
              V_LIGNE := '{
"tech_id":"' || S_MKTQT_CUSTOMER.TECH_ID || '",
"tech_dateExtraction":"' || S_MKTQT_CUSTOMER.TECH_DATEEXTRACTION	 || '",
"countryBranchCode":"' || S_MKTQT_CUSTOMER.COUNTRYBRANCHCODE	 || '",
"srcPartyId":"' || S_MKTQT_CUSTOMER.SRCPARTYID	 || '",
"srcJvCode":"' || S_MKTQT_CUSTOMER.SRCJVCODE	 || '",
"srcAppCode":"' || S_MKTQT_CUSTOMER.SRCAPPCODE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CUSTOMER.CUSTOMERTYPECODE IS NOT NULL THEN
V_LIGNE := '"customerTypeCode":"' || S_MKTQT_CUSTOMER.CUSTOMERTYPECODE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"lastUpdatePartyDate":"' || S_MKTQT_CUSTOMER.LASTUPDATEPARTYDATE	 || '",
"fullName":"' || S_MKTQT_CUSTOMER.FULLNAME	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CUSTOMER.LEGALENTITYIDENTIFIER IS NOT NULL THEN
V_LIGNE := '"legalEntityIdentifier":"' || S_MKTQT_CUSTOMER.LEGALENTITYIDENTIFIER	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"civilityCode":"' || S_MKTQT_CUSTOMER.CIVILITYCODE	 || '",
"firstName":"' || S_MKTQT_CUSTOMER.FIRSTNAME	 || '",
"usageName":"' || S_MKTQT_CUSTOMER.USAGENAME	 || '",
"fiscCountryCode":"' || S_MKTQT_CUSTOMER.FISCCOUNTRYCODE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CUSTOMER.OCCUPATIONLABEL IS NOT NULL THEN
V_LIGNE := '"occupationLabel​":"' || S_MKTQT_CUSTOMER.OCCUPATIONLABEL	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CUSTOMER.OCCUPATIONTYPECODE IS NOT NULL THEN
V_LIGNE := '"occupationTypeCode":"' || S_MKTQT_CUSTOMER.OCCUPATIONTYPECODE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"occupationCompanyName":"' || S_MKTQT_CUSTOMER.OCCUPATIONCOMPANYNAME	 || '",
"isGroupEmployee":"' || S_MKTQT_CUSTOMER.ISGROUPEMPLOYEE	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CUSTOMER.BUSINESSNAME IS NOT NULL THEN
V_LIGNE := '"businessName":"' || S_MKTQT_CUSTOMER.BUSINESSNAME	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CUSTOMER.COMPANYNAME IS NOT NULL THEN
V_LIGNE := '"companyName":"' || S_MKTQT_CUSTOMER.COMPANYNAME	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CUSTOMER.NACELABEL IS NOT NULL THEN
V_LIGNE := '"naceLabel":"' || S_MKTQT_CUSTOMER.NACELABEL	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


V_LIGNE := '"nbEmployees":' || S_MKTQT_CUSTOMER.NBEMPLOYEES	 || ',
"totalFleet":"' || S_MKTQT_CUSTOMER.TOTALFLEET	 || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_MKTQT_CUSTOMER.ISDEALER IS NOT NULL THEN
V_LIGNE := '"isDealer":' || S_MKTQT_CUSTOMER.ISDEALER	 || ',';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_MKTQT_CUSTOMER.FLAGDEMATERIALIZATION IS NOT NULL THEN
V_LIGNE := '"isVatEligible":' || S_MKTQT_CUSTOMER.FLAGDEMATERIALIZATION	 || ',';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"flagDematerialization":' || S_MKTQT_CUSTOMER.ISVATELIGIBLE  || ',
"isLeasco":' || S_MKTQT_CUSTOMER.ISLEASCO	 || ',
"isFinco":' || S_MKTQT_CUSTOMER.ISFINCO	 || '';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                   --------------------- AGREEMENT DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_AGREEMENT
         FROM  MKTOV.MKTQT_CUS_AGREEMENT
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_AGREEMENT := NULL;
    END;

    IF NVL(V_NB_AGREEMENT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"agreement": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_AGREEMENT IN C_MKTQT_AGREEMENT (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_AGREEMENT_TRAITE := V_NB_AGREEMENT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '"agreement":{
        "tech_dateExtraction":"' || S_MKTQT_AGREEMENT.TECH_DATEEXTRACTION	 || '",
        "srcPartyId":"' || S_MKTQT_AGREEMENT.SRCPARTYID	 || '",
        "srcJvCode":"' || S_MKTQT_AGREEMENT.SRCJVCODE	 || '",
        "srcAppCode":"' || S_MKTQT_AGREEMENT.SRCAPPCODE	 || '",
        "optOutFlag":' || S_MKTQT_AGREEMENT.OPTOUTFLAG	 || ',
        "optInFlag":' || S_MKTQT_AGREEMENT.OPTINFLAG	 || ',
        "OptInCustomerSMS":' || S_MKTQT_AGREEMENT.OPTINCUSTOMERSMS	 || ',
        "OptInCustomerPaper":' || S_MKTQT_AGREEMENT.OPTINCUSTOMERPAPER	 || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_AGREEMENT_TRAITE = V_NB_AGREEMENT THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        }';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- AGREEMENT FIN----------------------


                   --------------------- CONTACTS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CONTACTS
         FROM  MKTOV.MKTQT_CUS_PERSONCONTACTS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CONTACTS := NULL;
    END;

    IF NVL(V_NB_CONTACTS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"personContacts": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CONTACTS IN C_MKTQT_CONTACTS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CONTACTS_TRAITE := V_NB_CONTACTS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_dateExtraction":"' || S_MKTQT_CONTACTS.TECH_DATEEXTRACTION  || '",
        "srcPartyId":"' || S_MKTQT_CONTACTS.SRCPARTYID  || '",
        "srcJvCode":"' || S_MKTQT_CONTACTS.SRCJVCODE  || '",
        "srcAppCode":"' || S_MKTQT_CONTACTS.SRCAPPCODE  || '",
        "contactName":"' || S_MKTQT_CONTACTS.CONTACTNAME  || '",
        "contactFirstname":"' || S_MKTQT_CONTACTS.CONTACTFIRSTNAME  || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);  
        
        IF S_MKTQT_CONTACTS.CONTACTCIVILITY IS NOT NULL THEN
            V_LIGNE := '        ,"contactCivility":"' || S_MKTQT_CONTACTS.CONTACTCIVILITY  || '"';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
        END IF;    
        
                if V_NB_CONTACTS_TRAITE = V_NB_CONTACTS THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CONTACTS FIN----------------------


                   --------------------- BANKINGS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_BANKINGS
         FROM  MKTOV.MKTQT_CUS_ROLEBANKINGS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_BANKINGS := NULL;
    END;

    IF NVL(V_NB_BANKINGS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"roleBankings": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_BANKINGS IN C_MKTQT_BANKINGS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_BANKINGS_TRAITE := V_NB_BANKINGS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_dateExtraction":"' || S_MKTQT_BANKINGS.TECH_DATEEXTRACTION  || '",
        "srcPartyId":"' || S_MKTQT_BANKINGS.SRCPARTYID  || '",
        "srcJvCode":"' || S_MKTQT_BANKINGS.SRCJVCODE  || '",
        "srcAppCode":"' || S_MKTQT_BANKINGS.SRCAPPCODE  || '",
        "roleBankingCode":"' || S_MKTQT_BANKINGS.ROLEBANKINGCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_BANKINGS_TRAITE = V_NB_BANKINGS THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- BANKINGS FIN----------------------



                   --------------------- ID DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ID
         FROM  MKTOV.MKTQT_CUS_NATIONALIDENTIFIERS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ID := NULL;
    END;

    IF NVL(V_NB_ID, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"nationalIdentifiers": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ID IN C_MKTQT_ID (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_ID_TRAITE := V_NB_ID_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "srcPartyId":"' || S_MKTQT_ID.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_ID.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_ID.SRCAPPCODE || '",
        "nationalIdentifier":"' || S_MKTQT_ID.NATIONALIDENTIFIERTYPECODE || '",
        "nationalIdentifierTypeCode":"' || S_MKTQT_ID.NATIONALIDENTIFIER || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_ID_TRAITE = V_NB_ID THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ID FIN----------------------

                   --------------------- MEAN DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_MEAN
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_MEAN := NULL;
    END;

    IF NVL(V_NB_MEAN, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"contactMean":[';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_MEAN IN C_MKTQT_MEAN (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_MEAN_TRAITE := V_NB_MEAN_TRAITE+1;   ---- 
            V_NB_ADRESSES_TRAITE := 0;
            V_NB_PHONES_TRAITE := 0;
            V_NB_EMAILS_TRAITE := 0;
            
            V_LIGNE := '        {
        "tech_dateExtraction":"' || S_MKTQT_MEAN.TECH_DATEEXTRACTION || '",
        "countryBranchCode":"' || S_MKTQT_MEAN.COUNTRYBRANCHCODE || '",
        "srcPartyId":"' || S_MKTQT_MEAN.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_MEAN.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_MEAN.SRCAPPCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            

                               --------------------- ADRESSES DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_ADRESSES
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_ADRS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_ADRESSES := NULL;
    END;

    IF NVL(V_NB_ADRESSES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "adresses": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_ADRESSES IN C_MKTQT_ADRESSES (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_ADRESSES_TRAITE := V_NB_ADRESSES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_MKTQT_ADRESSES.TECH_DATEEXTRACTION || '",
                "typeUseCode":"' || S_MKTQT_ADRESSES.TYPEUSECODE || '",
                "numberAndStreet":"' || S_MKTQT_ADRESSES.NUMBERANDSTREET || '",
                "complement":"' || S_MKTQT_ADRESSES.COMPLEMENT || '",
                "zipCode":"' || S_MKTQT_ADRESSES.ZIPCODE || '",';
               res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 
                
               IF S_MKTQT_ADRESSES.LOCALITY IS NOT NULL THEN 
                    V_LIGNE := '                "locality":"' || S_MKTQT_ADRESSES.LOCALITY || '",';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); 
               END IF; 
                
                
V_LIGNE := '                "city":"' || S_MKTQT_ADRESSES.CITY || '",
                "countryCode":"' || S_MKTQT_ADRESSES.COUNTRYCODE || '",
                "countryIso2":"' || S_MKTQT_ADRESSES.COUNTRYISO2 || '",
                "isLeasco":' || S_MKTQT_ADRESSES.ISLEASCO || ',
                "isFinco":' || S_MKTQT_ADRESSES.ISFINCO || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_ADRESSES_TRAITE = V_NB_ADRESSES THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- ADRESSES FIN----------------------
            
            
            
  
                               --------------------- PHONES DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_PHONES
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_PHONES
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PHONES := NULL;
    END;

    IF NVL(V_NB_PHONES, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "phones": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_PHONES IN C_MKTQT_PHONES (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_PHONES_TRAITE := V_NB_PHONES_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_MKTQT_PHONES.TECH_DATEEXTRACTION || '",
                "assignmentCode":"' || S_MKTQT_PHONES.ASSIGNMENTCODE || '",';
                res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);                 
                
                IF S_MKTQT_PHONES.VALIDITYDATE IS NOT NULL THEN
V_LIGNE := '                "validityDate":"' || S_MKTQT_PHONES.VALIDITYDATE || '",';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);                 
                END IF;
                IF S_MKTQT_PHONES.PHONENUMBER IS NOT NULL THEN
V_LIGNE := '                "phoneNumber":"' || S_MKTQT_PHONES.PHONENUMBER || '",';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);                 
                END IF;
                
                IF S_MKTQT_PHONES.ISBUSINESSUSE IS NOT NULL THEN
V_LIGNE := '                "isBusinessUse":' || S_MKTQT_PHONES.ISBUSINESSUSE || ',';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);                 
                END IF;
                
                
V_LIGNE := '                "isLeasco":' || S_MKTQT_PHONES.ISLEASCO || ',
                "isFinco":' || S_MKTQT_PHONES.ISFINCO || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_PHONES_TRAITE = V_NB_PHONES THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- PHONES FIN----------------------
   
                               --------------------- EMAILS DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_EMAILS
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_EMAILS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_EMAILS := NULL;
    END;

    IF NVL(V_NB_EMAILS, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "emails": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_EMAILS IN C_MKTQT_EMAILS (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_EMAILS_TRAITE := V_NB_EMAILS_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "tech_dateExtraction":"' || S_MKTQT_EMAILS.TECH_DATEEXTRACTION || '",';
              res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);  
              
              
              IF S_MKTQT_EMAILS.VALIDITYDATE IS NOT NULL THEN  
                    V_LIGNE := '                "validityDate":"' || S_MKTQT_EMAILS.VALIDITYDATE || '",';
                    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);  
              END IF;  
                
              
V_LIGNE := '                "email":"' || S_MKTQT_EMAILS.EMAIL || '",
                "isLeasco":' || S_MKTQT_EMAILS.ISLEASCO || ',
                "isFinco":' || S_MKTQT_EMAILS.ISFINCO || '';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_EMAILS_TRAITE = V_NB_EMAILS THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '                },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '        ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- EMAILS FIN----------------------

                if V_NB_MEAN_TRAITE = V_NB_MEAN THEN V_LIGNE :=  '      }';
                else V_LIGNE :=  '      },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- MEAN FIN----------------------

                              --------------------- INFO DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_INFO
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_BANKINFO
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_INFO := NULL;
    END;

    IF NVL(V_NB_INFO, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '"bankInformations": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_INFO IN C_MKTQT_INFO (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_INFO_TRAITE := V_NB_INFO_TRAITE+1;   ---- 
            
            
            V_LIGNE := '        {
        "tech_dateExtraction":"' || S_MKTQT_INFO.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_INFO.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_INFO.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_INFO.SRCAPPCODE || '",
        "bankAccountNumber":"' || S_MKTQT_INFO.BANKACCOUNTNUMBER || '",
        "bankNumber":"' || S_MKTQT_INFO.BANKNUMBER || '",
        "bankName":"' || S_MKTQT_INFO.BANKNAME || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
        
        
        IF S_MKTQT_INFO.SEPAIBAN IS NOT NULL THEN
            V_LIGNE := '        ,"sepaIban":"' || S_MKTQT_INFO.SEPAIBAN || '"';
            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
        END IF;    
        
                if V_NB_INFO_TRAITE = V_NB_INFO THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- INFO FIN----------------------
            
                              --------------------- CROSSREF DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CROSSREF
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_CROSSREF
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CROSSREF := NULL;
    END;

    IF NVL(V_NB_CROSSREF, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       --V_LIGNE := '"crossref": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_CROSSREF IN C_MKTQT_CROSSREF (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_CROSSREF_TRAITE := V_NB_CROSSREF_TRAITE+1;   ---- 
            V_NB_EXT_TRAITE := 0;
            
            V_LIGNE := '"crossref":{
        "tech_dateExtraction":"' || S_MKTQT_CROSSREF.TECH_DATEEXTRACTION || '",
        "srcPartyId":"' || S_MKTQT_CROSSREF.SRCPARTYID || '",
        "srcJvCode":"' || S_MKTQT_CROSSREF.SRCJVCODE || '",
        "srcAppCode":"' || S_MKTQT_CROSSREF.SRCAPPCODE || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
         
                                       --------------------- EXT DEBUT----------------------

    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_EXT
         FROM  MKTOV.MKTQT_CUS_CONTACTMEAN_EXTREFS
         WHERE TECH_ID = S_MKTQT_CUSTOMER.TECH_ID;
    EXCEPTION WHEN OTHERS THEN
              V_NB_EXT := NULL;
    END;

    IF NVL(V_NB_EXT, 0) > 0 THEN
       V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee
    
       V_LIGNE := '        "externalRefs": [';
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       FOR S_MKTQT_EXT IN C_MKTQT_EXT (S_MKTQT_CUSTOMER.TECH_ID)LOOP
            V_NB_EXT_TRAITE := V_NB_EXT_TRAITE+1;   ---- 
            
            
            V_LIGNE := '                {
                "applicationExtCode":"' || S_MKTQT_EXT.APPLICATIONEXTCODE || '",
                "applicationExtLabel":"' || S_MKTQT_EXT.APPLICATIONEXTLABEL || '",
                "partyRefExt":"' || S_MKTQT_EXT.PARTYREFEXT || '"';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);            
            
        
                if V_NB_EXT_TRAITE = V_NB_EXT THEN V_LIGNE :=  '                }';
                else V_LIGNE :=  '              },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       V_LIGNE := '             ]';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- EXT FIN----------------------
         
            
        
                if V_NB_CROSSREF_TRAITE = V_NB_CROSSREF THEN V_LIGNE :=  '        }';
                else V_LIGNE :=  '        },';
                end if;

        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            
       END LOOP;
       --V_LIGNE := '    ]';      ---------   virgule ajoutee dans la boucle suivant 
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null


            --------------------- CROSSREF FIN----------------------




    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CUSTOMER_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_CUSTOMER.TECH_ID);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'EXPORT_CUSTOMER_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'EXPORT_CUSTOMER_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END EXPORT_CUSTOMER_JSON;









end mktqads;
