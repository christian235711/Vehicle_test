create or replace PACKAGE BODY                                                                                "MKTQA_CALCUL_CAP_UK" AS





  FUNCTION UPDATE_vehicle_crossRefs_VP (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
    /*   V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date; */
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_crossRefs_VP Is
select 
veh.itemDirectoryVehicleRef AS itemDirectoryVehicleRef,
cap.titre AS titre
from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_CodeConstr_VP cap
where  substr(veh.itemDirectoryVehicleRef, 1, length(veh.itemDirectoryVehicleRef) -8) = 'P' || cap.CAP_ID  || substr(cap.LATEST_MODEL_YEAR, 0,4)  ||  (( cap.LATEST_MODEL_YEAR - floor(cap.LATEST_MODEL_YEAR) )*4+1) 
and  veh.vehicule_type = 'VP'
 ORDER BY CAP_ID, LATEST_MODEL_YEAR, EFFECTIVE_DATE, TITRE DESC;
          

 
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_vehicle_crossRefs_VP','##Ajout du code constructeur à la table MKTREF.MKTQT_vehicle_crossRefs ##');
  
          
        /*SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual; */


  FOR REC_crossRefs_VP IN C_crossRefs_VP
  LOOP

      
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

    
				Update  MKTREF.MKTQT_vehicle
        Set        
          code_constr          =      REC_crossRefs_VP.titre 

        where itemDirectoryVehicleRef          =      REC_crossRefs_VP.itemDirectoryVehicleRef  ;

        V_UPD := V_UPD + 1;
        
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_vehicle_crossRefs_VP','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'UPDATE_vehicle_crossRefs_VP','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END UPDATE_vehicle_crossRefs_VP;
  



  FUNCTION UPDATE_vehicle_crossRefs_VU (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
    /*   V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date; */
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_crossRefs_VU Is
select 
veh.itemDirectoryVehicleRef AS itemDirectoryVehicleRef,
cap.titre AS titre
from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_CodeConstr_VU cap
where  substr(veh.itemDirectoryVehicleRef, 1, length(veh.itemDirectoryVehicleRef)-8) = 'C' || cap.CAP_ID  || substr(cap.LATEST_MODEL_YEAR, 0,4)  ||  (( cap.LATEST_MODEL_YEAR - floor(cap.LATEST_MODEL_YEAR) )*4+1) 
and  veh.vehicule_type = 'VU'
 ORDER BY CAP_ID, LATEST_MODEL_YEAR, EFFECTIVE_DATE, TITRE DESC;
          

 
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_vehicle_crossRefs_VU','##Ajout du code constructeur à la table MKTREF.MKTQT_vehicle_crossRefs ##');
  
          
        /*SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual; */


  FOR REC_crossRefs_VU IN C_crossRefs_VU
  LOOP

      
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

    
				Update  MKTREF.MKTQT_vehicle
        Set        
          code_constr          =      REC_crossRefs_VU.titre 

        where itemDirectoryVehicleRef          =      REC_crossRefs_VU.itemDirectoryVehicleRef  ;

        V_UPD := V_UPD + 1;
        
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_vehicle_crossRefs_VU','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

  
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'UPDATE_vehicle_crossRefs_VU','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END UPDATE_vehicle_crossRefs_VU;
  
-----------------------------------------------------------------
-----------------------------------------------------------------
  
  FUNCTION UPDATE_veh_update (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


   -- V_maximumPowerKW_VP  NUMBER;
   -- V_maximumPowerKW_VU  NUMBER;

 Cursor C_maximumPowerDin_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maximumPowerDin
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 21
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 21 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

 Cursor C_generation_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuestring as generation
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuestring is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 471
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 471 and C.valuestring is not null and veh.validitystartdate >=C.effectivefrom)
;

 Cursor C_height_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as height
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 34
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 34 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;
   
Cursor C_length_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as length
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 4
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 4 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_co2EmissionWLTP_173_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as co2EmissionWLTP_173
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP' and veh.energy1Code in ('D','Y','P','F','G','H','B')
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 173
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 173 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_co2EmissionWLTP_285_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as co2EmissionWLTP_285
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP' and veh.energy1Code in ('Z','A','R','X')
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 285
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 285 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_maximumPowerKW_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maximumPowerKW
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 48
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 48 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_cubicCapacity_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as cubicCapacity
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 20
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 20 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_seatNumber_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as seatNumber
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 47
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 47 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpLowFuelConsumption_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpLowFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 184
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 184 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpMediumFuel_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpMediumFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 185
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 185 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpHighFuelConsumption_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpHighFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 186
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 186 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpExtraHigh_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpExtraHighConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 187
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 187 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpCombinedFuel_VP Is ----- wltpCombinedFuelConsumption
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpCombinedFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 188
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 188 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpElectricConsumption_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpElectricConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 164
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 164 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpElectricRange_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpElectricRange
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 165
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 165 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_kerbWeight_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as kerbWeight
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 3
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 3 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;


Cursor C_nbRapports_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        (case when tech.valuestring not in ('AUTOMATIC','N') then ( case  when substr(tech.valuestring, 2,1) ='S' then  substr(tech.valuestring, 1,1) else replace(substr(tech.valuestring, 1,2),' ','') end )  else null end) as nbRapports 
        --tech.valuefloat as nbRapports
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and (case when tech.valuestring not in ('AUTOMATIC','N') then ( case  when substr(tech.valuestring, 2,1) ='S' then  substr(tech.valuestring, 1,1) else replace(substr(tech.valuestring, 1,2),' ','') end )  else null end) is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 66
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 66 
and (case when C.valuestring not in ('AUTOMATIC','N') then ( case  when substr(C.valuestring, 2,1) ='S' then  substr(C.valuestring, 1,1) else replace(substr(C.valuestring, 1,2),' ','') end )  else null end) is not null 
and veh.validitystartdate >=C.effectivefrom)
;



Cursor C_batteryCapacity_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as batteryCapacity
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 163
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 163 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_maxLadenWeight_VP Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maxLadenWeight
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VP tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VP'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 14
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VP C where C.ID=veh.TECH_ID  and c.techcode = 14 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_maximumPowerDin_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maximumPowerDin
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 21
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 21 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;


 Cursor C_generation_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuestring as generation
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuestring is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 477
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 477 and C.valuestring is not null and veh.validitystartdate >=C.effectivefrom)
;

 Cursor C_height_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as height
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 34
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 34 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;
   
Cursor C_length_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as length
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 4
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 4 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_co2EmissionWLTP_272_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as co2EmissionWLTP_272
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU' and veh.energy1Code in ('Z','A','R','X')
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 272
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 272 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_co2EmissionWLTP_239_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as co2EmissionWLTP_239
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU' and veh.energy1Code in ('D','Y','P','F','G','H','B')
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 239
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 239 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_maximumPowerKW_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maximumPowerKW
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 48
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 48 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_cubicCapacity_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as cubicCapacity
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 20
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 20 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_seatNumber_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as seatNumber
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 47
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 47 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpLowFuelConsumption_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpLowFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 299
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 299 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpMediumFuel_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpMediumFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 302
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 302 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpHighFuelConsumption_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpHighFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 296
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 296 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpExtraHigh_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpExtraHighConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 293
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 293 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpCombinedFuel_VU Is ----- wltpCombinedFuelConsumption
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpCombinedFuelConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 290
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 290 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpElectricConsumption_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpElectricConsumption
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 166
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 166 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_wltpElectricRange_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as wltpElectricRange
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 167
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 167 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_kerbWeight_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as kerbWeight
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 3
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 3 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;


Cursor C_nbRapports_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        (case when tech.valuestring not in ('AUTOMATIC','N') then ( case  when substr(tech.valuestring, 2,1) ='S' then  substr(tech.valuestring, 1,1) else replace(substr(tech.valuestring, 1,2),' ','') end )  else null end) as nbRapports 
        --tech.valuefloat as nbRapports
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and (case when tech.valuestring not in ('AUTOMATIC','N') then ( case  when substr(tech.valuestring, 2,1) ='S' then  substr(tech.valuestring, 1,1) else replace(substr(tech.valuestring, 1,2),' ','') end )  else null end) is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 66
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 66 
and (case when C.valuestring not in ('AUTOMATIC','N') then ( case  when substr(C.valuestring, 2,1) ='S' then  substr(C.valuestring, 1,1) else replace(substr(C.valuestring, 1,2),' ','') end )  else null end) is not null 
and veh.validitystartdate >=C.effectivefrom)
;



Cursor C_batteryCapacity_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as batteryCapacity
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 152
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 152 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;

Cursor C_maxLadenWeight_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as maxLadenWeight
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 14
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 14 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;


Cursor C_payLoad_VU Is
select distinct
        veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,
        tech.valuefloat as payLoad
FROM MKTREF.MKTQT_VEHICLE veh,
     MKTREF.MKTQT_NVDTechnical_VU tech 
where veh.TECH_ID = tech.ID and veh.VEHICULE_TYPE = 'VU'
and tech.valuefloat is not null 
and veh.validitystartdate >=tech.effectivefrom and tech.techcode = 32
and tech.effectivefrom = (select max(c.effectivefrom) from MKTQT_NVDTechnical_VU C where C.ID=veh.TECH_ID  and c.techcode = 32 and C.valuefloat is not null and veh.validitystartdate >=C.effectivefrom)
;



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','## Update de la table MKTREF.MKTQT_vehicle ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'UPDATE_veh_update','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_maximumPowerDin_VP IN C_maximumPowerDin_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
maximumPowerDin  = REC_maximumPowerDin_VP.maximumPowerDin 

        where  itemDirectoryVehicleRef  = REC_maximumPowerDin_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maximumPowerDin','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_maximumPowerDin_VU IN C_maximumPowerDin_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
maximumPowerDin  = REC_maximumPowerDin_VU.maximumPowerDin 

        where itemDirectoryVehicleRef  = REC_maximumPowerDin_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maximumPowerDin','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_generation_VP IN C_generation_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
        
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
generation  = REC_generation_VP.generation 

        where  itemDirectoryVehicleRef  = REC_generation_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'generation','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_generation_VU IN C_generation_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;


				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
generation  = REC_generation_VU.generation 

        where itemDirectoryVehicleRef  = REC_generation_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'generation','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
    RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
  FOR REC_height_VP IN C_height_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
height  = REC_height_VP.height 

        where  itemDirectoryVehicleRef  = REC_height_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'height','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_height_VU IN C_height_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
height  = REC_height_VU.height 

        where itemDirectoryVehicleRef  = REC_height_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'height','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
  FOR REC_length_VP IN C_length_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;


				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
length  = REC_length_VP.length 

        where  itemDirectoryVehicleRef  = REC_length_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'length','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_length_VU IN C_length_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
length  = REC_length_VU.length 

        where itemDirectoryVehicleRef  = REC_length_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'length','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
  FOR REC_co2EmissionWLTP_173_VP IN C_co2EmissionWLTP_173_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
co2EmissionWLTP  = REC_co2EmissionWLTP_173_VP.co2EmissionWLTP_173 

        where  itemDirectoryVehicleRef  = REC_co2EmissionWLTP_173_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'co2EmissionWLTP','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_co2EmissionWLTP_272_VU IN C_co2EmissionWLTP_272_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
co2EmissionWLTP  = REC_co2EmissionWLTP_272_VU.co2EmissionWLTP_272 

        where itemDirectoryVehicleRef  = REC_co2EmissionWLTP_272_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'co2EmissionWLTP','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
            
     FOR REC_co2EmissionWLTP_285_VP IN C_co2EmissionWLTP_285_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
co2EmissionWLTP  = REC_co2EmissionWLTP_285_VP.co2EmissionWLTP_285 

        where  itemDirectoryVehicleRef  = REC_co2EmissionWLTP_285_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'co2EmissionWLTP','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_co2EmissionWLTP_239_VU IN C_co2EmissionWLTP_239_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
co2EmissionWLTP  = REC_co2EmissionWLTP_239_VU.co2EmissionWLTP_239 

        where itemDirectoryVehicleRef  = REC_co2EmissionWLTP_239_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'co2EmissionWLTP','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_maximumPowerKW_VP IN C_maximumPowerKW_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
      --  V_maximumPowerKW_VP := REC_maximumPowerKW_VP.maximumPowerKW;
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
maximumPowerKW  = REC_maximumPowerKW_VP.maximumPowerKW

        where  itemDirectoryVehicleRef  = REC_maximumPowerKW_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maximumPowerKW','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_maximumPowerKW_VU IN C_maximumPowerKW_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
       -- V_maximumPowerKW_VU := REC_maximumPowerKW_VU.maximumPowerKW ;
        
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
maximumPowerKW  = REC_maximumPowerKW_VU.maximumPowerKW 

        where itemDirectoryVehicleRef  = REC_maximumPowerKW_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maximumPowerKW','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_cubicCapacity_VP IN C_cubicCapacity_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
  
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
cubicCapacity  = REC_cubicCapacity_VP.cubicCapacity 

        where  itemDirectoryVehicleRef  = REC_cubicCapacity_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'cubicCapacity','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_cubicCapacity_VU IN C_cubicCapacity_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
cubicCapacity  = REC_cubicCapacity_VU.cubicCapacity 

        where itemDirectoryVehicleRef  = REC_cubicCapacity_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'cubicCapacity','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_seatNumber_VP IN C_seatNumber_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
seatNumber  = REC_seatNumber_VP.seatNumber 

        where  itemDirectoryVehicleRef  = REC_seatNumber_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'seatNumber','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_seatNumber_VU IN C_seatNumber_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
seatNumber  = REC_seatNumber_VU.seatNumber 

        where itemDirectoryVehicleRef  = REC_seatNumber_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'seatNumber','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_wltpLowFuelConsumption_VP IN C_wltpLowFuelConsumption_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpLowFuelConsumption  = REC_wltpLowFuelConsumption_VP.wltpLowFuelConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpLowFuelConsumption_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpLowFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpLowFuelConsumption_VU IN C_wltpLowFuelConsumption_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
    
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpLowFuelConsumption  = REC_wltpLowFuelConsumption_VU.wltpLowFuelConsumption 

        where itemDirectoryVehicleRef  = REC_wltpLowFuelConsumption_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpLowFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
    RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_wltpMediumFuel_VP IN C_wltpMediumFuel_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpMediumFuelConsumption  = REC_wltpMediumFuel_VP.wltpMediumFuelConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpMediumFuel_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpMediumFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpMediumFuel_VU IN C_wltpMediumFuel_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
  
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpMediumFuelConsumption  = REC_wltpMediumFuel_VU.wltpMediumFuelConsumption 

        where itemDirectoryVehicleRef  = REC_wltpMediumFuel_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpMediumFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_wltpHighFuelConsumption_VP IN C_wltpHighFuelConsumption_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
    
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpHighFuelConsumption  = REC_wltpHighFuelConsumption_VP.wltpHighFuelConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpHighFuelConsumption_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpHighFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpHighFuelConsumption_VU IN C_wltpHighFuelConsumption_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpHighFuelConsumption  = REC_wltpHighFuelConsumption_VU.wltpHighFuelConsumption 

        where itemDirectoryVehicleRef  = REC_wltpHighFuelConsumption_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpHighFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_wltpExtraHigh_VP IN C_wltpExtraHigh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
      
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpExtraHighConsumption  = REC_wltpExtraHigh_VP.wltpExtraHighConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpExtraHigh_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpExtraHighConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpExtraHigh_VU IN C_wltpExtraHigh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpExtraHighConsumption  = REC_wltpExtraHigh_VU.wltpExtraHighConsumption 

        where itemDirectoryVehicleRef  = REC_wltpExtraHigh_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpExtraHighConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
    RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_wltpCombinedFuel_VP IN C_wltpCombinedFuel_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
    
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpCombinedFuelConsumption  = REC_wltpCombinedFuel_VP.wltpCombinedFuelConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpCombinedFuel_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpCombinedFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpCombinedFuel_VU IN C_wltpCombinedFuel_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpCombinedFuelConsumption  = REC_wltpCombinedFuel_VU.wltpCombinedFuelConsumption 

        where itemDirectoryVehicleRef  = REC_wltpCombinedFuel_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpCombinedFuelConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_wltpElectricConsumption_VP IN C_wltpElectricConsumption_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
       
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpElectricConsumption  = REC_wltpElectricConsumption_VP.wltpElectricConsumption 

        where  itemDirectoryVehicleRef  = REC_wltpElectricConsumption_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpElectricConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpElectricConsumption_VU IN C_wltpElectricConsumption_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
      
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpElectricConsumption  = REC_wltpElectricConsumption_VU.wltpElectricConsumption 

        where itemDirectoryVehicleRef  = REC_wltpElectricConsumption_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpElectricConsumption','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_wltpElectricRange_VP IN C_wltpElectricRange_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
wltpElectricRange  = REC_wltpElectricRange_VP.wltpElectricRange 

        where  itemDirectoryVehicleRef  = REC_wltpElectricRange_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpElectricRange','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_wltpElectricRange_VU IN C_wltpElectricRange_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
      
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
wltpElectricRange  = REC_wltpElectricRange_VU.wltpElectricRange 

        where itemDirectoryVehicleRef  = REC_wltpElectricRange_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'wltpElectricRange','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_kerbWeight_VP IN C_kerbWeight_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
       
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
kerbWeight  = REC_kerbWeight_VP.kerbWeight 

        where  itemDirectoryVehicleRef  = REC_kerbWeight_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'kerbWeight','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_kerbWeight_VU IN C_kerbWeight_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
kerbWeight  = REC_kerbWeight_VU.kerbWeight 

        where itemDirectoryVehicleRef  = REC_kerbWeight_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'kerbWeight','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
    V_Upd := 0;
    RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_nbRapports_VP IN C_nbRapports_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
nbRapports  = REC_nbRapports_VP.nbRapports 

        where  itemDirectoryVehicleRef  = REC_nbRapports_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'nbRapports','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_nbRapports_VU IN C_nbRapports_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
   
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
nbRapports  = REC_nbRapports_VU.nbRapports 

        where itemDirectoryVehicleRef  = REC_nbRapports_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'nbRapports','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
   
     FOR REC_batteryCapacity_VP IN C_batteryCapacity_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
batteryCapacity  = REC_batteryCapacity_VP.batteryCapacity 

        where  itemDirectoryVehicleRef  = REC_batteryCapacity_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'batteryCapacity','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_batteryCapacity_VU IN C_batteryCapacity_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
       
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
batteryCapacity  = REC_batteryCapacity_VU.batteryCapacity 

        where itemDirectoryVehicleRef  = REC_batteryCapacity_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'batteryCapacity','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
     V_Upd := 0;
     RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
     
     FOR REC_maxLadenWeight_VP IN C_maxLadenWeight_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
     
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
maxLadenWeight  = REC_maxLadenWeight_VP.maxLadenWeight 

        where  itemDirectoryVehicleRef  = REC_maxLadenWeight_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maxLadenWeight','Nombre de mises a jour : '||TO_CHAR(V_UPD));

   
   -------------------------------VU  
  
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_maxLadenWeight_VU IN C_maxLadenWeight_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        

				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
maxLadenWeight  = REC_maxLadenWeight_VU.maxLadenWeight 

        where itemDirectoryVehicleRef  = REC_maxLadenWeight_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maxLadenWeight','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------

   -------------------------------VU  
   
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_payLoad_VU IN C_payLoad_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD, 100)=0 THEN COMMIT;
        END IF;
        
      
				Update  MKTREF.MKTQT_vehicle
        Set        
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
payLoad  = REC_payLoad_VU.payLoad 

        where itemDirectoryVehicleRef  = REC_payLoad_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'payLoad','Nombre de mises a jour : '||TO_CHAR(V_UPD));
   
   ----------------------------------------------------------------------------------------------------
   
   
   ------- JIRA 24 PARTIE II (BLVD)
   
      V_Upd := 0;
   
  BEGIN 
       SELECT COUNT(*)
       INTO   V_Upd
       FROM   MKTREF.MKTQT_vehicle where maximumPowerDin is null  ;
  EXCEPTION WHEN OTHERS THEN
       V_Upd := 0;
  END;
   
   DELETE FROM MKTREF.MKTQT_vehicle where maximumPowerDin is null;
   
   
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'maximumPowerDin is null','suppression : '||TO_CHAR(V_UPD));
      
   
   
   
   
   
   
   
   -------------------------------------------------------------------------------------------------------
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_veh_update','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;
    
  END UPDATE_veh_update;



	
FUNCTION EXPORT_VEHICLE_TXT(NOMLOG	VARCHAR2, P_DATE_TRAI	DATE, P_PATH    VARCHAR2, P_FILENAME  VARCHAR2) RETURN NUMBER AS
                               
V_ERR                NUMBER := 0;
N_SAUV               NUMBER:=0;
v_ligne         VARCHAR2(4000);
file_id_cvs     utl_file.file_type;
file_name       VARCHAR2(30);

FILE_ID   UTL_FILE.FILE_TYPE;
RES       NUMBER := 0;
--V_NB_BO_ATTENDU NUMBER(2) := 0;
--V_NB_BO_PA      NUMBER(2) := 0;
--V_PASSAGE        NUMBER(2)  := NULL;

Cursor C_REC Is 
     select 
          null as Vehicle_id,
          blvd as blvd,
          versionLabelLocalLong as label_blvd,
          'GB' as country,
          brandCode as brand,
          CODE_CONSTR as vehicle_manufacturer_code,   ----ajout du code constructeur de la table crossrefs
          capcode as cap_code ,
          tech_id as cap_id ,
          null as option_code_manu,
          null as option_code_jato,
          null as option_label
          from  MKTREF.MKTQT_vehicle 
          where corporategrouplabel = 'STELLANTIS';  
          ---and nvl(veh.VALIDITYENDDATE, SYSDATE) >= add_months(SYSDATE, -12)
                    
         

/*
     select 
          null as Vehicle_id,
          crossrefs.identifier as blvd,
          veh.versionLabelLocalLong as label_blvd,
          'GB' as country,
          veh.brandCode as brand,
          codeconstr.identifier as vehicle_manufacturer_code,   ----ajout du code constructeur de la table crossrefs
          veh.capcode as cap_code ,
          veh.tech_id as cap_id ,
          null as option_code_manu,
          null as option_code_jato,
          null as option_label
          from  MKTREF.MKTQT_vehicle veh,
                MKTREF.MKTQT_vehicle_crossRefs crossrefs,
                MKTREF.MKTQT_vehicle_crossRefs codeconstr
          where veh.itemDirectoryVehicleRef = crossrefs.itemDirectoryVehicleRef
          ---and nvl(veh.VALIDITYENDDATE, SYSDATE) >= add_months(SYSDATE, -12)
          
          and crossrefs.identifierType = 'BLVD'
          and crossrefs.identifier is not null
          
          and crossrefs.itemdirectoryvehicleref = codeconstr.itemdirectoryvehicleref (+)
          and codeconstr.identifierType = 'CONSTR' 
          
          and veh.corporategrouplabel = 'STELLANTIS';  
*/

	BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path,file_name);
  RES     := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_VEHICLE_TXT', ' ## MISE A DISPOSITION du fichier ##');

 V_LIGNE := 'Vehicle_id;blvd;label_blvd;country;brand;vehicle_manufacturer_code;cap_code;cap_id;option_code_manu;option_code_jato;option_label';
 
  RES := MKT.MKTQAUT.F_WRITE_CVS (file_id_cvs, V_LIGNE);
  FOR REC IN C_REC LOOP 

      BEGIN
           IF V_ERR=1 THEN
              EXIT;
           END IF;
                       V_LIGNE := 
                              REC.Vehicle_id|| ';' ||
                              REC.blvd|| ';' ||
                              REC.label_blvd || ';' ||
                              REC.country|| ';' ||
                              REC.brand|| ';' ||
                              REC.vehicle_manufacturer_code|| ';' ||
                              REC.cap_code || ';' ||
                              REC.cap_id || ';' ||
                              REC.option_code_manu|| ';' ||
                              REC.option_code_jato|| ';' ||
                              REC.option_label ;
                       
  
  res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, v_ligne);

            N_SAUV := N_SAUV + 1;
			EXCEPTION
      WHEN OTHERS THEN
                COMMIT;
                V_ERR  := 1;
                res     := MKT.MKTQAUT.F_WRITE(file_id,
                                          'EXPORT_VEHCULE_TXT ',
                                         'Message Erreur pl/sql : ' ||
                                         SQLERRM );
                                         RETURN V_ERR;
      END;
  END LOOP;

      
	UTL_FILE.FCLOSE(file_id_cvs);

   res := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_VEHICLE_TXT', 'Nombre de lignes ?crites :' || N_SAUV);


                        UTL_FILE.FCLOSE(file_id);

    RETURN V_ERR;

EXCEPTION WHEN OTHERS THEN
COMMIT;
          V_ERR  := 1;

          res     := MKT.MKTQAUT.F_WRITE(file_id,
                                          'EXPORT_VEHCULE_TXT',
                                         'Message Erreur pl/sql : ' ||
                                         SQLERRM);
          RETURN V_ERR;  
    
END EXPORT_VEHICLE_TXT;



	
FUNCTION EXPORT_NOMENCLATURE_TXT(NOMLOG	VARCHAR2, P_DATE_TRAI	DATE, P_PATH    VARCHAR2, P_FILENAME  VARCHAR2) RETURN NUMBER AS
                               
V_ERR                NUMBER := 0;
N_SAUV               NUMBER:=0;
v_ligne         VARCHAR2(4000);
file_id_cvs     utl_file.file_type;
file_name       VARCHAR2(30);

FILE_ID   UTL_FILE.FILE_TYPE;
RES       NUMBER := 0;
--V_NB_BO_ATTENDU NUMBER(2) := 0;
--V_NB_BO_PA      NUMBER(2) := 0;
--V_PASSAGE        NUMBER(2)  := NULL;

Cursor C_REC Is 
     select 
          ENTITY as entity,
          CODE as code,
          STARTVALIDITYDATE as validity_start_date ,
          ENDVALIDITYDATE as validity_end_date,
          (case when PARENT = ' ' then null else PARENT end) as parent,
          (case when DESCRIPTION_LANGUAGE = ' ' then null else DESCRIPTION_LANGUAGE end) as description_language,
          DESCRIPTION_LABEL as description_label,
          NULL as crossref_type_code ,
          NULL as crossref_country,
          NULL as crossref_code,
          (case when TRANSLATION_LANGUAGE = ' ' then null else TRANSLATION_LANGUAGE end) as translation_language,
          TRANSLATION_LABEL as translation
          from mktqt_nomenclature;  
           

	BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path,file_name);
  RES     := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_NOMENCLATURE_TXT', ' ## MISE A DISPOSITION du fichier ##');

 V_LIGNE := 'entity;code;validity_start_date ;validity_end_date;parent;description_language;description_label;crossref_type_code ;crossref_country;crossref_code;translation_language;translation';
  RES := MKT.MKTQAUT.F_WRITE_CVS (file_id_cvs, V_LIGNE);
  FOR REC IN C_REC LOOP 

      BEGIN
           IF V_ERR=1 THEN
              EXIT;
           END IF;
                       V_LIGNE := 
          REC.entity|| ';' ||
          REC.code|| ';' ||
          REC.validity_start_date || ';' ||
          REC.validity_end_date|| ';' ||
          REC.parent|| ';' ||
          REC.description_language|| ';' ||
          REC.description_label|| ';' ||
          REC.crossref_type_code || ';' ||
          REC.crossref_country|| ';' ||
          REC.crossref_code|| ';' ||
          REC.translation_language|| ';' ||
          REC.translation ;
                       
  
  res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, v_ligne);

            N_SAUV := N_SAUV + 1;
			EXCEPTION
      WHEN OTHERS THEN
                COMMIT;
                V_ERR  := 1;
                res     := MKT.MKTQAUT.F_WRITE(file_id,
                                          'EXPORT_NOMENCLATURE_TXT ',
                                         'Message Erreur pl/sql : ' ||
                                         SQLERRM );
                                         RETURN V_ERR;
      END;
  END LOOP;

      
	UTL_FILE.FCLOSE(file_id_cvs);

   res := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_NOMENCLATURE_TXT', 'Nombre de lignes ?crites :' || N_SAUV);


                        UTL_FILE.FCLOSE(file_id);

    RETURN V_ERR;

EXCEPTION WHEN OTHERS THEN
COMMIT;
          V_ERR  := 1;

          res     := MKT.MKTQAUT.F_WRITE(file_id,
                                          'EXPORT_NOMENCLATURE_TXT',
                                         'Message Erreur pl/sql : ' ||
                                         SQLERRM);
          RETURN V_ERR;   
    
END EXPORT_NOMENCLATURE_TXT;


FUNCTION FONC_EXPORT_VEHICLE_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    
    V_NB_ENREG  NUMBER := 0;
    V_NB_CROSSREFS NUMBER(3);
    V_NB_PRICINGS NUMBER(5);
    V_NB_OPTIONS NUMBER(5);
    V_NB_OPTIONSLABELS NUMBER(5);
    V_NB_OPTIONSPRICINGS NUMBER(5);
    V_NB_BASEEQUIPMENTS NUMBER(5);
    V_NB_AGGREGATEDOPT NUMBER(5); ---JIRA 21
    
    V_NB_ENREG_TRAITE NUMBER := 0;
    V_NB_CROSSREFS_TRAITE NUMBER := 0;
    V_NB_PRICINGS_TRAITE NUMBER := 0;
    V_NB_OPTIONS_TRAITE NUMBER := 0;
    V_NB_OPTIONSLABELS_TRAITE NUMBER := 0;
    V_NB_OPTIONSPRICINGS_TRAITE NUMBER := 0;
    V_NB_BASEEQUIPMENTS_TRAITE NUMBER := 0;
    V_NB_AGGREGATEDOPT_TRAITE NUMBER := 0; ---JIRA 21

-----------------------------------VEHICLE-----------------------------
CURSOR C_mktqt_vehicle IS
select 
tech_id as tech_id ,
tech_dateExtraction as tech_dateExtraction ,
tech_dateInsertion as tech_dateInsertion ,
countryCode as countryCode ,
itemDirectoryVehicleRef as itemDirectoryVehicleRef ,
versionState as versionState ,
TO_CHAR(validityStartDate,'YYYY-MM-DD') as validityStartDate,
(CASE WHEN TO_CHAR(validityEndDate,'YYYY-MM-DD') is null then '9999-12-31' else TO_CHAR(validityEndDate,'YYYY-MM-DD')  end) as validityEndDate,
corporateGroupCode as corporateGroupCode ,
corporateGroupLabel as corporateGroupLabel ,
brandCode as brandCode ,
brandLabel as brandLabel ,
familyCode as familyCode ,
familyLabel as familyLabel ,
generation as generation ,
versionYear as versionYear ,
versionTrimester as versionTrimester ,
segmentMarketingCode as segmentMarketingCode ,
faceLiftGeneration as faceLiftGeneration ,
kindCode as kindCode ,
bodyCode as bodyCode ,
height as height ,
length as length ,
sportinessFlag as sportinessFlag ,
co2EmissionNEDC as co2EmissionNEDC ,
co2EmissionWLTP as co2EmissionWLTP ,
co2ClassCode as co2ClassCode ,
fiscalHorsePower as fiscalHorsePower ,
maximumPowerDin as maximumPowerDin ,
maximumPowerKW as maximumPowerKW ,
energy1Code as energy1Code ,
energy1DetailCode as energy1DetailCode ,
energy2Code as energy2Code ,
energy2DetailCode as energy2DetailCode ,
energyCombCode as energyCombCode ,
motorisation as motorisation ,
motorisationComb as motorisationComb ,
cubicCapacity as cubicCapacity ,
transmissionTypeCode as transmissionTypeCode ,
gearBoxTypeCode as gearBoxTypeCode ,
nbRapports as nbRapports ,
typeVariantVersion as typeVariantVersion ,
trimLevel as trimLevel ,
seatNumber as seatNumber ,
doorNumber as doorNumber ,
nedcCombineFuelConsumption as nedcCombineFuelConsumption ,
nedcExtraUrbanFuelConsumption as nedcExtraUrbanFuelConsumption ,
nedcUrbanFuelConsumption as nedcUrbanFuelConsumption ,
wltpLowFuelConsumption as wltpLowFuelConsumption ,
wltpMediumFuelConsumption as wltpMediumFuelConsumption ,
wltpHighFuelConsumption as wltpHighFuelConsumption ,
wltpExtraHighConsumption as wltpExtraHighConsumption ,
wltpCombinedFuelConsumption as wltpCombinedFuelConsumption ,
wltpElectricConsumption as wltpElectricConsumption ,
wltpElectricRange as wltpElectricRange ,
batteryCapacity as batteryCapacity ,
maxLadenWeight as maxLadenWeight ,
kerbWeight as kerbWeight ,
payLoad as payLoad ,
hasTelematicBox as hasTelematicBox ,
catalogueDetail as catalogueDetail ,
tsnNumber as tsnNumber ,
wltpFlag as wltpFlag ,
completenessFlag as completenessFlag ,
validationUser as validationUser ,
validationDate as validationDate ,
updateUser as updateUser ,
updateDate as updateDate ,
purchaseCondition as purchaseCondition ,
designBases as designBases ,
designCustomerShip as designCustomerShip ,
versionLabelGlobalShort as versionLabelGlobalShort ,
versionLabelGlobalLong as versionLabelGlobalLong ,
versionLabelLocalShort as versionLabelLocalShort ,
versionLabelLocalLong as versionLabelLocalLong ,
VEHICULE_TYPE as VEHICULE_TYPE


from MKTREF.MKTQT_vehicle;
---and nvl(VALIDITYENDDATE, SYSDATE) >= add_months(SYSDATE, -12)
/*
where  brandcode is not null 
and brandLabel is not null 
and familyLabel is not null 
and KINDCODE is not null 
and bodyCode is not null 
and TRIM is not null 
and energyCombCode is not null 
and maximumPowerDin is not null 
and transmissionTypeCode is not null 
and gearBoxTypeCode is not null 
and year_trimester is not null
*/
---and DIMENSIONS != '  ' 
---and  rownum <= 500;   ---------
--where itemDirectoryVehicleRef in ('P7460520160401','P746419930101','P824919930901', 'P4402020090629', 'P4413420100601','L1044320070901' ) 
--WHERE TECH_ID = '74606';
-----------------------------------CROSSREFS-----------------------------
CURSOR C_MKTQT_VEHICLE_CROSSREFS (P_itemDirectoryVehicleRef  VARCHAR2) IS
SELECT * FROM MKTREF.MKTQT_VEHICLE_CROSSREFS CROSSREFS
WHERE CROSSREFS.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef 
;

/*
select * from MKTQT_vehicle_crossrefs CROSSREFS
where exists 
(select * 
from MKTQT_vehicle_crossrefs CROSSREFS_EXISTS 
where CROSSREFS_EXISTS.identifierType = 'BLVD' and CROSSREFS_EXISTS.identifier is not null and CROSSREFS_EXISTS.itemDirectoryVehicleRef=P_itemDirectoryVehicleRef)
and CROSSREFS.itemDirectoryVehicleRef=P_itemDirectoryVehicleRef;
*/

-----------------------------------PRICINGS-----------------------------
CURSOR C_MKTQT_VEHICLE_PRICINGS (P_itemDirectoryVehicleRef  VARCHAR2) IS 
select 
tariffAreaCode as tariffAreaCode,
priceCode as priceCode,
priceType as priceType,
priceTypeCustomer as priceTypeCustomer,
TO_CHAR(priceStartDate,'YYYY-MM-DD') as priceStartDate,
(CASE WHEN TO_CHAR(priceEndDate,'YYYY-MM-DD') is null then '9999-12-31' else TO_CHAR(priceEndDate,'YYYY-MM-DD')  end) as priceEndDate,
vatAmount as vatAmount,
priceET as priceET,
priceIT as priceIT,
priceIncludeVAT as priceIncludeVAT,
currency as currency,
immAmount as immAmount,
immRate as immRate,
novaAmount as novaAmount,
novaRate as novaRate,
priceWithoutOtrCostIT as priceWithoutOtrCostIT,
priceWithoutOtrCostET as priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT as priceWithoutOtrCostIncludeVAT

from MKTREF.MKTQT_VEHICLE_PRICINGS PRICINGS
WHERE PRICINGS.itemDirectoryVehicleRef =  P_itemDirectoryVehicleRef ;
-----------------------------------OPTIONS-----------------------------  DANS LA TABLE MKTQT_VEHICLE_OPTIONS, ON A AUSSI LES DONNEES de OPTIONSLABELS et OPTIONSPRICINGS
CURSOR C_MKTQT_VEHICLE_OPTIONS(P_itemDirectoryVehicleRef VARCHAR2 ) IS
SELECT distinct
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
code as code,
constructorCode as constructorCode,
typeCode as typeCode,
isPack as isPack,
isAgregated as isAgregated,
TO_CHAR(startDate,'YYYY-MM-DD') as startDate,
(CASE WHEN TO_CHAR(endDate,'YYYY-MM-DD') is null then '9999-12-31' else TO_CHAR(endDate,'YYYY-MM-DD')  end) as endDate,
startDate AS OptionStartDate
from MKTREF.MKTQT_VEHICLE_OPTIONS OPTIONS
WHERE OPTIONS.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef;
-----------------------------------OPTIONSLABELS-----------------------------
CURSOR C_MKTQT_OPTIONSLABELS(P_Code VARCHAR2, P_itemDirectoryVehicleRef VARCHAR2 ) IS
SELECT 
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
code as code,
language as language,
REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(labelShort, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), '') AS labelShort,
REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(labelLong, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), '') AS labelLong
FROM MKTREF.MKTQT_VEHICLE_OPTIONSLABELS OPTIONSLABELS
WHERE OPTIONSLABELS.Code = P_Code 
AND   OPTIONSLABELS.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef;
-----------------------------------OPTIONSPRICINGS-----------------------------
CURSOR C_MKTQT_OPTIONSPRICINGS (P_Code VARCHAR2, P_itemDirectoryVehicleRef VARCHAR2, P_pricebookStartDate DATE ) IS --- ajout P_pricebookStartDate 16 01 2023
SELECT 
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
code as code,
territorialityCode as territorialityCode,
pricebookCode as pricebookCode,
pricebookType as pricebookType,
pricebookTypeCustomer as pricebookTypeCustomer,
TO_CHAR(pricebookStartDate, 'YYYY-MM-DD') as pricebookStartDate,
(CASE WHEN TO_CHAR(pricebookEndDate,'YYYY-MM-DD') is null then '9999-12-31' else TO_CHAR(pricebookEndDate,'YYYY-MM-DD')  end) as pricebookEndDate,
vatAmount as vatAmount,
currency as currency,
priceET as priceET,
priceIT as priceIT,
priceIncludeVAT as priceIncludeVAT,
basePriceWithChargesET as basePriceWithChargesET,
basePriceWithChargesIT as basePriceWithChargesIT,
basePriceWithChargesIncludeVAT as basePriceWithChargesIncludeVAT
FROM MKTREF.MKTQT_VEHICLE_OPTIONSPRICINGS OPTIONSPRICINGS
WHERE OPTIONSPRICINGS.Code = P_Code
AND OPTIONSPRICINGS.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef
AND OPTIONSPRICINGS.pricebookStartDate = P_pricebookStartDate   --ajout 16 01 2023
;
-----------------------------------BASEEQUIPMENTS-----------------------------
CURSOR C_MKTQT_VEHICLE_BASEEQUIPMENTS (P_itemDirectoryVehicleRef VARCHAR2) IS
SELECT * FROM MKTREF.MKTQT_VEHICLE_BASEEQUIPMENTS BASEEQUIPMENTS
WHERE  BASEEQUIPMENTS.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef;
-----------------------------------AGGREGATEDOPT-----------------------------
CURSOR C_MKTQT_VEHICLE_AGGREGATEDOPT (P_itemDirectoryVehicleRef VARCHAR2) IS
SELECT * FROM MKTREF.MKTQT_VEHICLE_AGGREGATEDOPT AGGREGATEDOPT
WHERE  AGGREGATEDOPT.itemDirectoryVehicleRef = P_itemDirectoryVehicleRef;


BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'FONC_EXPORT_VEHICLE_JSON', ' ## EXPORT VEHICULE ' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);

 -----------------------------------VEHICLE-----------------------------
  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTREF.MKTQT_vehicle ;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;
        
      V_LIGNE := '[';   
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      FOR S_mktqt_vehicle IN C_mktqt_vehicle LOOP
      
      IF  MOD(V_NB_ENREG_TRAITE,1000) = 0 THEN  res := MKT.MKTQAUT.F_WRITE(FILE_ID, 'V_NB_ENREG_TRAITE :=', TO_CHAR(V_NB_ENREG_TRAITE)); END IF;
      
      IF  V_NB_ENREG_TRAITE > 0 THEN  V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); END IF; ---ajout a la fin de la boucle apres le 1 element
      
      V_NB_CROSSREFS_TRAITE := 0;
      V_NB_PRICINGS_TRAITE := 0;
      V_NB_OPTIONS_TRAITE := 0;
      V_NB_BASEEQUIPMENTS_TRAITE := 0;
      V_NB_AGGREGATEDOPT_TRAITE :=0;
      BEGIN   
              V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE+1;
              V_LIGNE := '{
"tech_id":"' || UPPER(REPLACE(S_mktqt_vehicle.tech_id, '"','')) || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

--"tech_dateExtraction":"' || S_mktqt_vehicle.tech_dateExtraction || '", 
--"tech_dateInsertion":"' || S_mktqt_vehicle.tech_dateInsertion || '", 

V_LIGNE := V_LIGNE || '"countryCode":"' || UPPER(REPLACE(S_mktqt_vehicle.countryCode, '"','')) || '",';
V_LIGNE := V_LIGNE || '"itemDirectoryVehicleRef":"' || UPPER(REPLACE(S_mktqt_vehicle.itemDirectoryVehicleRef, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


-----"versionState":"' || UPPER(REPLACE(S_mktqt_vehicle.versionState, '"','')) || '", 

V_LIGNE := V_LIGNE || '"validityStartDate":"' || S_mktqt_vehicle.validityStartDate || '",';
V_LIGNE := V_LIGNE || '"validityEndDate":"' || S_mktqt_vehicle.validityEndDate || '", ';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


----"corporateGroupCode":"' || UPPER(REPLACE(S_mktqt_vehicle.corporateGroupCode, '"','')) || '", 
IF S_mktqt_vehicle.corporateGroupLabel != ' ' THEN
V_LIGNE := V_LIGNE || '"corporateGroupLabel":"' ||  UPPER(REPLACE(S_mktqt_vehicle.corporateGroupLabel, '"','')) || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := V_LIGNE || '"brandCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.brandCode, '"','')) || '",';
V_LIGNE := V_LIGNE || '"brandLabel":"' ||  UPPER(REPLACE(S_mktqt_vehicle.brandLabel, '"','')) || '",';
V_LIGNE := V_LIGNE || '"familyCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.familyCode, '"','')) || '",';
V_LIGNE := V_LIGNE || '"familyLabel":"' ||  UPPER(REPLACE(S_mktqt_vehicle.familyLabel, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_mktqt_vehicle.generation is not null THEN
V_LIGNE := V_LIGNE || '"generation":"' || S_mktqt_vehicle.generation || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := V_LIGNE || '"versionYear":"' || S_mktqt_vehicle.versionYear || '",';
V_LIGNE := V_LIGNE || '"versionTrimester":"' || S_mktqt_vehicle.versionTrimester || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_mktqt_vehicle.segmentMarketingCode is not null THEN
V_LIGNE := V_LIGNE || '"segmentMarketingCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.segmentMarketingCode, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.faceLiftGeneration is not null THEN
V_LIGNE := V_LIGNE || '"faceLiftGeneration":"' || S_mktqt_vehicle.faceLiftGeneration || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := V_LIGNE || '"kindCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.kindCode, '"','')) || '",';
V_LIGNE := V_LIGNE || '"bodyCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.bodyCode, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);



IF S_mktqt_vehicle.height is not null THEN
V_LIGNE := V_LIGNE || '"height":"' || S_mktqt_vehicle.height || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.length is not null THEN
V_LIGNE := V_LIGNE || '"length":"' || S_mktqt_vehicle.length || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

----"sportinessFlag":"' ||  UPPER(REPLACE(S_mktqt_vehicle.sportinessFlag, '"','')) || '", 
-----"co2EmissionNEDC":"' || S_mktqt_vehicle.co2EmissionNEDC || '",

IF S_mktqt_vehicle.co2EmissionWLTP is not null THEN
V_LIGNE := V_LIGNE || '"co2EmissionWLTP":"' || S_mktqt_vehicle.co2EmissionWLTP || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

--"co2ClassCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.co2ClassCode, '"','')) || '", 
---"fiscalHorsePower":"' || S_mktqt_vehicle.fiscalHorsePower || '", 

IF S_mktqt_vehicle.maximumPowerDin is not null THEN
V_LIGNE := V_LIGNE || '"maximumPowerDin":"' || S_mktqt_vehicle.maximumPowerDin || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.maximumPowerKW is not null THEN
V_LIGNE := V_LIGNE || '"maximumPowerKW":"' || S_mktqt_vehicle.maximumPowerKW || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.energy1Code is not null THEN
V_LIGNE := V_LIGNE || '"energy1Code":"' || UPPER(REPLACE(S_mktqt_vehicle.energy1Code, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


----"energy1DetailCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.energy1DetailCode, '"','')) || '", 
----"energy2Code":"' ||  UPPER(REPLACE(S_mktqt_vehicle.energy2Code, '"','')) || '", 
----"energy2DetailCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.energy2DetailCode, '"','')) || '",

V_LIGNE := V_LIGNE || '"energyCombCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.energyCombCode, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


----"motorisation":"' ||  UPPER(REPLACE(S_mktqt_vehicle.motorisation, '"','')) || '", 
----"motorisationComb":"' ||  UPPER(REPLACE(S_mktqt_vehicle.motorisationComb, '"','')) || '", 
IF S_mktqt_vehicle.cubicCapacity is not null THEN
V_LIGNE := V_LIGNE || '"cubicCapacity":"' || S_mktqt_vehicle.cubicCapacity || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.transmissionTypeCode is not null THEN
V_LIGNE := V_LIGNE || '"transmissionTypeCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.transmissionTypeCode, '"','')) || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := V_LIGNE || '"gearBoxTypeCode":"' ||  UPPER(REPLACE(S_mktqt_vehicle.gearBoxTypeCode, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

IF S_mktqt_vehicle.nbRapports is not null THEN
V_LIGNE := V_LIGNE || '"nbRapports":"' || S_mktqt_vehicle.nbRapports || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

-----------"typeVariantVersion":"' ||  UPPER(REPLACE(S_mktqt_vehicle.typeVariantVersion, '"','')) || '",


IF S_mktqt_vehicle.trimLevel is not null THEN
V_LIGNE := V_LIGNE || '"trimLevel":"' ||  UPPER(REPLACE(S_mktqt_vehicle.trimLevel, '"','')) || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.seatNumber is not null THEN
V_LIGNE := V_LIGNE || '"seatNumber":"' || S_mktqt_vehicle.seatNumber || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.doorNumber is not null THEN
V_LIGNE := V_LIGNE || '"doorNumber":"' || S_mktqt_vehicle.doorNumber || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

----"nedcCombineFuelConsumption":"' || S_mktqt_vehicle.nedcCombineFuelConsumption || '", 
---"nedcExtraUrbanFuelConsumption":"' || S_mktqt_vehicle.nedcExtraUrbanFuelConsumption || '", 
---"nedcUrbanFuelConsumption":"' || S_mktqt_vehicle.nedcUrbanFuelConsumption || '", 

IF S_mktqt_vehicle.wltpLowFuelConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpLowFuelConsumption":"' || S_mktqt_vehicle.wltpLowFuelConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpMediumFuelConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpMediumFuelConsumption":"' || S_mktqt_vehicle.wltpMediumFuelConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpHighFuelConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpHighFuelConsumption":"' || S_mktqt_vehicle.wltpHighFuelConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpExtraHighConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpExtraHighConsumption":"' || S_mktqt_vehicle.wltpExtraHighConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpCombinedFuelConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpCombinedFuelConsumption":"' || S_mktqt_vehicle.wltpCombinedFuelConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpElectricConsumption is not null THEN
V_LIGNE := V_LIGNE || '"wltpElectricConsumption":"' || S_mktqt_vehicle.wltpElectricConsumption || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.wltpElectricRange is not null THEN
V_LIGNE := V_LIGNE || '"wltpElectricRange":"' || S_mktqt_vehicle.wltpElectricRange || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.batteryCapacity is not null THEN
V_LIGNE := V_LIGNE || '"batteryCapacity":"' || S_mktqt_vehicle.batteryCapacity || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.maxLadenWeight is not null THEN
V_LIGNE := V_LIGNE || '"maxLadenWeight":"' || S_mktqt_vehicle.maxLadenWeight || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

IF S_mktqt_vehicle.kerbWeight is not null THEN
V_LIGNE := V_LIGNE || '"kerbWeight":"' || S_mktqt_vehicle.kerbWeight || '",';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


IF S_mktqt_vehicle.payLoad is not null THEN
V_LIGNE := V_LIGNE || '"payLoad":"' || S_mktqt_vehicle.payLoad || '",'; 
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;


V_LIGNE := V_LIGNE || '"hasTelematicBox":' ||  LOWER(REPLACE(S_mktqt_vehicle.hasTelematicBox, '"','')) || ',';
--res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);



---"catalogueDetail":"' ||  UPPER(REPLACE(S_mktqt_vehicle.catalogueDetail, '"','')) || '", 
---"tsnNumber":"' ||  UPPER(REPLACE(S_mktqt_vehicle.tsnNumber, '"','')) || '", 
---"wltpFlag":"' ||  UPPER(REPLACE(S_mktqt_vehicle.wltpFlag, '"','')) || '", 
---"completenessFlag":"' ||  UPPER(REPLACE(S_mktqt_vehicle.completenessFlag, '"','')) || '", 
---"validationUser":"' ||  UPPER(REPLACE(S_mktqt_vehicle.validationUser, '"','')) || '", 
---"validationDate":"' || S_mktqt_vehicle.validationDate || '", 
---"updateUser":"' ||  UPPER(REPLACE(S_mktqt_vehicle.updateUser, '"','')) || '", 
---"updateDate":"' || S_mktqt_vehicle.updateDate || '", 
---"purchaseCondition":"' ||  UPPER(REPLACE(S_mktqt_vehicle.purchaseCondition, '"','')) || '", 
---"designBases":"' ||  UPPER(REPLACE(S_mktqt_vehicle.designBases, '"','')) || '", 
---"designCustomerShip":"' ||  UPPER(REPLACE(S_mktqt_vehicle.designCustomerShip, '"','')) || '", 
---"versionLabelGlobalShort":"' ||  UPPER(REPLACE(S_mktqt_vehicle.versionLabelGlobalShort, '"','')) || '", 
---"versionLabelGlobalLong":"' ||  UPPER(REPLACE(S_mktqt_vehicle.versionLabelGlobalLong, '"','')) || '",

V_LIGNE := V_LIGNE || '"versionLabelLocalShort":"' ||  UPPER(REPLACE(S_mktqt_vehicle.versionLabelLocalShort, '"','')) || '",';
V_LIGNE := V_LIGNE || '"versionLabelLocalLong":"' ||  UPPER(REPLACE(S_mktqt_vehicle.versionLabelLocalLong, '"',''))  || '"';    --------- virgule absente a la fin car on va l'ajouter apres si on rentre dans la boucle crossrefs

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    -----------------------------------CROSSREFS-----------------------------
    /*
    select * from MKTQT_vehicle_crossrefs CROSSREFS
where exists 
(select * 
from MKTQT_vehicle_crossrefs CROSSREFS_EXISTS 
where CROSSREFS_EXISTS.identifierType = 'BLVD' and CROSSREFS_EXISTS.identifier is not null and CROSSREFS_EXISTS.itemDirectoryVehicleRef=P_itemDirectoryVehicleRef)
and CROSSREFS.itemDirectoryVehicleRef=P_itemDirectoryVehicleRef;
    */
    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_CROSSREFS
         FROM   MKTREF.MKTQT_VEHICLE_CROSSREFS CROSSREFS 
         WHERE  CROSSREFS.itemDirectoryVehicleRef = S_mktqt_vehicle.itemDirectoryVehicleRef;
    EXCEPTION WHEN OTHERS THEN
              V_NB_CROSSREFS := NULL;
    END;

    IF NVL(V_NB_CROSSREFS, 0) > 0 THEN
       --V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee pour vehicle
    
       V_LIGNE := ', "crossRefs": [';
       --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
       
       
       FOR S_MKTQT_VEHICLE_CROSSREFS IN C_MKTQT_VEHICLE_CROSSREFS (S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
            V_NB_CROSSREFS_TRAITE := V_NB_CROSSREFS_TRAITE+1;   ---- A REVOIR 
            
            IF S_MKTQT_VEHICLE_CROSSREFS.identifier is not NULL THEN   ------  if constr vide alors on affiche rien
            V_LIGNE := V_LIGNE || '{"identifierType":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_CROSSREFS.identifierType, '"',''))  || '",';
                V_LIGNE := V_LIGNE || '"identifier":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_CROSSREFS.identifier, '"',''))  || '"';

                if V_NB_CROSSREFS_TRAITE = V_NB_CROSSREFS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
            
            END IF;
       END LOOP;
       V_LIGNE := V_LIGNE || ']';      ---------   virgule ajoutee dans la boucle suivant 
       res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;
    V_LIGNE := '';  -------- null

    -----------------------------------PRICINGS-----------------------------
    BEGIN
         SELECT  COUNT(*)
         INTO   V_NB_PRICINGS
         FROM   MKTREF.MKTQT_VEHICLE_PRICINGS PRICINGS
         WHERE  PRICINGS.itemDirectoryVehicleRef =  S_mktqt_vehicle.itemDirectoryVehicleRef;
    EXCEPTION WHEN OTHERS THEN
              V_NB_PRICINGS := NULL;
    END;
    
    IF NVL(V_NB_PRICINGS, 0) > 0 THEN
        --V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee pour crossrefs
        
        V_LIGNE := ', "pricings": [';
        --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        
        FOR S_MKTQT_VEHICLE_PRICINGS IN C_MKTQT_VEHICLE_PRICINGS (S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
            V_NB_PRICINGS_TRAITE := V_NB_PRICINGS_TRAITE+1;   ---- A REVOIR 
            V_LIGNE := V_LIGNE || '{"priceStartDate":"' || S_MKTQT_VEHICLE_PRICINGS.priceStartDate || '",';
                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                
                IF S_MKTQT_VEHICLE_PRICINGS.priceEndDate is not null THEN
                V_LIGNE := V_LIGNE || '"priceEndDate":"' || S_MKTQT_VEHICLE_PRICINGS.priceEndDate || '",';
                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                
                V_LIGNE := V_LIGNE || '"priceET":' || REPLACE(S_MKTQT_VEHICLE_PRICINGS.priceET,',','.') || ',';
                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                /*
                IF S_MKTQT_VEHICLE_PRICINGS.priceIT is null THEN    ----- uniquement pour priceIT
                V_LIGNE := '                "priceIT":"' || S_MKTQT_VEHICLE_PRICINGS.priceET || '",'; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                ELSE
                V_LIGNE := '                "priceIT":"' || S_MKTQT_VEHICLE_PRICINGS.priceIT || '",'; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                END IF;
                */
                
                V_LIGNE := V_LIGNE || '"currency":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_PRICINGS.currency, '"','')) || '",';
                V_LIGNE := V_LIGNE || '"priceWithoutOtrCostIT":' || REPLACE(S_MKTQT_VEHICLE_PRICINGS.priceWithoutOtrCostIT,',','.') || '';

                
                if V_NB_PRICINGS_TRAITE = V_NB_PRICINGS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        END LOOP;
        V_LIGNE := V_LIGNE || ']'; ---------   virgule ajoutee dans la boucle suivant 
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        
    END IF;                
    V_LIGNE := '';  -------- null
     
    -----------------------------------OPTIONS-----------------------------            
    BEGIN
         SELECT COUNT(*)
         INTO   V_NB_OPTIONS
         FROM   MKTREF.MKTQT_VEHICLE_OPTIONS OPTIONS
         WHERE  OPTIONS.itemDirectoryVehicleRef =  S_mktqt_vehicle.itemDirectoryVehicleRef;
    EXCEPTION WHEN OTHERS THEN
              V_NB_OPTIONS := NULL;
    END;                
   -------------RES := MKT.MKTQAUT.F_WRITE(FILE_ID, to_char(V_NB_OPTIONS), '  AVANT IF options '); ----EFFACERR
    IF NVL(V_NB_OPTIONS, 0) > 0 THEN
        --V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);--------- virgule ajoutee pour pricings
       
        V_LIGNE := ', "options": [';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        
        
        FOR S_MKTQT_VEHICLE_OPTIONS IN C_MKTQT_VEHICLE_OPTIONS (S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
        
            V_NB_OPTIONS_TRAITE := V_NB_OPTIONS_TRAITE+1;   ---- A REVOIR 
            V_NB_OPTIONSLABELS_TRAITE := 0; --------- POUR LA BOUCLE OPTIONSLABELS
            V_NB_OPTIONSPRICINGS_TRAITE := 0;-------- POUR LA BOUCLE OPTIONSPRICINGS
        
            
            V_LIGNE := '{"code":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_OPTIONS.code, '"','')) || '",';
            V_LIGNE := V_LIGNE || '"typeCode":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_OPTIONS.typeCode, '"','')) || '",';
            V_LIGNE := V_LIGNE || '"isPack":' ||  LOWER(REPLACE(S_MKTQT_VEHICLE_OPTIONS.isPack, '"','')) || ',';
            V_LIGNE := V_LIGNE || '"startDate":"' ||  S_MKTQT_VEHICLE_OPTIONS.startDate || '",';
              
              --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);   
              
              IF S_MKTQT_VEHICLE_OPTIONS.endDate is not NULL THEN
                V_LIGNE := V_LIGNE || '"endDate":"' ||  S_MKTQT_VEHICLE_OPTIONS.endDate || '",';   
              END IF;
            V_LIGNE := V_LIGNE || '"isAgregated":' ||  LOWER(REPLACE(S_MKTQT_VEHICLE_OPTIONS.isAgregated, '"','')) || ',';
            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


                ---------------------------------------------------------------------------------------------------------------
                ----------------------------------------------------------------------------------------------------------------
            
                    -----------------------------------OPTIONSLABELS-----------------------------
                    BEGIN
                        SELECT  COUNT(*)
                        INTO   V_NB_OPTIONSLABELS
                        FROM   MKTREF.MKTQT_VEHICLE_OPTIONSLABELS OPTIONSLABELS
                        WHERE  OPTIONSLABELS.Code = S_MKTQT_VEHICLE_OPTIONS.code
                        AND    OPTIONSLABELS.itemDirectoryVehicleRef = S_MKTQT_VEHICLE_OPTIONS.itemDirectoryVehicleRef;
                        
                    EXCEPTION WHEN OTHERS THEN
                            V_NB_OPTIONSLABELS := NULL;
                    END;
                
                    IF NVL(V_NB_OPTIONSLABELS, 0) > 0 THEN
                        V_LIGNE := V_LIGNE || '"labels": [';
                        --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                        
       
                        FOR S_MKTQT_OPTIONSLABELS IN C_MKTQT_OPTIONSLABELS (S_MKTQT_VEHICLE_OPTIONS.code , S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
                            V_NB_OPTIONSLABELS_TRAITE := V_NB_OPTIONSLABELS_TRAITE+1;   ---- A REVOIR 
                            V_LIGNE := V_LIGNE || '{"language":"' ||  REPLACE(S_MKTQT_OPTIONSLABELS.language, '"','') || '",';
                            V_LIGNE := V_LIGNE || '"labelShort":"' ||  UPPER(S_MKTQT_OPTIONSLABELS.labelShort) || '",';
                            V_LIGNE := V_LIGNE || '"labelLong":"' ||  UPPER(S_MKTQT_OPTIONSLABELS.labelLong) || '"';

                            if V_NB_OPTIONSLABELS_TRAITE = V_NB_OPTIONSLABELS THEN V_LIGNE := V_LIGNE || '}';
                            else V_LIGNE := V_LIGNE || '},';
                            end if;

                            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                        END LOOP;
                        V_LIGNE := V_LIGNE || '],';
                        --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                    END IF;
                    
                    ---------  ---------- --------  ---------   ---------   ---------   ---------  ---------   ---------  ---------  ---------  
                    
                   -- res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);    --- A REVOIR
                    -----------------------------------OPTIONSPRICINGS-----------------------------
                    BEGIN
                        SELECT  COUNT(*)
                        INTO   V_NB_OPTIONSPRICINGS
                        FROM   MKTREF.MKTQT_VEHICLE_OPTIONSPRICINGS OPTIONSPRICINGS
                        WHERE  OPTIONSPRICINGS.Code = S_MKTQT_VEHICLE_OPTIONS.code
                        AND    OPTIONSPRICINGS.itemDirectoryVehicleRef = S_MKTQT_VEHICLE_OPTIONS.itemDirectoryVehicleRef
                        AND  OPTIONSPRICINGS.pricebookStartDate = S_MKTQT_VEHICLE_OPTIONS.OptionStartDate; --- ajout 16 01 2023
                        
                    EXCEPTION WHEN OTHERS THEN
                            V_NB_OPTIONSPRICINGS := NULL;
                    END;
                
                    IF NVL(V_NB_OPTIONSPRICINGS, 0) > 0 THEN
                        V_LIGNE := V_LIGNE || '"pricings": [';
                        --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                        
       
                        FOR S_MKTQT_OPTIONSPRICINGS IN C_MKTQT_OPTIONSPRICINGS (S_MKTQT_VEHICLE_OPTIONS.code , S_mktqt_vehicle.itemDirectoryVehicleRef, S_MKTQT_VEHICLE_OPTIONS.OptionStartDate) LOOP  --- ajout 16 01 2023 S_MKTQT_VEHICLE_OPTIONS.startDate
                            V_NB_OPTIONSPRICINGS_TRAITE := V_NB_OPTIONSPRICINGS_TRAITE+1;   ---- A REVOIR 
                            V_LIGNE := V_LIGNE || '{"pricebookStartDate":"' || S_MKTQT_OPTIONSPRICINGS.pricebookStartDate || '",';
                                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                                
                                IF S_MKTQT_OPTIONSPRICINGS.pricebookEndDate is not NULL THEN
                                V_LIGNE := V_LIGNE || '"pricebookEndDate":"' || S_MKTQT_OPTIONSPRICINGS.pricebookEndDate || '",';
                                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                                END IF;
                                
                                V_LIGNE := V_LIGNE || '"currency":"' ||  UPPER(REPLACE(S_MKTQT_OPTIONSPRICINGS.currency, '"','')) || '",';
                                --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                                
                                
                                V_LIGNE := V_LIGNE || '"priceET":' || REPLACE(S_MKTQT_OPTIONSPRICINGS.priceET,',','.') || '';
                                
                                
                                
                                /*
                                IF S_MKTQT_OPTIONSPRICINGS.priceIT is null THEN     -------uniquement pour priceIT
                                V_LIGNE := '                                "priceET":"' || S_MKTQT_OPTIONSPRICINGS.priceET || '",
                                "priceIT":"' || S_MKTQT_OPTIONSPRICINGS.priceET || '"';
                                ELSE
                                V_LIGNE := '                                "priceET":"' || S_MKTQT_OPTIONSPRICINGS.priceET || '",
                                "priceIT":"' || S_MKTQT_OPTIONSPRICINGS.priceIT || '"';
                                END IF;
                                */
                                
                                ----res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                                

                            if V_NB_OPTIONSPRICINGS_TRAITE = V_NB_OPTIONSPRICINGS THEN V_LIGNE := V_LIGNE || '}';
                            else V_LIGNE := V_LIGNE || '},';
                            end if;

                            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                        END LOOP;
                        V_LIGNE := V_LIGNE || ']'; ----------MOI  AJOUT JEUDI   --- sans virgule a la fin
                        --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                    END IF;

          ----------------------------------------------------------------------------------------------------------------
          ----------------------------------------------------------------------------------------------------------------
            --V_LIGNE := ''; ----------MOI  AJOUT JEUDI
            if V_NB_OPTIONS_TRAITE = V_NB_OPTIONS THEN V_LIGNE := V_LIGNE || '}';
            else V_LIGNE := V_LIGNE || '},';
            end if;

            res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);


        END LOOP;
        V_LIGNE := ']';---------   virgule ajoutee dans la boucle suivant 
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;         
    V_LIGNE := '';  -------- null 
    
    ---------------------------------------------------------------------------------------------------------
    -----------------------------------AGGREGATEDOPT-----------------------------    
     BEGIN
         SELECT  COUNT(*)
         INTO   V_NB_AGGREGATEDOPT
         FROM   MKTREF.MKTQT_VEHICLE_AGGREGATEDOPT AGGREGATEDOPT
         WHERE    AGGREGATEDOPT.itemDirectoryVehicleRef = S_MKTQT_VEHICLE.itemDirectoryVehicleRef;
         ---AND  AGGREGATEDOPT.Code = S_MKTQT_VEHICLE_OPTIONS.code

     EXCEPTION WHEN OTHERS THEN
             V_NB_AGGREGATEDOPT := NULL;
     END;
 
     IF NVL(V_NB_AGGREGATEDOPT, 0) > 0 THEN
         --V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
         V_LIGNE := ', "aggregatedOptions": [';
         res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
         V_LIGNE := '';
       
         FOR S_MKTQT_VEHICLE_AGGREGATEDOPT IN C_MKTQT_VEHICLE_AGGREGATEDOPT (S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
             IF MOD(V_NB_AGGREGATEDOPT_TRAITE, 4) = 0 AND V_NB_AGGREGATEDOPT_TRAITE <> 0 THEN
                 res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                 V_LIGNE := '';
             END IF;
             V_NB_AGGREGATEDOPT_TRAITE := V_NB_AGGREGATEDOPT_TRAITE+1;   ---- A REVOIR
             V_LIGNE := V_LIGNE || '{"code":"' || S_MKTQT_VEHICLE_AGGREGATEDOPT.code || '",';
             V_LIGNE := V_LIGNE || '"categoryCode":"' || S_MKTQT_VEHICLE_AGGREGATEDOPT.categoryCode || '",';
             V_LIGNE := V_LIGNE || '"currency":"' || S_MKTQT_VEHICLE_AGGREGATEDOPT.currency || '",';
             V_LIGNE := V_LIGNE || '"priceET":' || REPLACE(S_MKTQT_VEHICLE_AGGREGATEDOPT.priceET,',','.') || '';

             if V_NB_AGGREGATEDOPT_TRAITE = V_NB_AGGREGATEDOPT THEN V_LIGNE := V_LIGNE || '}';
             else V_LIGNE := V_LIGNE || '},';
             end if;

             --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
         END LOOP;
         V_LIGNE := V_LIGNE || ']';
         res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
     END IF;
        
    ---------------------------------------------------------------------------------------------------------
    -----------------------------------BASEEQUIPMENTS-----------------------------
     BEGIN
         SELECT COUNT(*)
         INTO   V_NB_BASEEQUIPMENTS
         FROM   MKTREF.MKTQT_VEHICLE_BASEEQUIPMENTS BASEEQUIPMENTS
         WHERE  BASEEQUIPMENTS.itemDirectoryVehicleRef =  S_mktqt_vehicle.itemDirectoryVehicleRef;
    EXCEPTION WHEN OTHERS THEN
              V_NB_BASEEQUIPMENTS := NULL;
    END;
    
    IF NVL(V_NB_BASEEQUIPMENTS, 0) > 0 THEN
        --V_LIGNE := ',' ; res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); --------- virgule ajoutee pour options (optionslabels et optionspricings et options sont dans la meme table)
        
        V_LIGNE := ', "baseEquipments": [';
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        V_LIGNE := '';
        
        FOR S_MKTQT_VEHICLE_BASEEQUIPMENTS IN C_MKTQT_VEHICLE_BASEEQUIPMENTS (S_mktqt_vehicle.itemDirectoryVehicleRef) LOOP
            IF MOD(V_NB_BASEEQUIPMENTS_TRAITE, 4) = 0 AND V_NB_BASEEQUIPMENTS_TRAITE <> 0 THEN
                 res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
                 V_LIGNE := '';
             END IF;
            V_NB_BASEEQUIPMENTS_TRAITE := V_NB_BASEEQUIPMENTS_TRAITE+1;   ---- A REVOIR 
            V_LIGNE := V_LIGNE || '{"externalRef":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_BASEEQUIPMENTS.externalRef, '"','')) || '",';
            V_LIGNE := V_LIGNE || '"language":"' ||  REPLACE(S_MKTQT_VEHICLE_BASEEQUIPMENTS.language, '"','') || '",';
            V_LIGNE := V_LIGNE || '"label":"' ||  UPPER(REPLACE(S_MKTQT_VEHICLE_BASEEQUIPMENTS.label, '"','')) || '"';
                
                if V_NB_BASEEQUIPMENTS_TRAITE = V_NB_BASEEQUIPMENTS THEN V_LIGNE := V_LIGNE || '}';
                else V_LIGNE := V_LIGNE || '},';
                end if;

            --res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
        END LOOP;
        V_LIGNE := V_LIGNE || ']';    ------------ MOI PAS DE VIRGULE A LA FIN
        --if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   --------------------------------------- A REVOIR
        --else V_LIGNE := V_LIGNE || '},';    -------------------------------------------------------------------- A REVOIR
        --end if;  -------------------------------------------------------------------- A REVOIR
        res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
    END IF;                           
    V_LIGNE := '';  -------- null
    ---if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := '}';   --------- AJOUT 
    ---end if; 
    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   --------------------------------------- A REVOIR
    else V_LIGNE := V_LIGNE || '}';    ------------------------------ ajout en debut de la boucle
    end if;  -------------------------------------------------------------------- A REVOIR
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                 RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_VEHICLE_JSON','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_mktqt_vehicle.itemDirectoryVehicleRef);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'FONC_EXPORT_VEHICLE_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_VEHICLE_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;          
               
               
END FONC_EXPORT_VEHICLE_JSON;    








FUNCTION FONC_EXPORT_NOMENCLATURE_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
    V_NB_ENREG  NUMBER(10) := 0;  
    V_NB_ENREG_TRAITE NUMBER(10) := 0;
   -- V_NB_ADDRESS      NUMBER(3) := 0;
   -- V_NB_PHONE      NUMBER(3) := 0;
    --V_NB_MAIL      NUMBER(3) := 0;
    --V_NB_BANKING      NUMBER(3) := 0;

CURSOR C_MKTQT_nomenclature IS

select 
Entity as Entity,
code as code,
TO_CHAR(startValidityDate, 'YYYY-MM-DD') as startValidityDate,
TO_CHAR(endValidityDate, 'YYYY-MM-DD') as endValidityDate,
'GB' as countryCode,
parent as parent,
parent_details_entity as parent_details_entity,
parent_details_code as parent_details_code,
description_language as description_language,		
(CASE WHEN entity in ('model_gen','trim','motorisationBLVD','dimensions') THEN 
UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(description_label, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), ''))
ELSE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(description_label, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), '') END) as description_label,
crossref_typecode as crossref_typecode,
crossref_country	 as crossref_country,
(CASE WHEN entity in ('model_gen','trim','motorisationBLVD','dimensions') THEN UPPER(crossref_code) ELSE crossref_code END)	as crossref_code,
translation_language as translation_language,
(CASE WHEN entity in ('model_gen','trim','motorisationBLVD','dimensions') THEN
UPPER(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(translation_label, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), '')) 
ELSE REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(translation_label, '\', '\\'), '"', '\"'), CHR(9), ''), CHR(13), ''), CHR(29), '') END) as translation_label,
(CASE WHEN bomAttribut != ' ' THEN bomAttribut ELSE NULL END) as bomAttribut,
countryScope as countryScope
from MKTREF.MKTQT_nomenclature
;




BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'FONC_EXPORT_NOMENCLATURE_JSON', ' ## EXPORT NOMENCLATURE ' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


  BEGIN 
       SELECT COUNT(*)
       INTO   V_NB_ENREG
       FROM   MKTREF.MKTQT_nomenclature ;
  EXCEPTION WHEN OTHERS THEN
       V_NB_ENREG := 0;
  END;

      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_nomenclature IN C_MKTQT_nomenclature LOOP
      BEGIN
         V_NB_ENREG_TRAITE := V_NB_ENREG_TRAITE +1;
              V_LIGNE := '{
"entity":"' ||  S_MKTQT_nomenclature.entity || '",
"code":"' ||  S_MKTQT_nomenclature.code || '",
"startValidityDate":"' || S_MKTQT_nomenclature.startValidityDate || '",
"endValidityDate":"' || S_MKTQT_nomenclature.endValidityDate || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE:='';

IF S_MKTQT_nomenclature.bomAttribut is not null then
    V_LIGNE := '"bomAttributs": ["' || S_MKTQT_nomenclature.bomAttribut  || '"],';
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
END IF;

V_LIGNE := '"countryCode":"' || S_MKTQT_nomenclature.countryCode || '",
"countryScope":"' ||  S_MKTQT_nomenclature.countryScope || '",';

res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE:='';

IF S_MKTQT_nomenclature.parent != ' ' THEN
V_LIGNE :='"parent":"' ||  S_MKTQT_nomenclature.parent || '",';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE := '';
END IF;



IF S_MKTQT_nomenclature.entity in ('model_gen','trim','motorisationBLVD','dimensions') THEN
V_LIGNE := '"parentDetails": [{"entity":"brand","code":"' ||  SUBSTR(S_MKTQT_nomenclature.parent,1,2) || '"}],';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE := '';
END IF;


V_LIGNE:='"descriptions":
[{';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE := '';


IF S_MKTQT_nomenclature.description_language = ' ' THEN
    V_LIGNE :='"label":"' ||  S_MKTQT_nomenclature.description_label || '"' ;
ELSE V_LIGNE := '"language":"' ||  S_MKTQT_nomenclature.description_language || '",
"label":"' ||  S_MKTQT_nomenclature.description_label || '"';
END IF;
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE := '';


IF S_MKTQT_nomenclature.Entity in ('transmission','kind') THEN
V_LIGNE :='}],
"crossrefs":
[{
"typeCode":"' ||  REPLACE(S_MKTQT_nomenclature.crossref_typecode,' ','') || '",
"code":"' ||  REPLACE(S_MKTQT_nomenclature.crossref_code,' ','') || '"
}],
"translations":
[{';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE:='';


ELSE

V_LIGNE :='}],
"crossrefs":
[{
"typeCode":"' ||  S_MKTQT_nomenclature.crossref_typecode || '",
"code":"' ||  S_MKTQT_nomenclature.crossref_code || '"
}],
"translations":
[{';
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE); V_LIGNE:='';

END IF;



IF S_MKTQT_nomenclature.translation_language = ' ' THEN
    V_LIGNE :='"label":"' || S_MKTQT_nomenclature.translation_label || '"' ;
ELSE V_LIGNE := '"language":"' ||  S_MKTQT_nomenclature.translation_language || '",
"label":"' ||  S_MKTQT_nomenclature.translation_label || '"';
END IF;
res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

V_LIGNE:='}]';

---------}';

    if V_NB_ENREG_TRAITE = V_NB_ENREG THEN V_LIGNE := V_LIGNE || '}';   
    else V_LIGNE := V_LIGNE || '},';    ------------------------------ ajout fin balise
    end if;  
    res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);

    N_SAUV := N_SAUV +1;
           
    EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_NOMENCLATURE_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_nomenclature.entity);
                --RETURN V_ERR;
                RETURN V_ERR;
    END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'FONC_EXPORT_NOMENCLATURE_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_NOMENCLATURE_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END FONC_EXPORT_NOMENCLATURE_JSON;
























  function int_to_seq2(n in integer ) return varchar2    as
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      if n > 1295 then return '  ';   end if;  
      quotient := n;
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      quotient := floor(quotient/len);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
    function int_to_seq3(n in integer, NOMLOG      VARCHAR2) return varchar2    as
       FILE_ID UTL_FILE.FILE_TYPE;
       RES     NUMBER := 0;
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      File_Id := mkt.mktqaut.F_Open(Nomlog);
      quotient := n;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','quotient : ' || quotient);
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','mod(quotient,len) : ' || mod(quotient,len));
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','ret : ' || ret);
      quotient := floor(quotient/len);
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','quotient : ' || quotient);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
   
   
  FUNCTION ALIM_MODEL_GEN (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct brand.code as brandCode   ,
                    CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME, --CAPMAN.NAME || '| ' || 
                    CAPMAN.NAME as CAPMAN_NAME,
                    'VP' AS VEHICULE_TYPE,
                    CAPDER.RANCODE || 'GEN' || B.generation AS crossref_code,
                   (CAPRAN.NAME || ' (' || 'GEN' || B.generation || ')') AS TRANSLATION_LABEL,  --- ajout 20-10-2022
                   CAPDER.MANCODE as MANCODE  ----ajout 28-10-22
     
     from    MKTREF.MKTQT_NVDModelYear_VP B,
             MKTREF.MKTQT_CapDer_VP CAPDER, 
             MKTREF.MKTQT_CAPMAN_VP   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VP CAPRAN,
             --MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand
             
     where   B.ID = CAPDER.ID  
     and     CAPDER.MANCODE  = CAPMAN.CODE
     AND     CAPDER.RANCODE  = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE);


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
                      CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME, --CAPMAN.NAME || '| ' || 
                      CAPMAN.NAME as CAPMAN_NAME,
                     'VU' AS VEHICULE_TYPE,
                     CAPDER.RANCODE || 'GEN' || B.generation AS crossref_code,    ---- AJOUT VENDREDI 
                     (CAPRAN.NAME || ' (' || 'GEN' || B.generation || ')') AS TRANSLATION_LABEL,  --- ajout 20-10-2022
                     CAPDER.MANCODE as MANCODE  ----ajout 28-10-22
                     
     from    MKTREF.MKTQT_NVDModelYear_VU B,
             MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTREF.MKTQT_CAPMAN_VU   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VU CAPRAN,
            -- MKTREF.MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand
     where    B.ID = CAPDER.ID  
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE);



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN','## Alimentation de la table MKTREF.MKTQT_MODEL_GEN ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_MODEL_GEN','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VP.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN :', ' BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE');
              Res := mkt.mktqaut.F_Write(File_Id, '                ', ' -VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, '                ', ' -MANCODE : ' || TO_CHAR(REC_vehicle_VP.MANCODE));
        ELSE
        
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
            BEGIN 
                SELECT NVL(max(model_gen_num), 0) into V_NUM
                from   MKTREF.MKTQT_MODEL_GEN
                where  BRAND_CODE = REC_vehicle_VP.brandCode;
            EXCEPTION WHEN OTHERS THEN
                V_NUM := 0;
            END;
           V_NUM := V_NUM +1;     ---- changement  
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                CAPMAN_NAME, -- add
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE,   -- AJOUT VENDREDI
                TRANSLATION_LABEL  -- AJOUT
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.CAPMAN_NAME, --add
REC_vehicle_VP.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VP.CROSSREF_CODE,     -- AJOUT VENDREDI
REC_vehicle_VP.TRANSLATION_LABEL  -- AJOUT
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set     model_gen_num =   NVL(V_NUM_2, V_NUM),
                MODEL_GEN_ID = V_SEQ,
                CAPMAN_NAME = REC_vehicle_VP.CAPMAN_NAME,
                TRANSLATION_LABEL = REC_vehicle_VP.TRANSLATION_LABEL   -- AJOUT
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        AND    CROSSREF_CODE  = REC_vehicle_VP.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
      END;  ----
      END IF;  ----
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MODEL_GEN','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   V_INS := 0;
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        
        IF REC_vehicle_VU.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VU.MANCODE));
        ELSE
        
        BEGIN
        
        
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(model_gen_num), 0) into V_NUM
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VU.brandCode;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
            V_NUM := V_NUM +1;     ---- changement     
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           --V_NUM := V_NUM +1;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                CAPMAN_NAME, -- add
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE,   -- AJOUT VENDREDI
                TRANSLATION_LABEL  --AJOUT
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.CAPMAN_NAME, -- add
REC_vehicle_VU.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VU.CROSSREF_CODE,     -- AJOUT VENDREDI
REC_vehicle_VU.TRANSLATION_LABEL  --AJOUT
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set    model_gen_num =   NVL(V_NUM_2, V_NUM) ,
                MODEL_GEN_ID = V_SEQ,
                CAPMAN_NAME = REC_vehicle_VU.CAPMAN_NAME,
                TRANSLATION_LABEL = REC_vehicle_VU.TRANSLATION_LABEL  --AJOUT
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE
        AND    CROSSREF_CODE  = REC_vehicle_VU.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
      END;  --
      END IF; --
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MODEL_GEN','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MODEL_GEN;
  
  
  
  
  
  
  
  
  ----TRIM
  
  
  FUNCTION ALIM_TRIM (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('C', CAPDER.TrimCode) as crossref_code,  -- AJOUT VENDREDI
            CAPDER.MANCODE as MANCODE --
     
     from    MKTREF.MKTQT_NVDModelYear_VP B,
             MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTREF.MKTQT_CAPMAN_VP   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VP CAPRAN,
             --MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_CapTrim_VP CAPTRIM -- add trim
             
     where   B.ID = CAPDER.ID  
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and    CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VP where Code = CAPDER.TrimCode

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('L', CAPDER.TrimCode) as crossref_code,  -- AJOUT VENDREDI
            CAPDER.MANCODE as MANCODE --
     
     from    MKTREF.MKTQT_NVDModelYear_VU B,
             MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTREF.MKTQT_CAPMAN_VU   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VU CAPRAN,
             --MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_CapTrim_VU CAPTRIM    -- add trim
             
     where   B.ID = CAPDER.ID 
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     and     CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VU where Code = CAPDER.TrimCode



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','## Alimentation de la table MKTREF.MKTQT_TRIM ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VP.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VP.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_TRIM : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_TRIM));
        ELSE
        
        BEGIN
        
        
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_TRIM =  REC_vehicle_VP.VEHICULE_TRIM   -- add
         and    CROSSREF_CODE = REC_vehicle_VP.CROSSREF_CODE -- ajout 24/10/2022
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
            V_NUM := V_NUM +1;     ---- changement            
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           --V_NUM := V_NUM +1;
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM, ---
                trim_num, 
                TRIM_ID ,  ---
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_TRIM, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VP.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set     trim_num =   NVL(V_NUM_2, V_NUM),
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_TRIM = REC_vehicle_VP.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_vehicle_VP.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
      END;
      END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   V_INS := 0;
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VU.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VU.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_TRIM : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_TRIM));
        ELSE
        
        BEGIN
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and    VEHICULE_TRIM =  REC_vehicle_VU.VEHICULE_TRIM   -- add
         and    CROSSREF_CODE = REC_vehicle_VU.CROSSREF_CODE -- ajout 24/10/2022
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;       
            V_NUM := V_NUM +1;     ---- changement  
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           --V_NUM := V_NUM +1;           
        END IF;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM,
                trim_num,
                TRIM_ID  ,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_TRIM  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VU.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set    trim_num =   NVL(V_NUM_2, V_NUM) ,
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_TRIM = REC_vehicle_VU.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_vehicle_VU.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
      END;
      END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_TRIM;
  
  
  
  
  
  
  
  
  ----MOTORISATIONBLVD
  
  
  FUNCTION ALIM_MOTORISATIONBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (B.maximumPowerDin  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  B.nbRapports  || '/' || B.batteryCapacity) as VEHICULE_MOTORISATIONBLVD,
            CAPDER.MANCODE as MANCODE  --- ajout 28-10-2022
 
     from    MKTREF.MKTQT_NVDModelYear_VP B,
             MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTREF.MKTQT_CAPMAN_VP   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VP CAPRAN,
             --MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand
             --MKTQT_NVDTECHNICAL_VP maximumPowerDin, MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity  -- add MOTORISATIONBLVD
             
     where   B.ID = CAPDER.ID
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE);
     
        
   /* AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 163 ;
     */
    

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (B.maximumPowerDin  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' || B.nbRapports || '/' || B.batteryCapacity) as VEHICULE_MOTORISATIONBLVD,
             CAPDER.MANCODE as MANCODE  --- ajout 28-10-2022
     
     from    MKTREF.MKTQT_NVDModelYear_VU B,
             MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTREF.MKTQT_CAPMAN_VU   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VU CAPRAN,
             --MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand
             --MKTQT_NVDTECHNICAL_VU maximumPowerDin, MKTQT_NVDTECHNICAL_VU nbRapports, MKTQT_NVDTECHNICAL_VU batteryCapacity  -- add MOTORISATIONBLVD
             
     where   B.ID = CAPDER.ID
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE);
     
/*    AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 152;
*/

 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','## Alimentation de la table MKTREF.MKTQT_MOTORISATIONBLVD ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VP.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VP.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_MOTORISATIONBLVD : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD));
        ELSE
        
        BEGIN       
        
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_MOTORISATIONBLVD =  REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;         
            V_NUM := V_NUM +1;     ---- changement  
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           --V_NUM := V_NUM +1;
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD, ---
                MOTORISATIONBLVD_num, 
                MOTORISATIONBLVD_ID   ---
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set     MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM),
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_MOTORISATIONBLVD = REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
      END;
      END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   V_INS := 0;
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VU.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VU.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_MOTORISATIONBLVD : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD));
        ELSE
        
        BEGIN       
        
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and       VEHICULE_MOTORISATIONBLVD =  REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;       
            V_NUM := V_NUM +1;     ---- changement  
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
          --- V_NUM := V_NUM +1;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD,
                MOTORISATIONBLVD_num,
                MOTORISATIONBLVD_ID  
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set    MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM) ,
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_MOTORISATIONBLVD = REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
      END;
      END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MOTORISATIONBLVD;
  
  
  
  
  
  
  
  
  ----DIMENSIONS
  
  
  FUNCTION ALIM_DIMENSIONS (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (body.code || ':' || B.height || ':' || B.length || ':' || ':' || B.maxLadenWeight)   as  VEHICULE_DIMENSIONS,
            CAPDER.MANCODE as MANCODE
 
     from    MKTREF.MKTQT_NVDModelYear_VP B,
             MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTREF.MKTQT_CAPMAN_VP   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VP CAPRAN,
            -- MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_nomenclature body  --mercredi
            -- MKTQT_NVDTECHNICAL_VP height, MKTQT_NVDTECHNICAL_VP length,MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
             
     where   B.ID = CAPDER.ID
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'C' || substr(CAPDER.capcode,11,1) ;  --mercredi
          
   /* AND   height.ID(+) = CAPDER.ID
    AND   height.TECHCODE(+) = 34 
    AND   length.ID(+) = CAPDER.ID
    AND   length.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14;
     */


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (body.code || ':' || B.height || ':' || B.length  || ':' || B.payLoad || ':' || B.maxLadenWeight) as  VEHICULE_DIMENSIONS,
            CAPDER.MANCODE as MANCODE
            
     from    MKTREF.MKTQT_NVDModelYear_VU B,
             MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTREF.MKTQT_CAPMAN_VU   CAPMAN,
             MKTREF.MKTQT_CAPRANGE_VU CAPRAN,
            -- MKTREF.MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_nomenclature body  --mercredi 
            --MKTQT_NVDTECHNICAL_VU height, MKTQT_NVDTECHNICAL_VU length,MKTQT_NVDTECHNICAL_VU  maxLadenWeight, MKTQT_NVDTECHNICAL_VU payLoad
             
     where     B.ID = CAPDER.ID
     AND     CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     --AND     generation.ID(+) = CAPDER.ID
     --AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'L' || substr(CAPDER.capcode,11,1);   --mercredi     
     
/*    AND   height.ID(+) = CAPDER.ID
    AND   height.TECHCODE(+) = 34 
    AND   length.ID(+) = CAPDER.ID
    AND   length.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14 
    AND   payLoad.ID(+) = CAPDER.ID
    AND   payLoad.TECHCODE(+) = 32 ;
*/




 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','## Alimentation de la table MKTREF.MKTQT_DIMENSIONS ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VP.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VP.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_DIMENSIONS : ' || TO_CHAR(REC_vehicle_VP.VEHICULE_DIMENSIONS));
        ELSE
        
        BEGIN  
        
        
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_DIMENSIONS =  REC_vehicle_VP.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;    
            V_NUM := V_NUM +1;     ---- changement  
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
           --V_NUM := V_NUM +1;
           
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS, ---
                DIMENSIONS_num, 
                DIMENSIONS_ID   ---
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_DIMENSIONS, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set     DIMENSIONS_num =   NVL(V_NUM_2, V_NUM),
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_DIMENSIONS = REC_vehicle_VP.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
     
     END;
     END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   V_INS := 0;
   V_Upd := 0;
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF REC_vehicle_VU.brandCode IS NULL THEN
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_NAME : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_NAME));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'MANCODE : ' || TO_CHAR(REC_vehicle_VU.MANCODE));
              Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MODEL_GEN : BRANDCODE ABSENT DANS LA TABLE NOMENCLATURE ', 'VEHICULE_DIMENSIONS : ' || TO_CHAR(REC_vehicle_VU.VEHICULE_DIMENSIONS));
        ELSE
        
        BEGIN  
           
        
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and       VEHICULE_DIMENSIONS =  REC_vehicle_VU.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
             V_NUM := V_NUM +1;     ---- changement    
           V_SEQ := MKTREF.MKTQA_CALCUL_CAP_UK.int_to_seq2 (V_NUM);
          -- V_NUM := V_NUM +1;            
           
        END IF;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS,
                DIMENSIONS_num,
                DIMENSIONS_ID  
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_DIMENSIONS  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set    DIMENSIONS_num =   NVL(V_NUM_2, V_NUM) ,
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_DIMENSIONS = REC_vehicle_VU.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
      END;
      END IF;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_DIMENSIONS;
  
  
  
  
  
  
  
  FUNCTION ALIM_vehicle (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
 
     select distinct

A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'GB' as countryCode,
---concat(concat('P', A.Id), TO_CHAR(B.effectivefrom, 'YYYYMMDD')) as itemDirectoryVehicleRef , 
'P' || A.Id || substr(B.refe, 0,4) ||  (( B.refe - floor(B.refe) )*4+1) || TO_CHAR(B.effectivefrom, 'YYYYMMDD') as itemDirectoryVehicleRef , 
NULL as versionState   ,
B.effectivefrom as validityStartDate   ,
B.effectiveto as validityEndDate , 
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label  as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
B.generation  as generation  , ----------------------- 471
substr(B.refe, 0,4)  as versionYear ,
( B.refe - floor(B.refe) )*4+1 as versionTrimester    , --OK
segment.code segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(A.CAPCODE,20,1) is null then 'P' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   -- OK
body.code as bodyCode    ,
B.height as height  ,  ----------------------- 34
B.length as length  , ----------------------- 4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
---(case when substr(A.capcode, 12, 1) in ('Z','A','R','X') then co2EmissionWLTP_285.valuefloat when substr(A.capcode, 12, 1) in ('D','Y','P','F','G','H','B') then  co2EmissionWLTP_173.valuefloat when substr(A.capcode, 12, 1) in ('E','C') then '0' end) as co2EmissionWLTP,
(case when substr(A.capcode, 12, 1) in ('Z','A','R','X') then B.co2EmissionWLTP_285 when substr(A.capcode, 12, 1) in ('D','Y','P','F','G','H','B') then  B.co2EmissionWLTP_173 when substr(A.capcode, 12, 1) in ('E','C') then '0' end) as co2EmissionWLTP,
------------------------------B.co2EmissionWLTP as co2EmissionWLTP , ----------------------- 173
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
B.maximumPowerDin as maximumPowerDin , ----------------------- 21
B.maximumPowerKW  as maximumPowerKW  , ----------------------- 48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
B.cubicCapacity as cubicCapacity   , ----------------------- 20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
--( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , ----------------------- 66 
B.nbRapports as nbRapports  , ----------------------- 66 
NULL as typeVariantVersion  ,
CAPTRIM.Name   as trimLevel,  --select distinct Name from Cars_CapTrim where Cars_CapTrim.Code = Cars_CapDer.TrimCode  
B.seatNumber as seatNumber  , ----------------------- 47
A.doors as doorNumber  ,
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
B.wltpLowFuelConsumption  as wltpLowFuelConsumption  ,  ----------------------- 184
B.wltpMediumFuelConsumption  as wltpMediumFuelConsumption   , ----------------------- 185
B.wltpHighFuelConsumption  as wltpHighFuelConsumption , ----------------------- 186
B.wltpExtraHighConsumption as wltpExtraHighConsumption    , -----------------------187
B.wltpCombinedFuelConsumption as wltpCombinedFuelConsumption ,-----------------------188
B.wltpElectricConsumption  as wltpElectricConsumption ,-----------------------164
B.wltpElectricRange  as wltpElectricRange   ,-----------------------165
B.batteryCapacity  as batteryCapacity ,-----------------------163
B.maxLadenWeight  as maxLadenWeight  ,-----------------------14
B.kerbWeight as kerbWeight  ,-----------------------3 
NULL as payLoad ,
(case when C.status = 'S' and C.genericcode ='9' then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabelGlobalLong   ,
replace(model.translation_label,':',' ') as versionLabelLocalShort  ,  --- replace :
(replace(model.translation_label,':',' ') || ' ' || A.name) as versionLabelLocalLong,  ---replace :
'VP' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester,
A.Capcode as capcode--,
--constr.titre as code_constr
-----B.effectivefrom as effectivefrom


from MKTREF.MKTQT_CapDer_VP A,
     MKTREF.MKTQT_NVDModelYear_VP B,
     MKTREF.MKTQT_NVDGenericStatus_VP C,
    -- MKTREF.MKTQT_CodeConstr_VP constr,
     
     MKTREF.MKTQT_nomenclature brand,
     MKTREF.MKTQT_nomenclature model,
     MKTREF.MKTQT_nomenclature segment,
     MKTREF.MKTQT_nomenclature body,
     MKTREF.MKTQT_nomenclature energyComb,
     MKTREF.MKTQT_nomenclature transmission,
     MKTREF.MKTQT_nomenclature gearbox,
     MKTREF.MKTQT_nomenclature door_seat, --add
     MKTREF.MKTQT_nomenclature year_trimester, --add

/*
MKTREF.MKTQT_NVDTechnical_VP co2EmissionWLTP_173,
MKTREF.MKTQT_NVDTechnical_VP co2EmissionWLTP_285,
*/     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTREF.MKTQT_CAPMAN_VP   CAPMAN,
     MKTREF.MKTQT_CAPRANGE_VP CAPRAN,
     
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VP CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,

     MKTREF.MKTQT_DIMENSIONS DIMENSIONS

where A.id = B.id 
and A.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
and c.status(+) = 'S'            --- 
and c.genericcode(+) = '9'        ---
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('C',A.MANCODE)
and model.crossref_typecode(+)= 'CAP'  ---AJOUT 30012023
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('C',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('C',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission

-- AJOUT FILTRE VEHICULE SUR 8 ANS
AND nvl(B.effectiveto, to_date('01/01/2999', 'dd/MM/yyyy')) >= add_months(P_DATE_TRAI, -96) 
--

/*
and co2EmissionWLTP_173.id(+) = B.id and co2EmissionWLTP_173.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP_173.techcode(+) = 173
and co2EmissionWLTP_285.id(+) = B.id and co2EmissionWLTP_285.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP_285.techcode(+) = 285
*/

-- MODEL GEN
AND MG.BRAND_CODE  = brand.code
and MG.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation  --CAPMAN.NAME || '| ' || 
AND MG.VEHICULE_TYPE  = 'VP'
AND MG.CROSSREF_CODE  =  A.RANCODE || 'GEN' || B.generation 
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE


-- TRIM
AND TRIM.BRAND_CODE = brand.code
AND TRIM.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND TRIM.VEHICULE_TYPE  = 'VP'
AND TRIM.VEHICULE_TRIM  = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE  = concat('C', A.TrimCode)   
    AND  CAPTRIM.CODE(+) =  A.TrimCode

-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND MOTORISATIONBLVD.VEHICULE_TYPE  = 'VP'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  =  (B.maximumPowerDin  || '/' || A.Transmission || '/' || A.DriveTrain || '/' || B.nbRapports  || '/' || B.batteryCapacity)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat)


-- DIMENSION
AND DIMENSIONS.BRAND_CODE = brand.code
AND DIMENSIONS.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND DIMENSIONS.VEHICULE_TYPE  = 'VP'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || B.height || ':' || B.length || ':' || ':' || B.maxLadenWeight)  

   
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+) ='CAP'
and door_seat.crossref_code(+) = concat(concat(A.doors,'-'),B.seatNumber)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(B.refe, ',', '.')
------- code constructeur
--and constr.cap_id (+) =  B.ID
--and constr.LATEST_MODEL_YEAR(+) = B.refe

------------------------------------------- JIRA 24 PARTIE I (BLVD)
and brand.code is not null 
and brand.description_label is not null 
and model.description_label is not null ---
---and KINDCODE is not null 
and body.code is not null 
and TRIM.TRIM_ID is not null 
and energyComb.code is not null 
and B.maximumPowerDin is not null ---
and transmission.code is not null 
and gearbox.code is not null 
and year_trimester.code is not null
---and DIMENSIONS.DIMENSIONS_ID != '  '  
-------------------------------------------
---and nvl(B.effectiveto, SYSDATE) >= add_months(SYSDATE, -12) 
;

  
    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is


    select distinct
A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'GB' as countryCode,
---concat(concat('C', A.Id), TO_CHAR(B.effectivefrom, 'YYYYMMDD')) as itemDirectoryVehicleRef , 
'C' || A.Id || substr(B.refe, 0,4) ||  (( B.refe - floor(B.refe) )*4+1) || TO_CHAR(B.effectivefrom, 'YYYYMMDD') as itemDirectoryVehicleRef , 
NULL as versionState   ,
B.effectivefrom  as validityStartDate   ,
B.effectiveto as validityEndDate ,
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
B.generation as generation  ,   ---------477
substr(B.refe, 0,4)  as versionYear ,
( B.refe - floor(B.refe) )*4+1 as versionTrimester    , --OK
segment.code as segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(CAPCODE,20,1) ='L' then 'C' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   --OK
body.code as bodyCode    ,
B.height as height, --34 as height  , ---34
B.length as length, --4  as length  , ---4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
--(case when substr(A.capcode, 12, 1) in ('Z','A','R','X') then co2EmissionWLTP_272.valuefloat when substr(A.capcode, 12, 1) in ('D','Y','P','F','G','H','B') then  co2EmissionWLTP_239.valuefloat when substr(A.capcode, 12, 1) in ('E','C') then '0' end) as co2EmissionWLTP,
(case when substr(A.capcode, 12, 1) in ('Z','A','R','X') then B.co2EmissionWLTP_272 when substr(A.capcode, 12, 1) in ('D','Y','P','F','G','H','B') then  B.co2EmissionWLTP_239 when substr(A.capcode, 12, 1) in ('E','C') then '0' end) as co2EmissionWLTP,

-------B.co2EmissionWLTP as co2EmissionWLTP, -- 239 as co2EmissionWLTP , --239
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
B.maximumPowerDin as maximumPowerDin, -- 21 as maximumPowerDin ,  --21
B.maximumPowerKW as maximumPowerKW, --48 as maximumPowerKW  , --48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
B.cubicCapacity as cubicCapacity, --20 as cubicCapacity   , --20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
B.nbRapports as nbRapports  , -----OK
NULL as typeVariantVersion  ,
CAPTRIM.Name as trimLevel,  --select distinct Name from Lights_CapTrim where Lights_CapTrim.Code = Lights_CapDer.TrimCode 
B.seatNumber as seatNumber, --47 as seatNumber  ,  ---47
NULL as doorNumber  , -- doors en  VP, null en vu
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
B.wltpLowFuelConsumption as wltpLowFuelConsumption, --299 as wltpLowFuelConsumption  ,
B.wltpMediumFuelConsumption as wltpMediumFuelConsumption,--302 as wltpMediumFuelConsumption   ,
B.wltpHighFuelConsumption as wltpHighFuelConsumption, --296 as wltpHighFuelConsumption ,
B.wltpExtraHighConsumption as wltpExtraHighConsumption,--293 as wltpExtraHighConsumption    ,
B.wltpCombinedFuelConsumption as wltpCombinedFuelConsumption,--290 as wltpCombinedFuelConsumption ,
B.wltpElectricConsumption as wltpElectricConsumption,--166 as wltpElectricConsumption ,
B.wltpElectricRange as wltpElectricRange,--167 as wltpElectricRange   ,
B.batteryCapacity as batteryCapacity,--152 as batteryCapacity ,
B.maxLadenWeight as maxLadenWeight,--14 as maxLadenWeight  ,
B.kerbWeight as kerbWeight,--3 as kerbWeight  ,
B.payLoad as payLoad,--32 as payLoad , -- VU : DIFFERENCE
(case when C.status = 'S' and C.genericcode ='9' then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabelGlobalLong   ,
replace(model.translation_label,':',' ') as versionLabelLocalShort  ,  --- replace :
(replace(model.translation_label,':',' ') || ' ' || A.name) as versionLabelLocalLong,  ---replace :
'VU' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('-2','-3','-4','-5','-6','-7','-8','-9','-10','-11','-12','-13','-14','-15','-16','-17') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester,
A.Capcode as capcode--,
--constr.titre as code_constr
--B.effectivefrom as effectivefrom,


from MKTREF.MKTQT_CapDer_VU A ,
    MKTREF.MKTQT_NVDModelYear_VU B ,
    MKTREF.MKTQT_NVDGenericStatus_VU C,
    --MKTREF.MKTQT_CodeConstr_VU constr,
    
     MKTREF.MKTQT_nomenclature brand,
     MKTREF.MKTQT_nomenclature model,
     MKTREF.MKTQT_nomenclature segment,
     MKTREF.MKTQT_nomenclature body,
     MKTREF.MKTQT_nomenclature energyComb,
     MKTREF.MKTQT_nomenclature transmission,
     MKTREF.MKTQT_nomenclature gearbox,
     MKTREF.MKTQT_nomenclature door_seat, --add
     MKTREF.MKTQT_nomenclature year_trimester, --add
/*     
MKTREF.MKTQT_NVDTechnical_VU co2EmissionWLTP_272,
MKTREF.MKTQT_NVDTechnical_VU co2EmissionWLTP_239,
*/     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTREF.MKTQT_CAPMAN_VU   CAPMAN,
     MKTREF.MKTQT_CAPRANGE_VU CAPRAN,
   
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VU CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,

     MKTREF.MKTQT_DIMENSIONS DIMENSIONS


where A.id = B.id 
and B.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
and c.status(+) = 'S'   ----
and c.genericcode(+) = '9'  ----
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('L',A.MANCODE)
and model.crossref_typecode(+)= 'CAP'  ---AJOUT 30012023
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('L',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('L',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission

-- AJOUT FILTRE VEHICULE SUR 8 ANS
AND nvl(B.effectiveto, to_date('01/01/2999', 'dd/MM/yyyy')) >= add_months(P_DATE_TRAI, -96) 
--

/*
and co2EmissionWLTP_272.id(+) = B.id and co2EmissionWLTP_272.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP_272.techcode(+) = 272
and co2EmissionWLTP_239.id(+) = B.id and co2EmissionWLTP_239.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP_239.techcode(+) = 239
*/

-- MODEL GEN
AND MG.BRAND_CODE  = brand.code
and MG.VEHICULE_NAME  =  CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation  --CAPMAN.NAME || '| ' || 
AND MG.VEHICULE_TYPE  = 'VU'
AND MG.CROSSREF_CODE  =  A.RANCODE || 'GEN' || B.generation 
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE


-- TRIM
AND TRIM.BRAND_CODE = brand.code
AND TRIM.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND TRIM.VEHICULE_TYPE  = 'VU'
AND TRIM.VEHICULE_TRIM  = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE  = concat('L', A.TrimCode)   
    AND  CAPTRIM.CODE(+) =  A.TrimCode


-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND MOTORISATIONBLVD.VEHICULE_TYPE  = 'VU'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  = (B.maximumPowerDin  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  B.nbRapports || '/' || B.batteryCapacity)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat) 


-- DIMENSION
AND DIMENSIONS.BRAND_CODE = brand.code
AND DIMENSIONS.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || B.generation
AND DIMENSIONS.VEHICULE_TYPE  = 'VU'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || B.height || ':' || B.length  || ':' ||  B.payLoad || ':' || B.maxLadenWeight)  

  
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+)='CAP'

and door_seat.crossref_code(+) = concat('-',B.seatNumber)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(B.refe, ',', '.')

------- code constructeur
--and constr.cap_id (+) =  B.ID
--and constr.LATEST_MODEL_YEAR(+) = B.refe

------------------------------------------- JIRA 24 PARTIE I (BLVD)
and brand.code is not null 
and brand.description_label is not null 
and model.description_label is not null ----
---and KINDCODE is not null 
and body.code is not null 
and TRIM.TRIM_ID is not null 
and energyComb.code is not null 
and B.maximumPowerDin is not null ---
and transmission.code is not null 
and gearbox.code is not null 
and year_trimester.code is not null
---and DIMENSIONS.DIMENSIONS_ID != '  '  
-------------------------------------------
---and nvl(B.effectiveto, SYSDATE) >= add_months(SYSDATE, -12) 
;





 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','## Alimentation de la table MKTREF.MKTQT_vehicle ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','## Flux BILAN   ##');
  
  BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_vehicle
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabelGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong   ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester,
capcode,
blvd
--code_constr
--effectivefrom,
              )
        VALUES
              (  
REC_vehicle_VP.tech_id ,
REC_vehicle_VP.tech_dateExtraction ,
REC_vehicle_VP.tech_dateInsertion  ,
REC_vehicle_VP.countryCode ,
REC_vehicle_VP.itemDirectoryVehicleRef ,
REC_vehicle_VP.versionState    ,
REC_vehicle_VP.validityStartDate   ,
REC_vehicle_VP.validityEndDate ,
REC_vehicle_VP.corporateGroupCode  ,
REC_vehicle_VP.corporateGroupLabel ,
REC_vehicle_VP.brandCode   ,
REC_vehicle_VP.brandLabel  ,
REC_vehicle_VP.familyCode  ,
REC_vehicle_VP.familyLabel ,
REC_vehicle_VP.generation  ,
REC_vehicle_VP.versionYear ,
REC_vehicle_VP.versionTrimester    ,
REC_vehicle_VP.segmentMarketingCode   ,
REC_vehicle_VP.faceLiftGeneration ,
REC_vehicle_VP.kindCode    ,
REC_vehicle_VP.bodyCode    ,
REC_vehicle_VP.height  ,
REC_vehicle_VP.length  ,
REC_vehicle_VP.sportinessFlag  ,
REC_vehicle_VP.co2EmissionNEDC ,
REC_vehicle_VP.co2EmissionWLTP ,
REC_vehicle_VP.co2ClassCode    ,
REC_vehicle_VP.fiscalHorsePower    ,
REC_vehicle_VP.maximumPowerDin ,
REC_vehicle_VP.maximumPowerKW  ,
REC_vehicle_VP.energy1Code ,
REC_vehicle_VP.energy1DetailCode   ,
REC_vehicle_VP.energy2Code ,
REC_vehicle_VP.energy2DetailCode   ,
REC_vehicle_VP.energyCombCode  ,
REC_vehicle_VP.motorisation    ,
REC_vehicle_VP.motorisationComb    ,
REC_vehicle_VP.cubicCapacity   ,
REC_vehicle_VP.transmissionTypeCode    ,
REC_vehicle_VP.gearBoxTypeCode ,
REC_vehicle_VP.nbRapports  ,
REC_vehicle_VP.typeVariantVersion  ,
REC_vehicle_VP.trimLevel   ,
REC_vehicle_VP.seatNumber  ,
REC_vehicle_VP.doorNumber  ,
REC_vehicle_VP.nedcCombineFuelConsumption  ,
REC_vehicle_VP.nedcExtraUrbanFuelConsumption   ,
REC_vehicle_VP.nedcUrbanFuelConsumption    ,
REC_vehicle_VP.wltpLowFuelConsumption  ,
REC_vehicle_VP.wltpMediumFuelConsumption   ,
REC_vehicle_VP.wltpHighFuelConsumption ,
REC_vehicle_VP.wltpExtraHighConsumption    ,
REC_vehicle_VP.wltpCombinedFuelConsumption ,
REC_vehicle_VP.wltpElectricConsumption ,
REC_vehicle_VP.wltpElectricRange   ,
REC_vehicle_VP.batteryCapacity ,
REC_vehicle_VP.maxLadenWeight  ,
REC_vehicle_VP.kerbWeight  ,
REC_vehicle_VP.payLoad ,
REC_vehicle_VP.hasTelematicBox ,
REC_vehicle_VP.catalogueDetail ,
REC_vehicle_VP.tsnNumber   ,
REC_vehicle_VP.wltpFlag    ,
REC_vehicle_VP.completenessFlag    ,
REC_vehicle_VP.validationUser  ,
REC_vehicle_VP.validationDate  ,
REC_vehicle_VP.updateUser  ,
REC_vehicle_VP.updateDate  ,
REC_vehicle_VP.purchaseCondition   ,
REC_vehicle_VP.designBases ,
REC_vehicle_VP.designCustomerShip  ,
REC_vehicle_VP.versionLabelGlobalShort ,
REC_vehicle_VP.versionLabelGlobalLong   ,
REC_vehicle_VP.versionLabelLocalShort  ,
REC_vehicle_VP.versionLabelLocalLong   ,
REC_vehicle_VP.VEHICULE_TYPE,
rec_vehicle_vp.MODEL_GEN_ID,
REC_vehicle_VP.TRIM_ID,
REC_vehicle_VP.MOTORISATIONBLVD_ID,
REC_vehicle_VP.DIMENSIONS_ID,
REC_vehicle_VP.door_seat,
REC_vehicle_VP.year_trimester,
REC_vehicle_VP.capcode,
(REC_vehicle_VP.BRANDCODE || REC_vehicle_VP.MODEL_GEN_ID || REC_vehicle_VP.KINDCODE || REC_vehicle_VP.DIMENSIONS_ID || REC_vehicle_VP.door_seat || REC_vehicle_VP.TRIM_ID || REC_vehicle_VP.energyCombCode || REC_vehicle_VP.MOTORISATIONBLVD_ID || REC_vehicle_VP.year_trimester || '0' )
--REC_vehicle_VP.code_constr
--REC_vehicle_VP.effectivefrom,
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle
        Set        
tech_id  =     REC_vehicle_VP.tech_id ,
tech_dateExtraction  = REC_vehicle_VP.tech_dateExtraction ,
tech_dateInsertion   = REC_vehicle_VP.tech_dateInsertion  ,
countryCode  = REC_vehicle_VP.countryCode ,
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
versionState     = REC_vehicle_VP.versionState    ,
validityStartDate    = REC_vehicle_VP.validityStartDate   ,
validityEndDate  = REC_vehicle_VP.validityEndDate ,
corporateGroupCode   = REC_vehicle_VP.corporateGroupCode  ,
corporateGroupLabel  = REC_vehicle_VP.corporateGroupLabel ,
brandCode    = REC_vehicle_VP.brandCode   ,
brandLabel   = REC_vehicle_VP.brandLabel  ,
familyCode   = REC_vehicle_VP.familyCode  ,
familyLabel  = REC_vehicle_VP.familyLabel ,
generation   = REC_vehicle_VP.generation  ,
versionYear  = REC_vehicle_VP.versionYear ,
versionTrimester     = REC_vehicle_VP.versionTrimester    ,
segmentMarketingCode    = REC_vehicle_VP.segmentMarketingCode   ,
faceLiftGeneration   = REC_vehicle_VP.faceLiftGeneration  ,
kindCode     = REC_vehicle_VP.kindCode    ,
bodyCode     = REC_vehicle_VP.bodyCode    ,
height   = REC_vehicle_VP.height  ,
length   = REC_vehicle_VP.length  ,
sportinessFlag   = REC_vehicle_VP.sportinessFlag  ,
co2EmissionNEDC  = REC_vehicle_VP.co2EmissionNEDC ,
co2EmissionWLTP  = REC_vehicle_VP.co2EmissionWLTP ,
co2ClassCode     = REC_vehicle_VP.co2ClassCode    ,
fiscalHorsePower     = REC_vehicle_VP.fiscalHorsePower    ,
maximumPowerDin  = REC_vehicle_VP.maximumPowerDin ,
maximumPowerKW   = REC_vehicle_VP.maximumPowerKW  ,
energy1Code  = REC_vehicle_VP.energy1Code ,
energy1DetailCode    = REC_vehicle_VP.energy1DetailCode   ,
energy2Code  = REC_vehicle_VP.energy2Code ,
energy2DetailCode    = REC_vehicle_VP.energy2DetailCode   ,
energyCombCode   = REC_vehicle_VP.energyCombCode  ,
motorisation     = REC_vehicle_VP.motorisation    ,
motorisationComb     = REC_vehicle_VP.motorisationComb    ,
cubicCapacity    = REC_vehicle_VP.cubicCapacity   ,
transmissionTypeCode     = REC_vehicle_VP.transmissionTypeCode    ,
gearBoxTypeCode  = REC_vehicle_VP.gearBoxTypeCode ,
nbRapports   = REC_vehicle_VP.nbRapports  ,
typeVariantVersion   = REC_vehicle_VP.typeVariantVersion  ,
trimLevel    = REC_vehicle_VP.trimLevel   ,
seatNumber   = REC_vehicle_VP.seatNumber  ,
doorNumber   = REC_vehicle_VP.doorNumber  ,
nedcCombineFuelConsumption   = REC_vehicle_VP.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_vehicle_VP.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_vehicle_VP.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_vehicle_VP.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_vehicle_VP.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_vehicle_VP.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_vehicle_VP.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_vehicle_VP.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_vehicle_VP.wltpElectricConsumption ,
wltpElectricRange    = REC_vehicle_VP.wltpElectricRange   ,
batteryCapacity  = REC_vehicle_VP.batteryCapacity ,
maxLadenWeight   = REC_vehicle_VP.maxLadenWeight  ,
kerbWeight   = REC_vehicle_VP.kerbWeight  ,
payLoad  = REC_vehicle_VP.payLoad ,
hasTelematicBox  = REC_vehicle_VP.hasTelematicBox ,
catalogueDetail  = REC_vehicle_VP.catalogueDetail ,
tsnNumber    = REC_vehicle_VP.tsnNumber   ,
wltpFlag     = REC_vehicle_VP.wltpFlag    ,
completenessFlag     = REC_vehicle_VP.completenessFlag    ,
validationUser   = REC_vehicle_VP.validationUser  ,
validationDate   = REC_vehicle_VP.validationDate  ,
updateUser   = REC_vehicle_VP.updateUser  ,
updateDate   = REC_vehicle_VP.updateDate  ,
purchaseCondition    = REC_vehicle_VP.purchaseCondition   ,
designBases  = REC_vehicle_VP.designBases ,
designCustomerShip   = REC_vehicle_VP.designCustomerShip  ,
versionLabelGlobalShort  = REC_vehicle_VP.versionLabelGlobalShort ,
versionLabelGlobalLong    = REC_vehicle_VP.versionLabelGlobalLong   ,
versionLabelLocalShort   = REC_vehicle_VP.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_vehicle_VP.versionLabelLocalLong,
VEHICULE_TYPE           =       REC_vehicle_VP.VEHICULE_TYPE,
model_gen                = REC_vehicle_vp.MODEL_GEN_ID,
TRIM                 =  REC_vehicle_VP.TRIM_ID,
MOTORISATIONBLVD    = REC_vehicle_VP.MOTORISATIONBLVD_ID,
DIMENSIONS       = REC_vehicle_VP.DIMENSIONS_ID,
door_seat = REC_vehicle_VP.door_seat,
year_trimester = REC_vehicle_VP.year_trimester,
capcode = REC_vehicle_VP.capcode,
blvd = (REC_vehicle_VP.BRANDCODE || REC_vehicle_VP.MODEL_GEN_ID || REC_vehicle_VP.KINDCODE || REC_vehicle_VP.DIMENSIONS_ID || REC_vehicle_VP.door_seat || REC_vehicle_VP.TRIM_ID || REC_vehicle_VP.energyCombCode || REC_vehicle_VP.MOTORISATIONBLVD_ID || REC_vehicle_VP.year_trimester || '0' )
--code_constr = REC_vehicle_VP.code_constr



        where  itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef  ;



        V_UPD := V_UPD + 1;

        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   -------------------------------VU  
   V_INS := 0;
   V_Upd := 0;
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_vehicle
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabelGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester,
capcode,
blvd
--code_constr
              )
        VALUES
              (  
REC_vehicle_VU.tech_id ,
REC_vehicle_VU.tech_dateExtraction ,
REC_vehicle_VU.tech_dateInsertion  ,
REC_vehicle_VU.countryCode ,
REC_vehicle_VU.itemDirectoryVehicleRef ,
REC_vehicle_VU.versionState    ,
REC_vehicle_VU.validityStartDate   ,
REC_vehicle_VU.validityEndDate ,
REC_vehicle_VU.corporateGroupCode  ,
REC_vehicle_VU.corporateGroupLabel ,
REC_vehicle_VU.brandCode   ,
REC_vehicle_VU.brandLabel  ,
REC_vehicle_VU.familyCode  ,
REC_vehicle_VU.familyLabel ,
REC_vehicle_VU.generation  ,
REC_vehicle_VU.versionYear ,
REC_vehicle_VU.versionTrimester    ,
REC_vehicle_VU.segmentMarketingCode   ,
REC_vehicle_VU.faceLiftGeneration  ,
REC_vehicle_VU.kindCode    ,
REC_vehicle_VU.bodyCode    ,
REC_vehicle_VU.height  ,
REC_vehicle_VU.length  ,
REC_vehicle_VU.sportinessFlag  ,
REC_vehicle_VU.co2EmissionNEDC ,
REC_vehicle_VU.co2EmissionWLTP ,
REC_vehicle_VU.co2ClassCode    ,
REC_vehicle_VU.fiscalHorsePower    ,
REC_vehicle_VU.maximumPowerDin ,
REC_vehicle_VU.maximumPowerKW  ,
REC_vehicle_VU.energy1Code ,
REC_vehicle_VU.energy1DetailCode   ,
REC_vehicle_VU.energy2Code ,
REC_vehicle_VU.energy2DetailCode   ,
REC_vehicle_VU.energyCombCode  ,
REC_vehicle_VU.motorisation    ,
REC_vehicle_VU.motorisationComb    ,
REC_vehicle_VU.cubicCapacity   ,
REC_vehicle_VU.transmissionTypeCode    ,
REC_vehicle_VU.gearBoxTypeCode ,
REC_vehicle_VU.nbRapports  ,
REC_vehicle_VU.typeVariantVersion  ,
REC_vehicle_VU.trimLevel   ,
REC_vehicle_VU.seatNumber  ,
REC_vehicle_VU.doorNumber  ,
REC_vehicle_VU.nedcCombineFuelConsumption  ,
REC_vehicle_VU.nedcExtraUrbanFuelConsumption   ,
REC_vehicle_VU.nedcUrbanFuelConsumption    ,
REC_vehicle_VU.wltpLowFuelConsumption  ,
REC_vehicle_VU.wltpMediumFuelConsumption   ,
REC_vehicle_VU.wltpHighFuelConsumption ,
REC_vehicle_VU.wltpExtraHighConsumption    ,
REC_vehicle_VU.wltpCombinedFuelConsumption ,
REC_vehicle_VU.wltpElectricConsumption ,
REC_vehicle_VU.wltpElectricRange   ,
REC_vehicle_VU.batteryCapacity ,
REC_vehicle_VU.maxLadenWeight  ,
REC_vehicle_VU.kerbWeight  ,
REC_vehicle_VU.payLoad ,
REC_vehicle_VU.hasTelematicBox ,
REC_vehicle_VU.catalogueDetail ,
REC_vehicle_VU.tsnNumber   ,
REC_vehicle_VU.wltpFlag    ,
REC_vehicle_VU.completenessFlag    ,
REC_vehicle_VU.validationUser  ,
REC_vehicle_VU.validationDate  ,
REC_vehicle_VU.updateUser  ,
REC_vehicle_VU.updateDate  ,
REC_vehicle_VU.purchaseCondition   ,
REC_vehicle_VU.designBases ,
REC_vehicle_VU.designCustomerShip  ,
REC_vehicle_VU.versionLabelGlobalShort ,
REC_vehicle_VU.versionLabelGlobalLong   ,
REC_vehicle_VU.versionLabelLocalShort  ,
REC_vehicle_VU.versionLabelLocalLong   ,
REC_vehicle_VU.VEHICULE_TYPE,
rec_vehicle_vu.MODEL_GEN_ID,
REC_vehicle_Vu.TRIM_ID,
REC_vehicle_Vu.MOTORISATIONBLVD_ID,
REC_vehicle_Vu.DIMENSIONS_ID,
REC_vehicle_Vu.door_seat,
REC_vehicle_Vu.year_trimester,
REC_vehicle_VU.capcode,
(REC_vehicle_VU.BRANDCODE || REC_vehicle_VU.MODEL_GEN_ID || REC_vehicle_VU.KINDCODE || REC_vehicle_VU.DIMENSIONS_ID || REC_vehicle_VU.door_seat || REC_vehicle_VU.TRIM_ID || REC_vehicle_VU.energyCombCode || REC_vehicle_VU.MOTORISATIONBLVD_ID || REC_vehicle_VU.year_trimester || '0' )
--REC_vehicle_VU.code_constr
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle
        Set        
tech_id  =     REC_vehicle_VU.tech_id ,
tech_dateExtraction  = REC_vehicle_VU.tech_dateExtraction ,
tech_dateInsertion   = REC_vehicle_VU.tech_dateInsertion  ,
countryCode  = REC_vehicle_VU.countryCode ,
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
versionState     = REC_vehicle_VU.versionState    ,
validityStartDate    = REC_vehicle_VU.validityStartDate   ,
validityEndDate  = REC_vehicle_VU.validityEndDate ,
corporateGroupCode   = REC_vehicle_VU.corporateGroupCode  ,
corporateGroupLabel  = REC_vehicle_VU.corporateGroupLabel ,
brandCode    = REC_vehicle_VU.brandCode   ,
brandLabel   = REC_vehicle_VU.brandLabel  ,
familyCode   = REC_vehicle_VU.familyCode  ,
familyLabel  = REC_vehicle_VU.familyLabel ,
generation   = REC_vehicle_VU.generation  ,
versionYear  = REC_vehicle_VU.versionYear ,
versionTrimester     = REC_vehicle_VU.versionTrimester    ,
segmentMarketingCode    = REC_vehicle_VU.segmentMarketingCode   ,
faceLiftGeneration   = REC_vehicle_VU.faceLiftGeneration  ,
kindCode     = REC_vehicle_VU.kindCode    ,
bodyCode     = REC_vehicle_VU.bodyCode    ,
height   = REC_vehicle_VU.height  ,
length   = REC_vehicle_VU.length  ,
sportinessFlag   = REC_vehicle_VU.sportinessFlag  ,
co2EmissionNEDC  = REC_vehicle_VU.co2EmissionNEDC ,
co2EmissionWLTP  = REC_vehicle_VU.co2EmissionWLTP ,
co2ClassCode     = REC_vehicle_VU.co2ClassCode    ,
fiscalHorsePower     = REC_vehicle_VU.fiscalHorsePower    ,
maximumPowerDin  = REC_vehicle_VU.maximumPowerDin ,
maximumPowerKW   = REC_vehicle_VU.maximumPowerKW  ,
energy1Code  = REC_vehicle_VU.energy1Code ,
energy1DetailCode    = REC_vehicle_VU.energy1DetailCode   ,
energy2Code  = REC_vehicle_VU.energy2Code ,
energy2DetailCode    = REC_vehicle_VU.energy2DetailCode   ,
energyCombCode   = REC_vehicle_VU.energyCombCode  ,
motorisation     = REC_vehicle_VU.motorisation    ,
motorisationComb     = REC_vehicle_VU.motorisationComb    ,
cubicCapacity    = REC_vehicle_VU.cubicCapacity   ,
transmissionTypeCode     = REC_vehicle_VU.transmissionTypeCode    ,
gearBoxTypeCode  = REC_vehicle_VU.gearBoxTypeCode ,
nbRapports   = REC_vehicle_VU.nbRapports  ,
typeVariantVersion   = REC_vehicle_VU.typeVariantVersion  ,
trimLevel    = REC_vehicle_VU.trimLevel   ,
seatNumber   = REC_vehicle_VU.seatNumber  ,
doorNumber   = REC_vehicle_VU.doorNumber  ,
nedcCombineFuelConsumption   = REC_vehicle_VU.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_vehicle_VU.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_vehicle_VU.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_vehicle_VU.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_vehicle_VU.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_vehicle_VU.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_vehicle_VU.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_vehicle_VU.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_vehicle_VU.wltpElectricConsumption ,
wltpElectricRange    = REC_vehicle_VU.wltpElectricRange   ,
batteryCapacity  = REC_vehicle_VU.batteryCapacity ,
maxLadenWeight   = REC_vehicle_VU.maxLadenWeight  ,
kerbWeight   = REC_vehicle_VU.kerbWeight  ,
payLoad  = REC_vehicle_VU.payLoad ,
hasTelematicBox  = REC_vehicle_VU.hasTelematicBox ,
catalogueDetail  = REC_vehicle_VU.catalogueDetail ,
tsnNumber    = REC_vehicle_VU.tsnNumber   ,
wltpFlag     = REC_vehicle_VU.wltpFlag    ,
completenessFlag     = REC_vehicle_VU.completenessFlag    ,
validationUser   = REC_vehicle_VU.validationUser  ,
validationDate   = REC_vehicle_VU.validationDate  ,
updateUser   = REC_vehicle_VU.updateUser  ,
updateDate   = REC_vehicle_VU.updateDate  ,
purchaseCondition    = REC_vehicle_VU.purchaseCondition   ,
designBases  = REC_vehicle_VU.designBases ,
designCustomerShip   = REC_vehicle_VU.designCustomerShip  ,
versionLabelGlobalShort  = REC_vehicle_VU.versionLabelGlobalShort ,
versionLabelGlobalLong    = REC_vehicle_VU.versionLabelGlobalLong   ,
versionLabelLocalShort   = REC_vehicle_VU.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_vehicle_VU.versionLabelLocalLong   ,
VEHICULE_TYPE       =       REC_vehicle_VU.VEHICULE_TYPE,
MODEL_GEN = REC_vehicle_Vu.MODEL_GEN_ID,
TRIM = REC_vehicle_Vu.TRIM_ID,
MOTORISATIONBLVD = REC_vehicle_Vu.MOTORISATIONBLVD_ID,
DIMENSIONS = REC_vehicle_Vu.DIMENSIONS_ID,
door_seat = REC_vehicle_Vu.door_seat,
year_trimester = REC_vehicle_Vu.year_trimester,
capcode = REC_vehicle_VU.capcode,
blvd = (REC_vehicle_VU.BRANDCODE || REC_vehicle_VU.MODEL_GEN_ID || REC_vehicle_VU.KINDCODE || REC_vehicle_VU.DIMENSIONS_ID || REC_vehicle_VU.door_seat || REC_vehicle_VU.TRIM_ID || REC_vehicle_VU.energyCombCode || REC_vehicle_VU.MOTORISATIONBLVD_ID || REC_vehicle_VU.year_trimester || '0' )
--code_constr = REC_vehicle_VU.code_constr


        where itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ;


        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;
    
  END ALIM_vehicle;



  FUNCTION ALIM_vehicle_crossRefs (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


  Cursor C_vehicle_crossRefs Is
select  distinct
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
'BLVD' as identifierType_BLVD,
'CONSTR' as identifierType_CONSTR,
'SUPPLIERCODE' as identifierType_CAPCODE, 
'SUPPLIERID' as identifierType_SUPPLIERID, 
blvd AS identifier_BLVD,
code_constr as identifier_CONSTR, 
capcode AS identifier_CAPCODE,
tech_id as identifier_SUPPLIERID  

from MKTQT_vehicle 
;  
  

/*  
select  distinct
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
'BLVD' as identifierType_BLVD,
'CONSTR' as identifierType_CONSTR,
'SUPPLIERCODE' as identifierType_CAPCODE, -- changement jira
'SUPPLIERID' as identifierType_SUPPLIERID, -- ajout jira
(case when 
brandcode is not null 
and brandLabel is not null 
and familyLabel is not null 
and KINDCODE is not null 
and bodyCode is not null 
and TRIM is not null 
and energyCombCode is not null 
and maximumPowerDin is not null 
and transmissionTypeCode is not null 
and gearBoxTypeCode is not null 
and year_trimester is not null
---and DIMENSIONS != '  '   
then (BRANDCODE || MODEL_GEN || KINDCODE || DIMENSIONS || door_seat || TRIM || energyCombCode ||MOTORISATIONBLVD || year_trimester || '0' ) ---- AJOUT DERNIER CARACT
else null end) AS identifier_BLVD,
veh.code_constr as identifier_CONSTR, 
capcode AS identifier_CAPCODE,
tech_id as identifier_SUPPLIERID -- ajout jira  
--validitystartdate,
--veh.tech_id
from MKTQT_vehicle veh
;
*/ 


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','## Alimentation de la table MKTREF.MKTQT_vehicle_crossRefs ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','## Flux BILAN   ##');
  
   BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle_crossRefs';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_crossRefs',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_crossRefs',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'BLVD: ',' ');  

  FOR REC_vehicle_crossRefs IN C_vehicle_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_crossRefs
              (   
--tech_id, 
itemDirectoryVehicleRef,
identifierType,
identifier
              )
        VALUES
              (  
--REC_vehicle_crossRefs.tech_id,
REC_vehicle_crossRefs.itemDirectoryVehicleRef,
REC_vehicle_crossRefs.identifierType_BLVD,
REC_vehicle_crossRefs.identifier_BLVD
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_crossRefs
        Set       

        identifier = REC_vehicle_crossRefs.identifier_BLVD

        where   itemDirectoryVehicleRef = REC_vehicle_crossRefs.itemDirectoryVehicleRef
        and identifierType = REC_vehicle_crossRefs.identifierType_BLVD;

        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   V_INS :=0;
   V_Upd :=0;
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'CONSTR : ',' ');  

  FOR REC_vehicle_crossRefs IN C_vehicle_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_crossRefs
              (   
--tech_id, 
itemDirectoryVehicleRef,
identifierType,
identifier

              )
        VALUES
              (  
--REC_vehicle_crossRefs.tech_id,
REC_vehicle_crossRefs.itemDirectoryVehicleRef,
REC_vehicle_crossRefs.identifierType_CONSTR,
REC_vehicle_crossRefs.identifier_CONSTR
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_crossRefs
        Set       

        identifier = REC_vehicle_crossRefs.identifier_CONSTR

        where   itemDirectoryVehicleRef = REC_vehicle_crossRefs.itemDirectoryVehicleRef
        and identifierType = REC_vehicle_crossRefs.identifierType_CONSTR;

        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   
   V_INS :=0;
   V_Upd :=0;
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'CAPCODE : ',' ');  

  FOR REC_vehicle_crossRefs IN C_vehicle_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_crossRefs
              (   
--tech_id, 
itemDirectoryVehicleRef,
identifierType,
identifier
              )
        VALUES
              (  
--REC_vehicle_crossRefs.tech_id,
REC_vehicle_crossRefs.itemDirectoryVehicleRef,
REC_vehicle_crossRefs.identifierType_CAPCODE,
REC_vehicle_crossRefs.identifier_CAPCODE
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_crossRefs
        Set       

        identifier = REC_vehicle_crossRefs.identifier_CAPCODE

        where   itemDirectoryVehicleRef = REC_vehicle_crossRefs.itemDirectoryVehicleRef
        and identifierType = REC_vehicle_crossRefs.identifierType_CAPCODE;

        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   



------AJOUTER 24/10/2022
   V_INS :=0;
   V_Upd :=0;
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'SUPPLIERID : ',' ');  

  FOR REC_vehicle_crossRefs IN C_vehicle_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_crossRefs
              (   
--tech_id, 
itemDirectoryVehicleRef,
identifierType,
identifier
              )
        VALUES
              (  
--REC_vehicle_crossRefs.tech_id,
REC_vehicle_crossRefs.itemDirectoryVehicleRef,
REC_vehicle_crossRefs.identifierType_SUPPLIERID,
REC_vehicle_crossRefs.identifier_SUPPLIERID
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_crossRefs
        Set       

        identifier = REC_vehicle_crossRefs.identifier_SUPPLIERID 

        where   itemDirectoryVehicleRef = REC_vehicle_crossRefs.itemDirectoryVehicleRef
        and identifierType = REC_vehicle_crossRefs.identifierType_SUPPLIERID;

        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   


          
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;

  END ALIM_vehicle_crossRefs;





  FUNCTION ALIM_vehicle_pricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

---- pas de doublons

  Cursor C_veh_pricings Is
  WITH PRICE_VP AS (Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
'VP' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
veh.VALIDITYSTARTDATE,
veh.VALIDITYENDDATE,
GREATEST(effectivefrom, validityStartDate) as priceStartDate,
case when effectiveto is null and validityEndDate is not null then validityEndDate
     when validityEndDate is null and effectiveto is not null then effectiveto
     else least(effectiveto, validityEndDate) end 
as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDPrices_VP B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VP'),
 PRICE_VU AS (Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH  
'VU' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
veh.VALIDITYSTARTDATE,
veh.VALIDITYENDDATE,
GREATEST(effectivefrom, validityStartDate) as priceStartDate,
case when effectiveto is null and validityEndDate is not null then validityEndDate
     when validityEndDate is null and effectiveto is not null then effectiveto
     else least(effectiveto, validityEndDate) end 
as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDPrices_VU B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VU')
 select VP.*, 
       CASE WHEN priceStartDate = priceEndDate THEN 0
            WHEN priceStartDate > VALIDITYENDDATE THEN 0
            WHEN priceEndDate < VALIDITYSTARTDATE THEN 0
            WHEN priceStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END AS FLAG_PEC     
FROM   PRICE_VP VP
WHERE   CASE WHEN priceStartDate = priceEndDate THEN 0
            WHEN priceStartDate > VALIDITYENDDATE THEN 0
            WHEN priceEndDate < VALIDITYSTARTDATE THEN 0
            WHEN priceStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END = 1

union
  select VU.*, 
       CASE WHEN priceStartDate = priceEndDate THEN 0
            WHEN priceStartDate > VALIDITYENDDATE THEN 0
            WHEN priceEndDate < VALIDITYSTARTDATE THEN 0
            WHEN priceStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END AS FLAG_PEC     
FROM   PRICE_VU VU
WHERE   CASE WHEN priceStartDate = priceEndDate THEN 0
            WHEN priceStartDate > VALIDITYENDDATE THEN 0
            WHEN priceEndDate < VALIDITYSTARTDATE THEN 0
            WHEN priceStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END = 1
;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','## Alimentation de la table MKTREF.MKTQT_vehicle_pricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_pricings','## Flux BILAN   ##');
  
  BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle_pricings';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_pricings',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_pricings',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_pricings IN C_veh_pricings
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_pricings
              ( 
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
tariffAreaCode,
priceCode,
priceType,
priceTypeCustomer,
priceStartDate,
priceEndDate,
vatAmount,
priceET,
priceIT,
priceIncludeVAT,
currency,
immAmount,
immRate,
novaAmount,
novaRate,
priceWithoutOtrCostIT,
priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT
              )
        VALUES
              (  
REC_veh_pricings.tech_id,    ------ AJOUT POUR JOINTURE   
REC_veh_pricings.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_pricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_pricings.tariffAreaCode,
REC_veh_pricings.priceCode,
REC_veh_pricings.priceType,
REC_veh_pricings.priceTypeCustomer,
REC_veh_pricings.priceStartDate,
REC_veh_pricings.priceEndDate,
REC_veh_pricings.vatAmount,
REC_veh_pricings.priceET,
REC_veh_pricings.priceIT,
REC_veh_pricings.priceIncludeVAT,
REC_veh_pricings.currency,
REC_veh_pricings.immAmount,
REC_veh_pricings.immRate,
REC_veh_pricings.novaAmount,
REC_veh_pricings.novaRate,
REC_veh_pricings.priceWithoutOtrCostIT,
REC_veh_pricings.priceWithoutOtrCostET,
REC_veh_pricings.priceWithoutOtrCostIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_pricings
        Set        
tech_id          =      REC_veh_pricings.tech_id ,
tariffAreaCode = REC_veh_pricings.tariffAreaCode,
priceCode = REC_veh_pricings.priceCode,
priceType = REC_veh_pricings.priceType,
priceTypeCustomer = REC_veh_pricings.priceTypeCustomer,
--priceStartDate = REC_veh_pricings.priceStartDate,
priceEndDate = REC_veh_pricings.priceEndDate,
vatAmount = REC_veh_pricings.vatAmount,
priceET = REC_veh_pricings.priceET,
priceIT = REC_veh_pricings.priceIT,
priceIncludeVAT = REC_veh_pricings.priceIncludeVAT,
currency = REC_veh_pricings.currency,
immAmount = REC_veh_pricings.immAmount,
immRate = REC_veh_pricings.immRate,
novaAmount = REC_veh_pricings.novaAmount,
novaRate = REC_veh_pricings.novaRate,
priceWithoutOtrCostIT = REC_veh_pricings.priceWithoutOtrCostIT,
priceWithoutOtrCostET = REC_veh_pricings.priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT = REC_veh_pricings.priceWithoutOtrCostIncludeVAT,
VEHICULE_TYPE = REC_veh_pricings.VEHICULE_TYPE  

        where  itemDirectoryVehicleRef = REC_veh_pricings.itemDirectoryVehicleRef 
                and priceStartDate = REC_veh_pricings.priceStartDate
        ;

        V_UPD := V_UPD + 1;
        --Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings',to_char(REC_veh_pricings.itemDirectoryVehicleRef)|| '-' || to_char(REC_veh_pricings.priceStartDate) || '-' || to_char(REC_veh_pricings.MODEL_GEN) );
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_pricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_vehicle_pricings;




  FUNCTION ALIM_vehicle_options_vp (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS_1   NUMBER := 0;
  V_UPD_1   NUMBER := 0;
  V_INS_2   NUMBER := 0;
  V_UPD_2   NUMBER := 0;
  V_INS_3   NUMBER := 0;
  V_UPD_3   NUMBER := 0;
  V_ISPACK_VP  VARCHAR2(5);
  
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;
  
  

  Cursor C_veh_options Is
  
    WITH OPTION_VP AS (Select /*+ PARALLEL(4) */ distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
'VP' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (44, 45, 73, 74, 75, 76) then 'C' when B.catcode in (81, 82, 86, 90, 97) then 'T' else 'O' end) as typeCode,
--(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
(case when B.catcode in (44, 45, 73, 74, 75, 76, 81, 82, 86, 90, 97) then 'true' else 'false' end) as isAgregated, ---JIRA DWH-21
veh.VALIDITYSTARTDATE,
veh.VALIDITYENDDATE,
A.effectivefrom as startDate,
A.effectiveto as endDate,
GREATEST(A.effectivefrom, validityStartDate) as optionStartDate,
case when A.effectiveto is null and validityEndDate is not null then validityEndDate
     when validityEndDate is null and A.effectiveto is not null then A.effectiveto
     else least(A.effectiveto, validityEndDate) end 
as optionEndDate,
'en_GB' as language, --
B.description as description,
B.longdescription as longdescription,
A.basic as basic ,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
---effectiveFrom as pricebookStartDate,
---effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
--Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT


from mktqt_vehicle veh, mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B--, mktref.mktqt_NVDPackContents_VP C, MKTQT_NVDPackPeriods_VP D
where veh.tech_id = A.id --and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null)
and veh.VEHICULE_TYPE = 'VP'
--and veh.tech_id = 100571
and A.optioncode = B.optioncode)
--and A.optioncode = C.optioncode (+) 
--and C.periodcode = D.periodcode (+))
 select VP.*, 
       CASE WHEN optionStartDate = optionEndDate THEN 0
            WHEN optionStartDate > VALIDITYENDDATE THEN 0
            WHEN optionEndDate < VALIDITYSTARTDATE THEN 0
            WHEN optionStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END AS FLAG_PEC     
FROM   OPTION_VP VP
WHERE   CASE WHEN optionStartDate = optionEndDate THEN 0
            WHEN optionStartDate > VALIDITYENDDATE THEN 0
            WHEN optionEndDate < VALIDITYSTARTDATE THEN 0
            WHEN optionStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END = 1;

/*union   

select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108) then 'C' when B.catcode in (109, 110, 111, 112, 113) then 'T' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'true' else 'false' end)  as isAgregated, ---JIRA DWH-21
A.effectivefrom as startDate,
A.effectiveto as endDate ,
'en_GB' as language,  --
B.description as description,
B.longdescription as longdescription,
--A.effectivefrom as effectivefrom,
--A.effectiveto as effectiveto,
A.basic as basic ,

NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
---effectiveFrom as pricebookStartDate,
---effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
--Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT

from mktqt_vehicle veh, mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B, mktref.mktqt_NVDPackContents_VU C, MKTQT_NVDPackPeriods_VU D
where veh.tech_id = A.id and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null) and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode (+)
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)
and A.effectivefrom = (select max(effectivefrom) from mktref.mktqt_NVDOption_VU where ID = A.ID and OPTIONCODE = A.OPTIONCODE) 
  
; */
 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vp','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vp','## Alimentation de la table MKTREF.MKTQT_vehicle_options ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vp','## Flux BILAN   ##');
  
    BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle_options';
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTQT_vehicle_optionslabels';
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTQT_vehicle_optionspricings';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_options_vp',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_options_vp',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  

  FOR REC_veh_options IN C_veh_options
  LOOP

       /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_options
       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD_1 + V_INS_1 + V_UPD_2 + V_INS_2 + V_UPD_3 + V_INS_3, 50000)=0 THEN COMMIT;
        END IF;
        
        BEGIN
          select 'True'
          INTO   V_ISPACK_VP
          from   mktref.mktqt_NVDPackContents_VP C,
                 MKTQT_NVDPackPeriods_VP D
          WHERE  C.optioncode = REC_veh_options.code
          AND    C.periodcode = D.periodcode;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          V_ISPACK_VP := 'False';
                  WHEN OTHERS THEN
          V_ISPACK_VP := 'False';
        END;
        

        INSERT INTO MKTREF.MKTQT_vehicle_options
              (  
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
constructorCode,
typeCode,
isPack,
isAgregated,
startDate,
endDate,
description, --add
longdescription, --add
--effectivefrom, --add
--effectiveto, --add
basic  --add
              )
              
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.constructorCode,
REC_veh_options.typeCode,
V_ISPACK_VP,
REC_veh_options.isAgregated,
REC_veh_options.optionStartDate,
REC_veh_options.optionEndDate,
REC_veh_options.description, --add
REC_veh_options.longdescription, --add
--REC_veh_options.effectivefrom, --add
--REC_veh_options.effectiveto, --add
REC_veh_options.basic  --add
              );

        V_INS_1 := V_INS_1 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_options
        Set       

--code = REC_veh_options.code,
tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
constructorCode = REC_veh_options.constructorCode,
typeCode = REC_veh_options.typeCode,
isPack   = V_ISPACK_VP,
isAgregated = REC_veh_options.isAgregated,
endDate  = REC_veh_options.optionEndDate,
description = REC_veh_options.description, --add
longdescription = REC_veh_options.longdescription, --add
--effectivefrom = REC_veh_options.effectivefrom, --add
--effectiveto = REC_veh_options.effectiveto, --add
basic = REC_veh_options.basic  --add

        where code = REC_veh_options.code
        and   itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef
        and   startDate = REC_veh_options.optionStartDate;
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD_1 := V_UPD_1 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vp','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
        
        /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_optionslabels
       /*************************************************************************/
       /* BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionslabels
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.language,
REC_veh_options.description,
REC_veh_options.longdescription
              );

        V_INS_2 := V_INS_2 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionslabels
        Set       

tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
labelShort = REC_veh_options.description,
labelLong = REC_veh_options.longdescription

        where code = REC_veh_options.code 
        and language = REC_veh_options.language
        and itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef ;------ AJOUT POUR JOINTURE  





        V_UPD_2 := V_UPD_2 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vplabels','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
        */
        
        /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_optionspricings
       /*************************************************************************/
        /*BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;
     

        INSERT INTO MKTREF.MKTQT_vehicle_optionspricings
              (
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.territorialityCode,
REC_veh_options.pricebookCode,
REC_veh_options.pricebookType,
REC_veh_options.pricebookTypeCustomer,
REC_veh_options.StartDate,  ---
REC_veh_options.EndDate, ---
REC_veh_options.vatAmount,
REC_veh_options.currency,
REC_veh_options.Basic,
REC_veh_options.priceIT,
REC_veh_options.priceIncludeVAT,
REC_veh_options.basePriceWithChargesET,
REC_veh_options.basePriceWithChargesIT,
REC_veh_options.basePriceWithChargesIncludeVAT
              );

        V_INS_3 := V_INS_3 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionspricings
        Set       
        tech_id = REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
        VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
territorialityCode = REC_veh_options.territorialityCode,
pricebookCode = REC_veh_options.pricebookCode,
pricebookType = REC_veh_options.pricebookType,
pricebookTypeCustomer = REC_veh_options.pricebookTypeCustomer,
pricebookEndDate = REC_veh_options.EndDate,      ---
vatAmount = REC_veh_options.vatAmount,
currency = REC_veh_options.currency,
priceET = REC_veh_options.Basic,
priceIT = REC_veh_options.priceIT,
priceIncludeVAT = REC_veh_options.priceIncludeVAT,
basePriceWithChargesET = REC_veh_options.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_options.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_options.basePriceWithChargesIncludeVAT

        where  code = REC_veh_options.code  
        and itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef
        and pricebookStartDate = REC_veh_options.StartDate;  ------ AJOUT POUR JOINTURE  
 


        V_UPD_3 := V_UPD_3 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vp_pricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;*/
        
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS_1 + V_INS_2 + V_INS_3 ;
   V_Updates := V_Upd_1 + V_UPD_2 + V_UPD_3;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vp','Nombre de mises a jour : '||TO_CHAR(V_UPD_1)||', d''insertions : '||TO_CHAR(V_INS_1));
   
   /*************************************************************************/
   -- MKTREF.MKTQT_vehicle_optionslabels
   /*************************************************************************/
   BEGIN
   INSERT /*+ append */ INTO  MKTQT_VEHICLE_OPTIONSLABELS (TECH_ID,
                              ITEMDIRECTORYVEHICLEREF,
                              VEHICULE_TYPE,
                              CODE,
                              LANGUAGE,
                              LABELSHORT,
                              LABELLONG)
                              SELECT DISTINCT TECH_ID, ITEMDIRECTORYVEHICLEREF, VEHICULE_TYPE, CODE, 'en_GB', DESCRIPTION, LONGDESCRIPTION
                              FROM MKTQT_VEHICLE_OPTIONS
                              WHERE VEHICULE_TYPE = 'VP';
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vplabels','Nombre de mises a jour : '||0||', d''insertions : '||TO_CHAR(SQL%ROWCOUNT));
   COMMIT;
   EXCEPTION WHEN OTHERS THEN
    V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
    COMMIT;
    V_ERR := 1;
    RETURN V_ERR;
   END;
   
   /*************************************************************************/
   -- MKTREF.MKTQT_vehicle_optionspricings
   /*************************************************************************/
   BEGIN
   INSERT /*+ append */ INTO  MKTQT_VEHICLE_OPTIONSPRICINGS (TECH_ID,
                              ITEMDIRECTORYVEHICLEREF,
                              VEHICULE_TYPE,
                              CODE,
                              TERRITORIALITYCODE,
                              PRICEBOOKCODE,
                              PRICEBOOKTYPE,
                              PRICEBOOKTYPECUSTOMER,
                              PRICEBOOKSTARTDATE,
                              PRICEBOOKENDDATE,
                              VATAMOUNT,
                              CURRENCY,
                              PRICEET,
                              PRICEIT,
                              PRICEINCLUDEVAT,
                              BASEPRICEWITHCHARGESET,
                              BASEPRICEWITHCHARGESIT,
                              BASEPRICEWITHCHARGESINCLUDEVAT)
                              SELECT DISTINCT TECH_ID, ITEMDIRECTORYVEHICLEREF, VEHICULE_TYPE, CODE, NULL, NULL, NULL, NULL, STARTDATE, ENDDATE, NULL, 'GBP', basic, NULL, NULL, NULL, NULL, NULL
                              FROM MKTQT_VEHICLE_OPTIONS
                              WHERE VEHICULE_TYPE = 'VP';
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vp_pricings','Nombre de mises a jour : '||0||', d''insertions : '||TO_CHAR(SQL%ROWCOUNT));
   COMMIT;
   EXCEPTION WHEN OTHERS THEN
    V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
    COMMIT;
    V_ERR := 1;
    RETURN V_ERR;
   END;

      
   
   -----------------------------------------------------
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vp','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
   End;
   
    
  END ALIM_vehicle_options_vp;


FUNCTION ALIM_vehicle_options_vu (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS_1   NUMBER := 0;
  V_UPD_1   NUMBER := 0;
  V_INS_2   NUMBER := 0;
  V_UPD_2   NUMBER := 0;
  V_INS_3   NUMBER := 0;
  V_UPD_3   NUMBER := 0;
  V_ISPACK_VU  VARCHAR2(5);
  
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;
  
  

  Cursor C_veh_options Is
  
    WITH OPTION_VU AS (Select /*+ PARALLEL(4) */ distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108) then 'C' when B.catcode in (109, 110, 111, 112, 113) then 'T' else 'O' end) as typeCode,
--(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'true' else 'false' end) as isAgregated, ---JIRA DWH-21
veh.VALIDITYSTARTDATE,
veh.VALIDITYENDDATE,
A.effectivefrom as startDate,
A.effectiveto as endDate,
GREATEST(A.effectivefrom, validityStartDate) as optionStartDate,
case when A.effectiveto is null and validityEndDate is not null then validityEndDate
     when validityEndDate is null and A.effectiveto is not null then A.effectiveto
     else least(A.effectiveto, validityEndDate) end 
as optionEndDate,
'en_GB' as language, --
B.description as description,
B.longdescription as longdescription,
A.basic as basic ,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
---effectiveFrom as pricebookStartDate,
---effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
--Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT


from mktqt_vehicle veh, mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B--, mktref.mktqt_NVDPackContents_VP C, MKTQT_NVDPackPeriods_VP D
where veh.tech_id = A.id --and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null)
and veh.VEHICULE_TYPE = 'VU'
--and veh.tech_id = 100571
and A.optioncode = B.optioncode )
--and A.optioncode = C.optioncode (+) 
--and C.periodcode = D.periodcode (+))
 select VU.*, 
       CASE WHEN optionStartDate = optionEndDate THEN 0
            WHEN optionStartDate > VALIDITYENDDATE THEN 0
            WHEN optionEndDate < VALIDITYSTARTDATE THEN 0
            WHEN optionStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END AS FLAG_PEC     
FROM   OPTION_VU VU
WHERE   CASE WHEN optionStartDate = optionEndDate THEN 0
            WHEN optionStartDate > VALIDITYENDDATE THEN 0
            WHEN optionEndDate < VALIDITYSTARTDATE THEN 0
            WHEN optionStartDate >= VALIDITYSTARTDATE THEN 1
            ELSE 0
       END = 1;

/*union   

select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108) then 'C' when B.catcode in (109, 110, 111, 112, 113) then 'T' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'true' else 'false' end)  as isAgregated, ---JIRA DWH-21
A.effectivefrom as startDate,
A.effectiveto as endDate ,
'en_GB' as language,  --
B.description as description,
B.longdescription as longdescription,
--A.effectivefrom as effectivefrom,
--A.effectiveto as effectiveto,
A.basic as basic ,

NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
---effectiveFrom as pricebookStartDate,
---effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
--Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT

from mktqt_vehicle veh, mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B, mktref.mktqt_NVDPackContents_VU C, MKTQT_NVDPackPeriods_VU D
where veh.tech_id = A.id and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null) and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode (+)
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)
and A.effectivefrom = (select max(effectivefrom) from mktref.mktqt_NVDOption_VU where ID = A.ID and OPTIONCODE = A.OPTIONCODE) 
  
; */
 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vu','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vu','## Alimentation de la table MKTREF.MKTQT_vehicle_options ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vu','## Flux BILAN   ##');
  
  
       
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  

  FOR REC_veh_options IN C_veh_options
  LOOP

       /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_options
       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD_1 + V_INS_1 + V_UPD_2 + V_INS_2 + V_UPD_3 + V_INS_3, 10000)=0 THEN COMMIT;
        END IF;
        
        BEGIN
          select 'True'
          INTO   V_ISPACK_VU
          from   mktref.mktqt_NVDPackContents_VU C,
                 MKTQT_NVDPackPeriods_VU D
          WHERE  C.optioncode = REC_veh_options.code
          AND    C.periodcode = D.periodcode;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          V_ISPACK_VU := 'False';
                  WHEN OTHERS THEN
          V_ISPACK_VU := 'False';
        END;
        

        INSERT INTO MKTREF.MKTQT_vehicle_options
              (  
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
constructorCode,
typeCode,
isPack,
isAgregated,
startDate,
endDate,
description, --add
longdescription, --add
--effectivefrom, --add
--effectiveto, --add
basic  --add
              )
              
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.constructorCode,
REC_veh_options.typeCode,
V_ISPACK_VU,
REC_veh_options.isAgregated,
REC_veh_options.optionStartDate,
REC_veh_options.optionEndDate,
REC_veh_options.description, --add
REC_veh_options.longdescription, --add
--REC_veh_options.effectivefrom, --add
--REC_veh_options.effectiveto, --add
REC_veh_options.basic  --add
              );

        V_INS_1 := V_INS_1 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_options
        Set       

--code = REC_veh_options.code,
tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
constructorCode = REC_veh_options.constructorCode,
typeCode = REC_veh_options.typeCode,
isPack   = V_ISPACK_VU,
isAgregated = REC_veh_options.isAgregated,
endDate  = REC_veh_options.optionEndDate,
description = REC_veh_options.description, --add
longdescription = REC_veh_options.longdescription, --add
--effectivefrom = REC_veh_options.effectivefrom, --add
--effectiveto = REC_veh_options.effectiveto, --add
basic = REC_veh_options.basic  --add

        where code = REC_veh_options.code
        and   itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef
        and   startDate = REC_veh_options.optionStartDate;
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD_1 := V_UPD_1 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vu','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
        
        /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_optionslabels
       /*************************************************************************/
       /* BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionslabels
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.language,
REC_veh_options.description,
REC_veh_options.longdescription
              );

        V_INS_2 := V_INS_2 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionslabels
        Set       

tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
labelShort = REC_veh_options.description,
labelLong = REC_veh_options.longdescription

        where code = REC_veh_options.code 
        and language = REC_veh_options.language
        and itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef ;------ AJOUT POUR JOINTURE  





        V_UPD_2 := V_UPD_2 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionslabels_vu','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;*/
        
        /*************************************************************************/
       -- MKTREF.MKTQT_vehicle_optionspricings
       /*************************************************************************/
       /* BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;
     

        INSERT INTO MKTREF.MKTQT_vehicle_optionspricings
              (
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.territorialityCode,
REC_veh_options.pricebookCode,
REC_veh_options.pricebookType,
REC_veh_options.pricebookTypeCustomer,
REC_veh_options.StartDate,  ---
REC_veh_options.EndDate, ---
REC_veh_options.vatAmount,
REC_veh_options.currency,
REC_veh_options.Basic,
REC_veh_options.priceIT,
REC_veh_options.priceIncludeVAT,
REC_veh_options.basePriceWithChargesET,
REC_veh_options.basePriceWithChargesIT,
REC_veh_options.basePriceWithChargesIncludeVAT
              );

        V_INS_3 := V_INS_3 + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionspricings
        Set       
        tech_id = REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
        VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
territorialityCode = REC_veh_options.territorialityCode,
pricebookCode = REC_veh_options.pricebookCode,
pricebookType = REC_veh_options.pricebookType,
pricebookTypeCustomer = REC_veh_options.pricebookTypeCustomer,
pricebookEndDate = REC_veh_options.EndDate,      ---
vatAmount = REC_veh_options.vatAmount,
currency = REC_veh_options.currency,
priceET = REC_veh_options.Basic,
priceIT = REC_veh_options.priceIT,
priceIncludeVAT = REC_veh_options.priceIncludeVAT,
basePriceWithChargesET = REC_veh_options.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_options.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_options.basePriceWithChargesIncludeVAT

        where  code = REC_veh_options.code  
        and itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef
        and pricebookStartDate = REC_veh_options.StartDate;  ------ AJOUT POUR JOINTURE  
 


        V_UPD_3 := V_UPD_3 + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings_vu','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;*/
        
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS_1 + V_INS_2 + V_INS_3 ;
   V_Updates := V_Upd_1 + V_UPD_2 + V_UPD_3;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vu','Nombre de mises a jour : '||TO_CHAR(V_UPD_1)||', d''insertions : '||TO_CHAR(V_INS_1));
   
   /*************************************************************************/
   -- MKTREF.MKTQT_vehicle_optionslabels
   /*************************************************************************/
   BEGIN
   INSERT /*+ append */ INTO  MKTQT_VEHICLE_OPTIONSLABELS (TECH_ID,
                              ITEMDIRECTORYVEHICLEREF,
                              VEHICULE_TYPE,
                              CODE,
                              LANGUAGE,
                              LABELSHORT,
                              LABELLONG)
                              SELECT DISTINCT TECH_ID, ITEMDIRECTORYVEHICLEREF, VEHICULE_TYPE, CODE, 'en_GB', DESCRIPTION, LONGDESCRIPTION
                              FROM MKTQT_VEHICLE_OPTIONS
                              WHERE VEHICULE_TYPE = 'VU';
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vulabels','Nombre de mises a jour : '||0||', d''insertions : '||TO_CHAR(SQL%ROWCOUNT));
   COMMIT;
   EXCEPTION WHEN OTHERS THEN
    V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
    COMMIT;
    V_ERR := 1;
    RETURN V_ERR;
   END;
   
   /*************************************************************************/
   -- MKTREF.MKTQT_vehicle_optionspricings
   /*************************************************************************/
   BEGIN
   INSERT /*+ append */ INTO  MKTQT_VEHICLE_OPTIONSPRICINGS (TECH_ID,
                              ITEMDIRECTORYVEHICLEREF,
                              VEHICULE_TYPE,
                              CODE,
                              TERRITORIALITYCODE,
                              PRICEBOOKCODE,
                              PRICEBOOKTYPE,
                              PRICEBOOKTYPECUSTOMER,
                              PRICEBOOKSTARTDATE,
                              PRICEBOOKENDDATE,
                              VATAMOUNT,
                              CURRENCY,
                              PRICEET,
                              PRICEIT,
                              PRICEINCLUDEVAT,
                              BASEPRICEWITHCHARGESET,
                              BASEPRICEWITHCHARGESIT,
                              BASEPRICEWITHCHARGESINCLUDEVAT)
                              SELECT DISTINCT TECH_ID, ITEMDIRECTORYVEHICLEREF, VEHICULE_TYPE, CODE, NULL, NULL, NULL, NULL, STARTDATE, ENDDATE, NULL, 'GBP', basic, NULL, NULL, NULL, NULL, NULL
                              FROM MKTQT_VEHICLE_OPTIONS
                              WHERE VEHICULE_TYPE = 'VU';
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options_vu_pricings','Nombre de mises a jour : '||0||', d''insertions : '||TO_CHAR(SQL%ROWCOUNT));
   COMMIT;
   EXCEPTION WHEN OTHERS THEN
    V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
    COMMIT;
    V_ERR := 1;
    RETURN V_ERR;
   END;

      
   
   -----------------------------------------------------
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options_vu','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
   End;
   
    
  END ALIM_vehicle_options_vu;

/*

  FUNCTION ALIM_vehicle_optionslabels (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;



  Cursor C_veh_optionslabels Is
  
select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code, --ADD
'en_GB' as language,
description as labelShort,
longdescription as labelLong

from MKTREF.MKTQT_vehicle_options
;
  

 
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionslabels','## Alimentation de la table MKTREF.MKTQT_vehicle_optionslabels ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionslabels','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionslabels IN C_veh_optionslabels
  LOOP

       
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionslabels
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_optionslabels.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_optionslabels.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_optionslabels.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_optionslabels.code,
REC_veh_optionslabels.language,
REC_veh_optionslabels.labelShort,
REC_veh_optionslabels.labelLong
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionslabels
        Set       

tech_id = REC_veh_optionslabels.tech_id,
VEHICULE_TYPE = REC_veh_optionslabels.VEHICULE_TYPE,
labelShort = REC_veh_optionslabels.labelShort,
labelLong = REC_veh_optionslabels.labelLong

        where code = REC_veh_optionslabels.code 
        and language = REC_veh_optionslabels.language
        and itemDirectoryVehicleRef = REC_veh_optionslabels.itemDirectoryVehicleRef ;------ AJOUT POUR JOINTURE  





        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionslabels','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionslabels','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   

   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;


  END ALIM_vehicle_optionslabels;





  FUNCTION ALIM_vehicle_optionspricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_veh_optionspricings Is

  
  select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
effectiveFrom as pricebookStartDate,
effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT
  from MKTREF.MKTQT_vehicle_options
  ;
    

  
 
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings','## Alimentation de la table MKTREF.MKTQT_vehicle_optionspricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionspricings','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionspricings IN C_veh_optionspricings
  LOOP

       
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionspricings
              (
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_optionspricings.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_optionspricings.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_optionspricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_optionspricings.code,
REC_veh_optionspricings.territorialityCode,
REC_veh_optionspricings.pricebookCode,
REC_veh_optionspricings.pricebookType,
REC_veh_optionspricings.pricebookTypeCustomer,
REC_veh_optionspricings.pricebookStartDate,
REC_veh_optionspricings.pricebookEndDate,
REC_veh_optionspricings.vatAmount,
REC_veh_optionspricings.currency,
REC_veh_optionspricings.priceET,
REC_veh_optionspricings.priceIT,
REC_veh_optionspricings.priceIncludeVAT,
REC_veh_optionspricings.basePriceWithChargesET,
REC_veh_optionspricings.basePriceWithChargesIT,
REC_veh_optionspricings.basePriceWithChargesIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionspricings
        Set       
        tech_id = REC_veh_optionspricings.tech_id,    ------ AJOUT POUR JOINTURE
        VEHICULE_TYPE = REC_veh_optionspricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
territorialityCode = REC_veh_optionspricings.territorialityCode,
pricebookCode = REC_veh_optionspricings.pricebookCode,
pricebookType = REC_veh_optionspricings.pricebookType,
pricebookTypeCustomer = REC_veh_optionspricings.pricebookTypeCustomer,
pricebookStartDate = REC_veh_optionspricings.pricebookStartDate,
pricebookEndDate = REC_veh_optionspricings.pricebookEndDate,
vatAmount = REC_veh_optionspricings.vatAmount,
currency = REC_veh_optionspricings.currency,
priceET = REC_veh_optionspricings.priceET,
priceIT = REC_veh_optionspricings.priceIT,
priceIncludeVAT = REC_veh_optionspricings.priceIncludeVAT,
basePriceWithChargesET = REC_veh_optionspricings.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_optionspricings.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_optionspricings.basePriceWithChargesIncludeVAT

        where  code = REC_veh_optionspricings.code  
        and itemDirectoryVehicleRef = REC_veh_optionspricings.itemDirectoryVehicleRef ;  ------ AJOUT POUR JOINTURE  
 


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionspricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;

    
  END ALIM_vehicle_optionspricings;

*/

/***********************************    JIRA DWH-21     **************************************/
  FUNCTION ALIM_vehicle_aggregatedOpt (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_veh_aggregatedOpt Is
  
  select distinct
tech_id AS tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef AS itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE AS VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code AS code,
(case when typeCode = 'C' then 'ext' when typeCode = 'T' then 'int' end) AS categoryCode,
'GBP' AS currency,
BASIC AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
NULL AS vatAmount

from MKTREF.MKTQT_vehicle_options
where isAgregated = 'true'
;
    

  
  
 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_aggregatedOpt','## Alimentation de la table MKTREF.MKTQT_vehicle_aggregatedOpt ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_aggregatedOpt','## Flux BILAN   ##');
  
  BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle_aggregatedOpt';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_aggregatedOpt',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_aggregatedOpt',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP et VU : ',' ');  


  FOR REC_veh_aggregatedOpt IN C_veh_aggregatedOpt
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_aggregatedOpt
              (
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
categoryCode,
currency,
priceET,
priceIT,
priceIncludeVAT,
vatAmount
              )
        VALUES
              (  
REC_veh_aggregatedOpt.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_aggregatedOpt.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_aggregatedOpt.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_aggregatedOpt.code,
REC_veh_aggregatedOpt.categoryCode,
REC_veh_aggregatedOpt.currency,
REC_veh_aggregatedOpt.priceET,
REC_veh_aggregatedOpt.priceIT,
REC_veh_aggregatedOpt.priceIncludeVAT,
REC_veh_aggregatedOpt.vatAmount
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_aggregatedOpt
        Set       
        tech_id = REC_veh_aggregatedOpt.tech_id,    ------ AJOUT POUR JOINTURE
        VEHICULE_TYPE = REC_veh_aggregatedOpt.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
categoryCode =  REC_veh_aggregatedOpt.categoryCode,
currency =  REC_veh_aggregatedOpt.currency,
priceET =  REC_veh_aggregatedOpt.priceET,
priceIT =  REC_veh_aggregatedOpt.priceIT,
priceIncludeVAT =  REC_veh_aggregatedOpt.priceIncludeVAT,
vatAmount =  REC_veh_aggregatedOpt.vatAmount

        where  code = REC_veh_aggregatedOpt.code  
        and itemDirectoryVehicleRef = REC_veh_aggregatedOpt.itemDirectoryVehicleRef ;  ------ AJOUT POUR JOINTURE  
 


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_aggregatedOpt','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_aggregatedOpt','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_aggregatedOpt','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;

    
  END ALIM_vehicle_aggregatedOpt;



  FUNCTION ALIM_vehicle_baseEquipments (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;




  Cursor C_veh_baseEquipments Is
Select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDStandardEquipment_VP A, MKTREF.MKTQT_NVDDictionaryOption_VP B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode  (+)
and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null)

union

Select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
----MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDStandardEquipment_VU A, MKTREF.MKTQT_NVDDictionaryOption_VU B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode  (+)
and (veh.validityStartDate < A.effectiveto or A.effectiveto is null) and (veh.validityEndDate > A.effectivefrom or veh.validityEndDate is null)
; 



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','## Alimentation de la table MKTREF.MKTQT_vehicle_baseEquipments ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_baseEquipments','## Flux BILAN   ##');
  
  
  BEGIN
            EXECUTE IMMEDIATE 'TRUNCATE TABLE MKTREF.MKTQT_vehicle_baseEquipments';
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_baseEquipments',
                                   '## TRUNCATE OK ##' || SQL%ROWCOUNT);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN
            V_ERR := 1;
            RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,
                                   'ALIM_vehicle_baseEquipments',
                                   '## TRUNCATE KO - FIN DU TRAITEMENT ##' || SQL%ROWCOUNT);
            RETURN V_ERR;
        END;
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  


  FOR REC_veh_baseEquipments IN C_veh_baseEquipments
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_baseEquipments
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
externalRef,
typeCategoryCode,
language,
label
              )
              
        VALUES
              (  
REC_veh_baseEquipments.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_baseEquipments.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.versionYear,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.generation,-- add
------REC_veh_baseEquipments.DIMENSIONS,  -- add
------REC_veh_baseEquipments.MODEL_GEN,-- add
REC_veh_baseEquipments.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.externalRef,
REC_veh_baseEquipments.typeCategoryCode,
REC_veh_baseEquipments.language,
REC_veh_baseEquipments.label 
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_baseEquipments
        Set        
--externalRef= REC_veh_baseEquipments.externalRef,
tech_id          =      REC_veh_baseEquipments.tech_id  ,
VEHICULE_TYPE = REC_veh_baseEquipments.VEHICULE_TYPE,
typeCategoryCode= REC_veh_baseEquipments.typeCategoryCode,
language= REC_veh_baseEquipments.language,
label= REC_veh_baseEquipments.label 

        where  externalRef          =      REC_veh_baseEquipments.externalRef 
        and  itemDirectoryVehicleRef = REC_veh_baseEquipments.itemDirectoryVehicleRef ;
   ------     and versionYear = REC_veh_baseEquipments.versionYear
    ------    and versionTrimester = REC_veh_baseEquipments.versionTrimester
    ------    and generation = REC_veh_baseEquipments.generation-- add
   ------    and DIMENSIONS = REC_veh_baseEquipments.DIMENSIONS  -- add
     ------   and MODEL_GEN = REC_veh_baseEquipments.MODEL_GEN ;-- add

        
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_baseEquipments','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_vehicle_baseEquipments;

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------



  FUNCTION ALIM_transco_model_gen (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
 select  distinct
 
                 BRAND_CODE     as  parent,  -- brandCode
                CAPMAN_NAME || ' | ' || VEHICULE_NAME   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                MODEL_GEN_ID    as code,
                CROSSREF_CODE   as CROSSREF_CODE,
                TRANSLATION_LABEL as TRANSLATION_LABEL

 from  MKTREF.MKTQT_MODEL_GEN   
; 
 
 
 


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','--------------------------BEGIN----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'model_gen'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent	, --- MAPPING : parent_details_code = parent
'brandCode'	, --parent_details_entity
REC_transco.parent, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.TRANSLATION_LABEL	, --- MAPPING : translation_label = description_label  -- changement
'', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
     
      parent_details_code = REC_transco.parent , --- mapping  parent_details_code = parent;
      translation_label = REC_transco.TRANSLATION_LABEL,  --- mappring translation_label = description_label  -- changement
      description_label = REC_transco.description_label
        
      where  entity = 'model_gen'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'model_gen'
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU  
       and crossref_code = REC_transco.crossref_code
        and  parent =   REC_transco.parent ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','Message Erreur pl/sql :'||Sqlerrm,'E');
   
   End;
    
  END ALIM_transco_model_gen;





  FUNCTION ALIM_transco_trim (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_trim_model_gen Is
        
  
 select  distinct
                TRIM.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
               TRIM.VEHICULE_NAME  || ' | '  || TRIM.VEHICULE_TRIM as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                TRIM.TRIM_ID    as code,
                TRIM.CROSSREF_CODE   as CROSSREF_CODE,
                TRIM.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_TRIM  TRIM, MKTREF.MKTQT_model_gen model_gen
  where TRIM.BRAND_CODE = model_gen.BRAND_CODE 
 and TRIM.VEHICULE_NAME = model_gen.VEHICULE_NAME
  and TRIM.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
; 
 
         
        


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = brandCode ##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
       parent_details_code =   REC_transco.parent_details_code_brandcode ,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code 
      and parent = REC_transco.parent ;

         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
  
  
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = model_gen ##');

  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code ,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code 
       and parent = REC_transco.parent ; 
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' '); 
  
  
  
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_trim;






  FUNCTION ALIM_transco_motorisationBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

--471   generation
--477   generation

  Cursor C_transco_motor_model_gen Is

 select  distinct
                motorisationBLVD.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
                motorisationBLVD.VEHICULE_NAME || ' | ' ||  motorisationBLVD.VEHICULE_motorisationBLVD   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                motorisationBLVD.motorisationBLVD_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                motorisationBLVD.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_motorisationBLVD  motorisationBLVD, MKTREF.MKTQT_model_gen model_gen
 where motorisationBLVD.BRAND_CODE = model_gen.BRAND_CODE 
 and motorisationBLVD.VEHICULE_NAME = model_gen.VEHICULE_NAME
 and motorisationBLVD.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
 
; 




 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ''
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
      and crossref_code = REC_transco.description_label 
      and parent = REC_transco.parent ; --- mapping  parent_details_code = parent

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = model_gen ##'); 
   
   
  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ''
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and parent = REC_transco.parent; --- mapping  parent_details_code = parent

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;
    
  END ALIM_transco_motorisationBLVD;






  FUNCTION ALIM_transco_dimensions (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

-- 14 :
--32 payLoad  : charge utile  (VU)

  Cursor C_transco_dimensions_model_gen Is

 select  distinct
                dimensions.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
                dimensions.VEHICULE_NAME || ' | ' || dimensions.VEHICULE_dimensions   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                dimensions.dimensions_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                dimensions.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_dimensions  dimensions, MKTREF.MKTQT_model_gen model_gen
  where dimensions.BRAND_CODE = model_gen.BRAND_CODE 
 and dimensions.VEHICULE_NAME = model_gen.VEHICULE_NAME
 and dimensions.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
 
 and dimensions.dimensions_id != '  '  --- AJOUT 19 SEPTEMBRE

; 



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;




  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ''
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and  parent = REC_transco.parent; --- mapping  parent_details_code = parent
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = model_gen ##'); 
   

  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'', --bomAttribut		,
'GB'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ''
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and parent = REC_transco.parent ; --- mapping  parent_details_code = parent
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_dimensions;








  FUNCTION UPDATE_transco_model (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
  select 
  
  Entity			    as Entity			,
code			as code			,
startValidityDate	as startValidityDate	,
endValidityDate		as endValidityDate		,
parent			as parent			,
parent_details_entity		   as parent_details_entity		,
--parent_details_code		as parent_details_code		,
description_language		as description_language		,
description_label		as description_label		,
crossref_typecode		as crossref_typecode		,
crossref_country		as crossref_country		,
crossref_code			as crossref_code			,
translation_language	as translation_language	,
substr(description_label,instr(description_label,':')+1 )  	as translation_label	,   -------- translation_labels   ----- modif
bomAttribut		as bomAttribut		,
countryScope	as countryScope	
  from mktref.MKTQT_nomenclature where entity = 'model'
  

; 
  
  
  
  
  


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);

  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','## MAPPING : ajout de brandCode dans parent_details_code ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES  --REC_transco
              (  
REC_transco.Entity			,
REC_transco.code			,
REC_transco.startValidityDate	,
REC_transco.endValidityDate		,
REC_transco.parent			,
REC_transco.parent_details_entity		,
REC_transco.parent		,   --- parent_details_code
REC_transco.description_language		,
REC_transco.description_label		,
REC_transco.crossref_typecode		,
REC_transco.crossref_country		,
REC_transco.crossref_code			,
REC_transco.translation_language	,
REC_transco.translation_label	,
REC_transco.bomAttribut		,
REC_transco.countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent =   REC_transco.parent,
      parent_details_code = REC_transco.parent, ------- mise a jour
      translation_label = REC_transco.translation_label,  
      description_label = REC_transco.description_label
        
      where  entity = 'model'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'familyCode'
      and countryScope = 'GB' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   EXCEPTION WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','Message Erreur pl/sql :'||Sqlerrm,'E');
   End;
    
  END UPDATE_transco_model;

--------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------




	FUNCTION MAIN_PRINCIPAL (   NOMLOG                          VARCHAR2,
                                P_DATE_TRAI                     DATE DEFAULT SYSDATE,
                                P_PATH                          VARCHAR2,
                                P_FILENAME_VEHICLE_JSON         VARCHAR2,
                                P_FILENAME_NOMENCLATURE_JSON    VARCHAR2,
                                P_FILENAME_VEHICLE_TXT          VARCHAR2,
                                P_FILENAME_NOMENCLATURE_TXT     VARCHAR2,
                                V_INSERTS                       OUT NUMBER,
                                V_UPDATES                       OUT NUMBER,
                                V_Error                         Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	
     -------------- ALIM VEHICLE ET NOMENCLATURE
      V_ERR     := MAIN_ALIM_vehicle( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

      ---------------EXPORT    VEHICLE_JSON
      V_ERR     := FONC_EXPORT_VEHICLE_JSON(NOMLOG ,P_DATE_TRAI , P_PATH , P_FILENAME_VEHICLE_JSON  );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
   
   
      ---------------EXPORT    NOMENCLATURE_JSON
      V_ERR     := FONC_EXPORT_NOMENCLATURE_JSON(NOMLOG ,P_DATE_TRAI , P_PATH , P_FILENAME_NOMENCLATURE_JSON  );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
   
   
      ---------------EXPORT   VEHICLE_TXT
      V_ERR     := EXPORT_VEHICLE_TXT(NOMLOG ,P_DATE_TRAI , P_PATH , P_FILENAME_VEHICLE_TXT  );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
      ---------------EXPORT   NOMENCLATURE_TXT
      V_ERR     := EXPORT_NOMENCLATURE_TXT(NOMLOG ,P_DATE_TRAI , P_PATH , P_FILENAME_NOMENCLATURE_TXT  );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;            
            
   
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_PRINCIPAL;












	FUNCTION MAIN_ALIM_vehicle (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	
     ---------------01			
      /*V_ERR     := ALIM_MODEL_GEN( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------02
     V_ERR     := ALIM_TRIM( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------03
      V_ERR     := ALIM_MOTORISATIONBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------04
      V_ERR     := ALIM_DIMENSIONS( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;         
           
	
         
         
		---------------05	
			V_ERR     := ALIM_vehicle( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;*/
      
      ---------------VP		JIRA 26  non
			V_ERR     := UPDATE_vehicle_crossRefs_VP( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            

		---------------VU		JIRA 26  non
			V_ERR     := UPDATE_vehicle_crossRefs_VU( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      

		---------------update  JIRA DWH-19
    -- NE PLUS UTILISER
			/*V_ERR     := UPDATE_veh_update( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;*/


		---------------06		
			V_ERR     := ALIM_vehicle_crossRefs( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      
      

      
        ---------------07	
			V_ERR     := ALIM_vehicle_pricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
     
        -------------------08
  	V_ERR     := ALIM_vehicle_options_vp( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      
     
      V_ERR     := ALIM_vehicle_options_vu( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      
      

       /*     
         -------------------09 non
          -- NE PLUS UTILISER
			V_ERR     := ALIM_vehicle_optionslabels( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------10 non
         -- NE PLUS UTILISER
			V_ERR     := ALIM_vehicle_optionspricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;     
       */   
       
  
        ---JIRA DWH-21  
            V_ERR     := ALIM_vehicle_aggregatedOpt( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;       

         -------------------11
			V_ERR     := ALIM_vehicle_baseEquipments( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;          
 
          ------------------- MAIN NOMENCLATURE             
			V_ERR     := MAIN_ALIM_NOMENCLATURE (NOMLOG , P_DATE_TRAI, V_INSERTS,V_UPDATES,V_Error) ;   
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;          
 
			
			RETURN V_RET; 

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_vehicle;




	FUNCTION MAIN_ALIM_NOMENCLATURE (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     /* erreur = 0 ou 1 */

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	

		---------------01			
			V_ERR     := ALIM_transco_model_gen( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

		---------------02			
			V_ERR     := ALIM_transco_trim( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        ---------------03			
			V_ERR     := ALIM_transco_motorisationBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------04
			V_ERR     := ALIM_transco_dimensions( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
      -------------------05
			V_ERR     := UPDATE_transco_model( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
			
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_NOMENCLATURE;


  



END MKTQA_CALCUL_CAP_UK;
