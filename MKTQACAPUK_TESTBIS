create or replace PACKAGE BODY MKTQA_CAP_UK_TEST_BIS AS

  function int_to_seq2(n in integer ) return varchar2    as
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      quotient := n;
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      quotient := floor(quotient/len);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
    function int_to_seq3(n in integer, NOMLOG      VARCHAR2) return varchar2    as
       FILE_ID UTL_FILE.FILE_TYPE;
       RES     NUMBER := 0;
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      File_Id := mkt.mktqaut.F_Open(Nomlog);
      quotient := n;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','quotient : ' || quotient);
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','mod(quotient,len) : ' || mod(quotient,len));
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','ret : ' || ret);
      quotient := floor(quotient/len);
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','quotient : ' || quotient);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
   
   
  FUNCTION ALIM_MODEL_GEN (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_veh_VP Is
     select distinct brand.code as brandCode   ,
                    CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
                    'VP' AS VEHICULE_TYPE,
                    CAPDER.RANCODE || 'GEN' || NVD.valuestring AS crossref_code    ---- AJOUT VENDREDI 
     
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP NVD,
             MKTREF.MKTQT_transco brand
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE);


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_veh_VU Is
     select distinct brand.code as brandCode   ,
                     CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME, 
                     'VU' AS VEHICULE_TYPE,
                     CAPDER.RANCODE || 'GEN' || NVD.valuestring AS crossref_code    ---- AJOUT VENDREDI 
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU NVD,
             MKTREF.MKTQT_transco brand
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE);



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','## Alimentation de la table MKTREF.MKTQT_MODEL_GEN ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_veh_VP IN C_veh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(model_gen_num), 0) into V_NUM
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_veh_VP.brandCode;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_veh_VP.brandCode ,
REC_veh_VP.VEHICULE_NAME ,
REC_veh_VP.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_veh_VP.CROSSREF_CODE     -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set     model_gen_num =   NVL(V_NUM_2, V_NUM),
                MODEL_GEN_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VP.brandCode
        and    VEHICULE_NAME  = REC_veh_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VP.VEHICULE_TYPE 
        AND    CROSSREF_CODE  = REC_veh_VP.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_veh_VU IN C_veh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(model_gen_num), 0) into V_NUM
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_veh_VU.brandCode;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_veh_VU.brandCode ,
REC_veh_VU.VEHICULE_NAME ,
REC_veh_VU.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_veh_VU.CROSSREF_CODE     -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set    model_gen_num =   NVL(V_NUM_2, V_NUM) ,
                MODEL_GEN_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VU.brandCode
        and    VEHICULE_NAME  = REC_veh_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VU.VEHICULE_TYPE
        AND    CROSSREF_CODE  = REC_veh_VU.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MODEL_GEN;
  
  
  
  
  
  
  
  
  ----TRIM
  
  
  FUNCTION ALIM_TRIM (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_veh_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('C', CAPDER.TrimCode) as crossref_code  -- AJOUT VENDREDI
     
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP NVD,
             MKTREF.MKTQT_transco brand,
             MKTREF.MKTQT_CapTrim_VP CAPTRIM -- add trim
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and    CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VP where Code = CAPDER.TrimCode

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_veh_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('L', CAPDER.TrimCode) as crossref_code  -- AJOUT VENDREDI
     
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU NVD,
             MKTREF.MKTQT_transco brand,
             MKTREF.MKTQT_CapTrim_VU CAPTRIM    -- add trim
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     and     CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VU where Code = CAPDER.TrimCode



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','## Alimentation de la table MKTREF.MKTQT_TRIM ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_veh_VP IN C_veh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE
         and    VEHICULE_TRIM =  REC_veh_VP.VEHICULE_TRIM   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM, ---
                trim_num, 
                TRIM_ID ,  ---
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_veh_VP.brandCode ,
REC_veh_VP.VEHICULE_NAME ,
REC_veh_VP.VEHICULE_TYPE  ,
REC_veh_VP.VEHICULE_TRIM, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_veh_VP.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set     trim_num =   NVL(V_NUM_2, V_NUM),
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VP.brandCode
        and    VEHICULE_NAME  = REC_veh_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VP.VEHICULE_TYPE 
        and  VEHICULE_TRIM = REC_veh_VP.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_veh_VP.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_veh_VU IN C_veh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE
         and       VEHICULE_TRIM =  REC_veh_VU.VEHICULE_TRIM   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM,
                trim_num,
                TRIM_ID  ,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_veh_VU.brandCode ,
REC_veh_VU.VEHICULE_NAME ,
REC_veh_VU.VEHICULE_TYPE  ,
REC_veh_VU.VEHICULE_TRIM  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_veh_VU.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set    trim_num =   NVL(V_NUM_2, V_NUM) ,
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VU.brandCode
        and    VEHICULE_NAME  = REC_veh_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VU.VEHICULE_TYPE 
        and    VEHICULE_TRIM = REC_veh_VU.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_veh_VU.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_TRIM;
  
  
  
  
  
  
  
  
  ----MOTORISATIONBLVD
  
  
  FUNCTION ALIM_MOTORISATIONBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_veh_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (maximumPowerDin.valuefloat  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat) as VEHICULE_MOTORISATIONBLVD
 
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP NVD,
             MKTREF.MKTQT_transco brand,
             MKTQT_NVDTECHNICAL_VP maximumPowerDin, MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity  -- add MOTORISATIONBLVD
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
        
    AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 163 ;
     
    

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_veh_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (maximumPowerDin.valuefloat  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat) as VEHICULE_MOTORISATIONBLVD
     
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU NVD,
             MKTREF.MKTQT_transco brand,
             MKTQT_NVDTECHNICAL_VU maximumPowerDin, MKTQT_NVDTECHNICAL_VU nbRapports, MKTQT_NVDTECHNICAL_VU batteryCapacity  -- add MOTORISATIONBLVD
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     
    AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 152;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','## Alimentation de la table MKTREF.MKTQT_MOTORISATIONBLVD ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_veh_VP IN C_veh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE
         and    VEHICULE_MOTORISATIONBLVD =  REC_veh_VP.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD, ---
                MOTORISATIONBLVD_num, 
                MOTORISATIONBLVD_ID   ---
              )
        VALUES
              (  
REC_veh_VP.brandCode ,
REC_veh_VP.VEHICULE_NAME ,
REC_veh_VP.VEHICULE_TYPE  ,
REC_veh_VP.VEHICULE_MOTORISATIONBLVD, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set     MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM),
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VP.brandCode
        and    VEHICULE_NAME  = REC_veh_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VP.VEHICULE_TYPE 
        and  VEHICULE_MOTORISATIONBLVD = REC_veh_VP.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_veh_VU IN C_veh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE
         and       VEHICULE_MOTORISATIONBLVD =  REC_veh_VU.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD,
                MOTORISATIONBLVD_num,
                MOTORISATIONBLVD_ID  
              )
        VALUES
              (  
REC_veh_VU.brandCode ,
REC_veh_VU.VEHICULE_NAME ,
REC_veh_VU.VEHICULE_TYPE  ,
REC_veh_VU.VEHICULE_MOTORISATIONBLVD  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set    MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM) ,
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VU.brandCode
        and    VEHICULE_NAME  = REC_veh_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VU.VEHICULE_TYPE 
        and    VEHICULE_MOTORISATIONBLVD = REC_veh_VU.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MOTORISATIONBLVD;
  
  
  
  
  
  
  
  
  ----DIMENSIONS
  
  
  FUNCTION ALIM_DIMENSIONS (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_veh_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (body.code || ':' || hauteur.valuefloat || ':' || longueur.valuefloat || ':' || ':' || maxLadenWeight.valuefloat)   as  VEHICULE_DIMENSIONS --mercredi
            --(substr(CAPDER.capcode,11,1) || hauteur.valuefloat || longueur.valuefloat || maxLadenWeight.valuefloat  ) as  VEHICULE_DIMENSIONS -- avant
 
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP NVD,
             MKTREF.MKTQT_transco brand,
             MKTREF.MKTQT_transco body , --mercredi
             MKTQT_NVDTECHNICAL_VP hauteur, MKTQT_NVDTECHNICAL_VP longueur,MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'C' || substr(CAPDER.capcode,11,1)   --mercredi
          
    AND   hauteur.ID(+) = CAPDER.ID
    AND   hauteur.TECHCODE(+) = 34 
    AND   longueur.ID(+) = CAPDER.ID
    AND   longueur.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14;
     


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_veh_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (body.code || ':' || hauteur.valuefloat || ':' || longueur.valuefloat  || ':' ||  payLoad.valuefloat || ':' || maxLadenWeight.valuefloat) as  VEHICULE_DIMENSIONS  --mercredi
            --(substr(CAPDER.capcode,11,1) || hauteur.valuefloat || longueur.valuefloat  ||  payLoad.valuefloat || maxLadenWeight.valuefloat) as  VEHICULE_DIMENSIONS --avant     
            
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU NVD,
             MKTREF.MKTQT_transco brand,
             MKTREF.MKTQT_transco body , --mercredi 
            MKTQT_NVDTECHNICAL_VU hauteur, MKTQT_NVDTECHNICAL_VU longueur,MKTQT_NVDTECHNICAL_VU  maxLadenWeight, MKTQT_NVDTECHNICAL_VU payLoad
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     NVD.ID(+) = CAPDER.ID
     AND     NVD.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'L' || substr(CAPDER.capcode,11,1)   --mercredi     
     
    AND   hauteur.ID(+) = CAPDER.ID
    AND   hauteur.TECHCODE(+) = 34 
    AND   longueur.ID(+) = CAPDER.ID
    AND   longueur.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14 
    AND   payLoad.ID(+) = CAPDER.ID
    AND   payLoad.TECHCODE(+) = 32 ;






 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','## Alimentation de la table MKTREF.MKTQT_DIMENSIONS ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_veh_VP IN C_veh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE
         and    VEHICULE_DIMENSIONS =  REC_veh_VP.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_veh_VP.brandCode
         AND    VEHICULE_NAME = REC_veh_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_veh_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS, ---
                DIMENSIONS_num, 
                DIMENSIONS_ID   ---
              )
        VALUES
              (  
REC_veh_VP.brandCode ,
REC_veh_VP.VEHICULE_NAME ,
REC_veh_VP.VEHICULE_TYPE  ,
REC_veh_VP.VEHICULE_DIMENSIONS, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set     DIMENSIONS_num =   NVL(V_NUM_2, V_NUM),
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VP.brandCode
        and    VEHICULE_NAME  = REC_veh_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VP.VEHICULE_TYPE 
        and  VEHICULE_DIMENSIONS = REC_veh_VP.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_veh_VU IN C_veh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE
         and       VEHICULE_DIMENSIONS =  REC_veh_VU.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_veh_VU.brandCode
         AND    VEHICULE_NAME = REC_veh_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_veh_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
        
        V_NUM := V_NUM +1;
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
        END IF;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS,
                DIMENSIONS_num,
                DIMENSIONS_ID  
              )
        VALUES
              (  
REC_veh_VU.brandCode ,
REC_veh_VU.VEHICULE_NAME ,
REC_veh_VU.VEHICULE_TYPE  ,
REC_veh_VU.VEHICULE_DIMENSIONS  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set    DIMENSIONS_num =   NVL(V_NUM_2, V_NUM) ,
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_veh_VU.brandCode
        and    VEHICULE_NAME  = REC_veh_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_veh_VU.VEHICULE_TYPE 
        and    VEHICULE_DIMENSIONS = REC_veh_VU.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_DIMENSIONS;
  
  
  
  
  
  
  
  FUNCTION ALIM_veh (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_veh_VP Is
     select distinct

A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'UK' as countryCode,
concat(concat('P', A.Id), A.Introduced) as itemDirectoryVehicleRef , 
NULL as versionState   ,
A.Introduced as validityStartDate   ,
A.Discontinued as validityEndDate , 
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label  as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
generation.valuestring  as generation  , ----------------------- 471
substr(B.refe, 0,4)  as versionYear ,
( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) )*4+1 as versionTrimester    , --OK
segment.code segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(A.CAPCODE,20,1) is null then 'P' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   -- OK
body.code as bodyCode    ,
height.valuefloat as height  ,  ----------------------- 34
length.valuefloat as length  , ----------------------- 4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
co2EmissionWLTP.valuefloat as co2EmissionWLTP , ----------------------- 173
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
maximumPowerDin.valuefloat as maximumPowerDin , ----------------------- 21
maximumPowerKW.valuefloat  as maximumPowerKW  , ----------------------- 48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
cubicCapacity.valuefloat as cubicCapacity   , ----------------------- 20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , ----------------------- 66 
NULL as typeVariantVersion  ,
CAPTRIM.Name   as trimLevel,  --select distinct Name from Cars_CapTrim where Cars_CapTrim.Code = Cars_CapDer.TrimCode  
seatNumber.valuefloat as seatNumber  , ----------------------- 47
A.doors as doorNumber  ,
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption.valuefloat  as wltpLowFuelConsumption  ,  ----------------------- 184
wltpMediumFuelConsumption.valuefloat  as wltpMediumFuelConsumption   , ----------------------- 185
wltpHighFuelConsumption.valuefloat  as wltpHighFuelConsumption , ----------------------- 186
wltpExtraHighConsumption.valuefloat  as wltpExtraHighConsumption    , -----------------------187
wltpCombinedFuelConsumption.valuefloat  as wltpCombinedFuelConsumption ,-----------------------188
wltpElectricConsumption.valuefloat  as wltpElectricConsumption ,-----------------------164
wltpElectricRange.valuefloat  as wltpElectricRange   ,-----------------------165
batteryCapacity.valuefloat  as batteryCapacity ,-----------------------163
maxLadenWeight.valuefloat  as maxLadenWeight  ,-----------------------14
kerbWeight.valuefloat  as kerbWeight  ,-----------------------3 
NULL as payLoad ,
(case when C.status = 'S' and C.genericcode =9 then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabeGlobalLong   ,
model.description_label as versionLabelLocalShort  ,
concat(model.description_label, A.name) as versionLabelLocalLong,
'VP' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester

from MKTREF.MKTQT_CapDer_VP A,
     MKTREF.MKTQT_NVDModelYear_VP B,
     MKTREF.MKTQT_NVDGenericStatus_VP C,
     MKTREF.MKTQT_transco brand,
     MKTREF.MKTQT_transco model,
     MKTREF.MKTQT_transco segment,
     MKTREF.MKTQT_transco body,
     MKTREF.MKTQT_transco energyComb,
     MKTREF.MKTQT_transco transmission,
     MKTREF.MKTQT_transco gearbox,
     MKTREF.MKTQT_transco door_seat, --add
     MKTREF.MKTQT_transco year_trimester, --add
     MKTREF.MKTQT_NVDTechnical_VP generation,
     MKTREF.MKTQT_NVDTechnical_VP height,
     MKTREF.MKTQT_NVDTechnical_VP length,
     MKTREF.MKTQT_NVDTechnical_VP co2EmissionWLTP,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerDin,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerKW,
     
     MKTQT_NVDTechnical_VP  cubicCapacity,-- MKTQT_NVDTechnical_VP nbRapports,
     MKTQT_NVDTechnical_VP seatNumber, 
    MKTQT_NVDTechnical_VP wltpLowFuelConsumption, MKTQT_NVDTechnical_VP wltpMediumFuelConsumption, MKTQT_NVDTechnical_VP wltpHighFuelConsumption,
    MKTQT_NVDTechnical_VP wltpExtraHighConsumption, MKTQT_NVDTechnical_VP wltpCombinedFuelConsumption ,MKTQT_NVDTechnical_VP wltpElectricConsumption,
    MKTQT_NVDTechnical_VP wltpElectricRange, -- MKTQT_NVDTechnical_VP batteryCapacity, --MKTQT_NVDTechnical_VP maxLadenWeight,
    MKTQT_NVDTechnical_VP kerbWeight,
     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTQT_CAPMAN_VP   CAPMAN,
     MKTQT_CAPRANGE_VP CAPRAN,
     MKTQT_NVDTechnical_VP NVD,
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VP CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,
     --MKTQT_NVDTECHNICAL_VP maximumPowerDin,
     MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity,  -- add MOTORISATIONBLVD
     MKTREF.MKTQT_DIMENSIONS DIMENSIONS, -- add DIMENSIONS
     MKTQT_NVDTECHNICAL_VP hauteur, MKTQT_NVDTECHNICAL_VP longueur,MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
where A.id = B.id 
and A.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
--and c.status(+) = 'S'            --- 
--and c.genericcode(+) = '9'        ---
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('C',A.MANCODE)
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('C',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('C',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission
and generation.id(+) = B.id
and generation.effectivefrom(+) = B.effectivefrom
and generation.techcode(+) = 471
and height.id(+) = B.id
and height.effectivefrom(+) = B.effectivefrom
and height.techcode (+) = 34
and length.id(+) = B.id
and length.effectivefrom(+) = B.effectivefrom
and length.techcode(+) = 4
and co2EmissionWLTP.id(+) = B.id
and co2EmissionWLTP.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP.techcode(+) = 173
and maximumPowerDin.id (+) = B.id
and maximumPowerDin.effectivefrom(+) = B.effectivefrom
and maximumPowerDin.techcode(+) = 21 
and maximumPowerKW.id(+) = B.id
and maximumPowerKW.effectivefrom(+) = B.effectivefrom
and maximumPowerKW.techcode(+) = 48

and  cubicCapacity.ID(+) = B.ID and cubicCapacity.effectivefrom(+) = B.effectivefrom and cubicCapacity.techcode(+) = 20
and  nbRapports.ID(+) = B.ID and nbRapports.effectivefrom(+) = B.effectivefrom and nbRapports.techcode(+) = 66
and  seatNumber.ID(+) = B.ID and seatNumber.effectivefrom(+) = B.effectivefrom and seatNumber.techcode(+) = 47
and  wltpLowFuelConsumption.ID(+) = B.ID and wltpLowFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpLowFuelConsumption.techcode(+) = 184
and  wltpMediumFuelConsumption.ID(+) = B.ID and wltpMediumFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpMediumFuelConsumption.techcode(+) = 185
and  wltpHighFuelConsumption.ID(+) = B.ID and wltpHighFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpHighFuelConsumption.techcode(+) = 186
and  wltpExtraHighConsumption.ID(+) = B.ID and wltpExtraHighConsumption.effectivefrom(+) = B.effectivefrom and wltpExtraHighConsumption.techcode(+) = 187
and  wltpCombinedFuelConsumption.ID(+) = B.ID and wltpCombinedFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpCombinedFuelConsumption.techcode(+) = 188
and  wltpElectricConsumption.ID(+) = B.ID and wltpElectricConsumption.effectivefrom(+) = B.effectivefrom and wltpElectricConsumption.techcode(+) = 164
and  wltpElectricRange.ID(+) = B.ID and wltpElectricRange.effectivefrom(+) = B.effectivefrom and wltpElectricRange.techcode(+) = 165
and  batteryCapacity.ID(+) = B.ID and batteryCapacity.effectivefrom(+) = B.effectivefrom and batteryCapacity.techcode(+) = 163
and  maxLadenWeight.ID(+) = B.ID and maxLadenWeight.effectivefrom(+) = B.effectivefrom and maxLadenWeight.techcode(+) = 14
and  kerbWeight.ID(+) = B.ID and kerbWeight.effectivefrom(+) = B.effectivefrom and kerbWeight.techcode(+) = 3

-- MODEL GEN
AND MG.BRAND_CODE (+) = brand.code
and MG.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND MG.VEHICULE_TYPE (+) = 'VP'
AND MG.CROSSREF_CODE (+) =  A.RANCODE || 'GEN' || NVD.valuestring -- AJOUT VENDREDI
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE
    AND     NVD.ID(+) = A.ID
    AND     NVD.techcode(+) = 471
-- MODEL GEN
-- TRIM
AND TRIM.BRAND_CODE(+) = brand.code
AND TRIM.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND TRIM.VEHICULE_TYPE (+) = 'VP'
AND TRIM.VEHICULE_TRIM (+) = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE (+) = concat('C', A.TrimCode)   -- AJOUT VENDREDI
    AND  CAPTRIM.CODE(+) =  A.TrimCode

-- TRIM
-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE(+) = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND MOTORISATIONBLVD.VEHICULE_TYPE (+) = 'VP'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat)
    AND   maximumPowerDin.ID(+) = A.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
   -- AND   nbRapports.ID(+) = A.ID
   -- AND   nbRapports.TECHCODE(+) = 66
    --AND   batteryCapacity.ID(+) = A.ID
    --AND   batteryCapacity.TECHCODE(+) = 163 
-- MOTORISATION
-- DIMENSION

AND DIMENSIONS.BRAND_CODE(+) = brand.code
AND DIMENSIONS.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND DIMENSIONS.VEHICULE_TYPE (+) = 'VP'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || hauteur.valuefloat || ':' || longueur.valuefloat || ':' || ':' || maxLadenWeight.valuefloat)   ---  interne
    AND   hauteur.ID(+) = A.ID
    AND   hauteur.TECHCODE(+) = 34 
    AND   longueur.ID(+) = A.ID
    AND   longueur.TECHCODE(+) = 4    
  --  AND   maxLadenWeight.ID(+) = A.ID
   -- AND   maxLadenWeight.TECHCODE(+) = 14;
   
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+) ='CAP'
--and door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3')
and door_seat.crossref_code(+) = concat(concat(A.doors,'-'),seatNumber.valuefloat)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(substr(B.refe, 0,4)+ ( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) ), ',', '.' )

;

  
    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_veh_VU Is

    select distinct
A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'UK' as countryCode,
concat(concat('L', A.Id), A.Introduced) as itemDirectoryVehicleRef , 
NULL as versionState   ,
A.Introduced  as validityStartDate   ,
A.Discontinued as validityEndDate ,
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
generation.valuestring as generation  ,   ---------477
substr(B.refe, 0,4)  as versionYear ,
( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) )*4+1 as versionTrimester    , --OK
segment.code as segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(CAPCODE,20,1) ='L' then 'C' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   --OK
body.code as bodyCode    ,
height.valuefloat as height, --34 as height  , ---34
length.valuefloat as length, --4  as length  , ---4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
co2EmissionWLTP.valuefloat as co2EmissionWLTP, -- 239 as co2EmissionWLTP , --239
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
maximumPowerDin.valuefloat as maximumPowerDin, -- 21 as maximumPowerDin ,  --21
maximumPowerKW.valuefloat as maximumPowerKW, --48 as maximumPowerKW  , --48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
cubicCapacity.valuefloat as cubicCapacity, --20 as cubicCapacity   , --20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , -----OK
NULL as typeVariantVersion  ,
CAPTRIM.Name as trimLevel,  --select distinct Name from Lights_CapTrim where Lights_CapTrim.Code = Lights_CapDer.TrimCode 
seatNumber.valuefloat as seatNumber, --47 as seatNumber  ,  ---47
NULL as doorNumber  , -- doors en  VP, null en vu
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption.valuefloat as wltpLowFuelConsumption, --299 as wltpLowFuelConsumption  ,
wltpMediumFuelConsumption.valuefloat as wltpMediumFuelConsumption,--302 as wltpMediumFuelConsumption   ,
wltpHighFuelConsumption.valuefloat as wltpHighFuelConsumption, --296 as wltpHighFuelConsumption ,
wltpExtraHighConsumption.valuefloat as wltpExtraHighConsumption,--293 as wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption.valuefloat as wltpCombinedFuelConsumption,--290 as wltpCombinedFuelConsumption ,
wltpElectricConsumption.valuefloat as wltpElectricConsumption,--166 as wltpElectricConsumption ,
wltpElectricRange.valuefloat as wltpElectricRange,--167 as wltpElectricRange   ,
batteryCapacity.valuefloat as batteryCapacity,--152 as batteryCapacity ,
maxLadenWeight.valuefloat as maxLadenWeight,--14 as maxLadenWeight  ,
kerbWeight.valuefloat as kerbWeight,--3 as kerbWeight  ,
payLoad.valuefloat as payLoad,--32 as payLoad , -- VU : DIFFERENCE
(case when C.status = 'S' and C.genericcode =9 then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabeGlobalLong   ,
model.description_label as versionLabelLocalShort  ,
concat(model.description_label, A.name) as versionLabelLocalLong,
'VU' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('-2','-3','-4','-5','-6','-7','-8','-9','-10','-11','-12','-13','-14','-15','-16','-17') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester


from MKTREF.MKTQT_CapDer_VU A , MKTREF.MKTQT_NVDModelYear_VU B  , MKTREF.MKTQT_NVDGenericStatus_VU C,
     MKTREF.MKTQT_transco brand,
     MKTREF.MKTQT_transco model,
     MKTREF.MKTQT_transco segment,
     MKTREF.MKTQT_transco body,
     MKTREF.MKTQT_transco energyComb,
     MKTREF.MKTQT_transco transmission,
     MKTREF.MKTQT_transco gearbox,
     MKTREF.MKTQT_transco door_seat, --add
     MKTREF.MKTQT_transco year_trimester, --add
     MKTREF.MKTQT_NVDTechnical_VU generation,
     MKTREF.MKTQT_NVDTechnical_VU height,
     MKTREF.MKTQT_NVDTechnical_VU length,
     MKTREF.MKTQT_NVDTechnical_VU co2EmissionWLTP,
     MKTREF.MKTQT_NVDTechnical_VU maximumPowerDin,
     MKTREF.MKTQT_NVDTechnical_VU maximumPowerKW,

     MKTQT_NVDTechnical_VU  cubicCapacity,-- MKTQT_NVDTechnical_VU nbRapports,
     MKTQT_NVDTechnical_VU seatNumber, 
    MKTQT_NVDTechnical_VU wltpLowFuelConsumption, MKTQT_NVDTechnical_VU wltpMediumFuelConsumption, MKTQT_NVDTechnical_VU wltpHighFuelConsumption,
    MKTQT_NVDTechnical_VU wltpExtraHighConsumption, MKTQT_NVDTechnical_VU wltpCombinedFuelConsumption ,MKTQT_NVDTechnical_VU wltpElectricConsumption,
    MKTQT_NVDTechnical_VU wltpElectricRange, -- MKTQT_NVDTechnical_VU batteryCapacity, --MKTQT_NVDTechnical_VU maxLadenWeight,
    MKTQT_NVDTechnical_VU kerbWeight,
    MKTQT_NVDTechnical_VU payLoad,
     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTQT_CAPMAN_VU   CAPMAN,
     MKTQT_CAPRANGE_VU CAPRAN,
     MKTQT_NVDTechnical_VU NVD,
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VU CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,
     --MKTQT_NVDTECHNICAL_VU maximumPowerDin,
     MKTQT_NVDTECHNICAL_VU nbRapports, MKTQT_NVDTECHNICAL_VU batteryCapacity,  -- add MOTORISATIONBLVD
     MKTREF.MKTQT_DIMENSIONS DIMENSIONS, -- add DIMENSIONS
     MKTQT_NVDTECHNICAL_VU hauteur, MKTQT_NVDTECHNICAL_VU longueur,MKTQT_NVDTECHNICAL_VU  maxLadenWeight  

where A.id = B.id 
and A.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)

--and c.status(+) = 'S'   ----
--and c.genericcode(+) = '9'  ----
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('L',A.MANCODE)
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('L',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('L',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission
and generation.id(+) = B.id
and generation.effectivefrom(+) = B.effectivefrom
and generation.techcode(+) = 477
and height.id(+) = B.id
and height.effectivefrom(+) = B.effectivefrom
and height.techcode (+) = 34
and length.id(+) = B.id
and length.effectivefrom(+) = B.effectivefrom
and length.techcode(+) = 4
and co2EmissionWLTP.id(+) = B.id
and co2EmissionWLTP.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP.techcode(+) = 239
and maximumPowerDin.id (+) = B.id
and maximumPowerDin.effectivefrom(+) = B.effectivefrom
and maximumPowerDin.techcode(+) = 21 
and maximumPowerKW.id(+) = B.id
and maximumPowerKW.effectivefrom(+) = B.effectivefrom
and maximumPowerKW.techcode(+) = 48

and  cubicCapacity.ID(+) = B.ID and cubicCapacity.effectivefrom(+) = B.effectivefrom and cubicCapacity.techcode(+) = 20
and  nbRapports.ID(+) = B.ID and nbRapports.effectivefrom(+) = B.effectivefrom and nbRapports.techcode(+) = 66
and  seatNumber.ID(+) = B.ID and seatNumber.effectivefrom(+) = B.effectivefrom and seatNumber.techcode(+) = 47
and  wltpLowFuelConsumption.ID(+) = B.ID and wltpLowFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpLowFuelConsumption.techcode(+) = 299
and  wltpMediumFuelConsumption.ID(+) = B.ID and wltpMediumFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpMediumFuelConsumption.techcode(+) = 302
and  wltpHighFuelConsumption.ID(+) = B.ID and wltpHighFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpHighFuelConsumption.techcode(+) = 296
and  wltpExtraHighConsumption.ID(+) = B.ID and wltpExtraHighConsumption.effectivefrom(+) = B.effectivefrom and wltpExtraHighConsumption.techcode(+) = 293
and  wltpCombinedFuelConsumption.ID(+) = B.ID and wltpCombinedFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpCombinedFuelConsumption.techcode(+) = 290
and  wltpElectricConsumption.ID(+) = B.ID and wltpElectricConsumption.effectivefrom(+) = B.effectivefrom and wltpElectricConsumption.techcode(+) = 166
and  wltpElectricRange.ID(+) = B.ID and wltpElectricRange.effectivefrom(+) = B.effectivefrom and wltpElectricRange.techcode(+) = 167
and  batteryCapacity.ID(+) = B.ID and batteryCapacity.effectivefrom(+) = B.effectivefrom and batteryCapacity.techcode(+) = 152
and  maxLadenWeight.ID(+) = B.ID and maxLadenWeight.effectivefrom(+) = B.effectivefrom and maxLadenWeight.techcode(+) = 14
and  kerbWeight.ID(+) = B.ID and kerbWeight.effectivefrom(+) = B.effectivefrom and kerbWeight.techcode(+) = 3
and  payLoad.ID(+) = B.ID and payLoad.effectivefrom(+) = B.effectivefrom and payLoad.techcode(+) = 32  -- DIFFERENCE

-- MODEL GEN
AND MG.BRAND_CODE (+) = brand.code
and MG.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND MG.VEHICULE_TYPE (+) = 'VU'
AND MG.CROSSREF_CODE (+) =  A.RANCODE || 'GEN' || NVD.valuestring -- AJOUT VENDREDI
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE
    AND     NVD.ID(+) = A.ID
    AND     NVD.techcode(+) = 477
-- MODEL GEN
-- TRIM
AND TRIM.BRAND_CODE(+) = brand.code
AND TRIM.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND TRIM.VEHICULE_TYPE (+) = 'VU'
AND TRIM.VEHICULE_TRIM (+) = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE (+) = concat('L', A.TrimCode)   -- AJOUT VENDREDI
    AND  CAPTRIM.CODE(+) =  A.TrimCode

-- TRIM
-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE(+) = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND MOTORISATIONBLVD.VEHICULE_TYPE (+) = 'VU'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat) 
    AND   maximumPowerDin.ID(+) = A.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
   -- AND   nbRapports.ID(+) = A.ID
   -- AND   nbRapports.TECHCODE(+) = 66
    --AND   batteryCapacity.ID(+) = A.ID
    --AND   batteryCapacity.TECHCODE(+) = 152 
-- MOTORISATION
-- DIMENSION

AND DIMENSIONS.BRAND_CODE(+) = brand.code
AND DIMENSIONS.VEHICULE_NAME (+) = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || NVD.valuestring
AND DIMENSIONS.VEHICULE_TYPE (+) = 'VU'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || hauteur.valuefloat || ':' || longueur.valuefloat  || ':' ||  payLoad.valuefloat || ':' || maxLadenWeight.valuefloat)  --interne
    AND   hauteur.ID(+) = A.ID
    AND   hauteur.TECHCODE(+) = 34 
    AND   longueur.ID(+) = A.ID
    AND   longueur.TECHCODE(+) = 4    
  --  AND   maxLadenWeight.ID(+) = A.ID
   -- AND   maxLadenWeight.TECHCODE(+) = 14;

  --  AND   payLoad.ID(+) = CAPDER.ID
  --  AND   payLoad.TECHCODE(+) = 32 ;
  
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+)='CAP'
--and door_seat.crossref_code in ('-2','-3','-4','-5','-6','-7','-8','-9','-10','-11','-12','-13','-14','-15','-16','-17')
and door_seat.crossref_code(+) = concat('-',seatNumber.valuefloat)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(substr(B.refe, 0,4)+ ( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) ), ',', '.' )


;






 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','## Alimentation de la table MKTREF.MKTQT_veh ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_veh_VP IN C_veh_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_veh
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabeGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong   ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester
              )
        VALUES
              (  
REC_veh_VP.tech_id ,
REC_veh_VP.tech_dateExtraction ,
REC_veh_VP.tech_dateInsertion  ,
REC_veh_VP.countryCode ,
REC_veh_VP.itemDirectoryVehicleRef ,
REC_veh_VP.versionState    ,
REC_veh_VP.validityStartDate   ,
REC_veh_VP.validityEndDate ,
REC_veh_VP.corporateGroupCode  ,
REC_veh_VP.corporateGroupLabel ,
REC_veh_VP.brandCode   ,
REC_veh_VP.brandLabel  ,
REC_veh_VP.familyCode  ,
REC_veh_VP.familyLabel ,
REC_veh_VP.generation  ,
REC_veh_VP.versionYear ,
REC_veh_VP.versionTrimester    ,
REC_veh_VP.segmentMarketingCode   ,
REC_veh_VP.faceLiftGeneration ,
REC_veh_VP.kindCode    ,
REC_veh_VP.bodyCode    ,
REC_veh_VP.height  ,
REC_veh_VP.length  ,
REC_veh_VP.sportinessFlag  ,
REC_veh_VP.co2EmissionNEDC ,
REC_veh_VP.co2EmissionWLTP ,
REC_veh_VP.co2ClassCode    ,
REC_veh_VP.fiscalHorsePower    ,
REC_veh_VP.maximumPowerDin ,
REC_veh_VP.maximumPowerKW  ,
REC_veh_VP.energy1Code ,
REC_veh_VP.energy1DetailCode   ,
REC_veh_VP.energy2Code ,
REC_veh_VP.energy2DetailCode   ,
REC_veh_VP.energyCombCode  ,
REC_veh_VP.motorisation    ,
REC_veh_VP.motorisationComb    ,
REC_veh_VP.cubicCapacity   ,
REC_veh_VP.transmissionTypeCode    ,
REC_veh_VP.gearBoxTypeCode ,
REC_veh_VP.nbRapports  ,
REC_veh_VP.typeVariantVersion  ,
REC_veh_VP.trimLevel   ,
REC_veh_VP.seatNumber  ,
REC_veh_VP.doorNumber  ,
REC_veh_VP.nedcCombineFuelConsumption  ,
REC_veh_VP.nedcExtraUrbanFuelConsumption   ,
REC_veh_VP.nedcUrbanFuelConsumption    ,
REC_veh_VP.wltpLowFuelConsumption  ,
REC_veh_VP.wltpMediumFuelConsumption   ,
REC_veh_VP.wltpHighFuelConsumption ,
REC_veh_VP.wltpExtraHighConsumption    ,
REC_veh_VP.wltpCombinedFuelConsumption ,
REC_veh_VP.wltpElectricConsumption ,
REC_veh_VP.wltpElectricRange   ,
REC_veh_VP.batteryCapacity ,
REC_veh_VP.maxLadenWeight  ,
REC_veh_VP.kerbWeight  ,
REC_veh_VP.payLoad ,
REC_veh_VP.hasTelematicBox ,
REC_veh_VP.catalogueDetail ,
REC_veh_VP.tsnNumber   ,
REC_veh_VP.wltpFlag    ,
REC_veh_VP.completenessFlag    ,
REC_veh_VP.validationUser  ,
REC_veh_VP.validationDate  ,
REC_veh_VP.updateUser  ,
REC_veh_VP.updateDate  ,
REC_veh_VP.purchaseCondition   ,
REC_veh_VP.designBases ,
REC_veh_VP.designCustomerShip  ,
REC_veh_VP.versionLabelGlobalShort ,
REC_veh_VP.versionLabeGlobalLong   ,
REC_veh_VP.versionLabelLocalShort  ,
REC_veh_VP.versionLabelLocalLong   ,
REC_veh_VP.VEHICULE_TYPE,
rec_veh_vp.MODEL_GEN_ID,
REC_veh_VP.TRIM_ID,
REC_veh_VP.MOTORISATIONBLVD_ID,
REC_veh_VP.DIMENSIONS_ID,
REC_veh_VP.door_seat,
REC_veh_VP.year_trimester
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh
        Set        
tech_id  =     REC_veh_VP.tech_id ,
tech_dateExtraction  = REC_veh_VP.tech_dateExtraction ,
tech_dateInsertion   = REC_veh_VP.tech_dateInsertion  ,
countryCode  = REC_veh_VP.countryCode ,
--itemDirectoryVehicleRef  = REC_veh_VP.itemDirectoryVehicleRef ,
versionState     = REC_veh_VP.versionState    ,
validityStartDate    = REC_veh_VP.validityStartDate   ,
validityEndDate  = REC_veh_VP.validityEndDate ,
corporateGroupCode   = REC_veh_VP.corporateGroupCode  ,
corporateGroupLabel  = REC_veh_VP.corporateGroupLabel ,
brandCode    = REC_veh_VP.brandCode   ,
brandLabel   = REC_veh_VP.brandLabel  ,
familyCode   = REC_veh_VP.familyCode  ,
familyLabel  = REC_veh_VP.familyLabel ,
generation   = REC_veh_VP.generation  ,
--versionYear  = REC_veh_VP.versionYear ,
--versionTrimester     = REC_veh_VP.versionTrimester    ,
segmentMarketingCode    = REC_veh_VP.segmentMarketingCode   ,
faceLiftGeneration   = REC_veh_VP.faceLiftGeneration  ,
kindCode     = REC_veh_VP.kindCode    ,
bodyCode     = REC_veh_VP.bodyCode    ,
height   = REC_veh_VP.height  ,
length   = REC_veh_VP.length  ,
sportinessFlag   = REC_veh_VP.sportinessFlag  ,
co2EmissionNEDC  = REC_veh_VP.co2EmissionNEDC ,
co2EmissionWLTP  = REC_veh_VP.co2EmissionWLTP ,
co2ClassCode     = REC_veh_VP.co2ClassCode    ,
fiscalHorsePower     = REC_veh_VP.fiscalHorsePower    ,
maximumPowerDin  = REC_veh_VP.maximumPowerDin ,
maximumPowerKW   = REC_veh_VP.maximumPowerKW  ,
energy1Code  = REC_veh_VP.energy1Code ,
energy1DetailCode    = REC_veh_VP.energy1DetailCode   ,
energy2Code  = REC_veh_VP.energy2Code ,
energy2DetailCode    = REC_veh_VP.energy2DetailCode   ,
energyCombCode   = REC_veh_VP.energyCombCode  ,
motorisation     = REC_veh_VP.motorisation    ,
motorisationComb     = REC_veh_VP.motorisationComb    ,
cubicCapacity    = REC_veh_VP.cubicCapacity   ,
transmissionTypeCode     = REC_veh_VP.transmissionTypeCode    ,
gearBoxTypeCode  = REC_veh_VP.gearBoxTypeCode ,
nbRapports   = REC_veh_VP.nbRapports  ,
typeVariantVersion   = REC_veh_VP.typeVariantVersion  ,
trimLevel    = REC_veh_VP.trimLevel   ,
seatNumber   = REC_veh_VP.seatNumber  ,
doorNumber   = REC_veh_VP.doorNumber  ,
nedcCombineFuelConsumption   = REC_veh_VP.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_veh_VP.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_veh_VP.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_veh_VP.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_veh_VP.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_veh_VP.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_veh_VP.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_veh_VP.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_veh_VP.wltpElectricConsumption ,
wltpElectricRange    = REC_veh_VP.wltpElectricRange   ,
batteryCapacity  = REC_veh_VP.batteryCapacity ,
maxLadenWeight   = REC_veh_VP.maxLadenWeight  ,
kerbWeight   = REC_veh_VP.kerbWeight  ,
payLoad  = REC_veh_VP.payLoad ,
hasTelematicBox  = REC_veh_VP.hasTelematicBox ,
catalogueDetail  = REC_veh_VP.catalogueDetail ,
tsnNumber    = REC_veh_VP.tsnNumber   ,
wltpFlag     = REC_veh_VP.wltpFlag    ,
completenessFlag     = REC_veh_VP.completenessFlag    ,
validationUser   = REC_veh_VP.validationUser  ,
validationDate   = REC_veh_VP.validationDate  ,
updateUser   = REC_veh_VP.updateUser  ,
updateDate   = REC_veh_VP.updateDate  ,
purchaseCondition    = REC_veh_VP.purchaseCondition   ,
designBases  = REC_veh_VP.designBases ,
designCustomerShip   = REC_veh_VP.designCustomerShip  ,
versionLabelGlobalShort  = REC_veh_VP.versionLabelGlobalShort ,
versionLabeGlobalLong    = REC_veh_VP.versionLabeGlobalLong   ,
versionLabelLocalShort   = REC_veh_VP.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_veh_VP.versionLabelLocalLong,
VEHICULE_TYPE           =       REC_veh_VP.VEHICULE_TYPE,
model_gen                = REC_veh_vp.MODEL_GEN_ID,
TRIM                 =  REC_veh_VP.TRIM_ID,
MOTORISATIONBLVD    = REC_veh_VP.MOTORISATIONBLVD_ID,
DIMENSIONS       = REC_veh_VP.DIMENSIONS_ID,
door_seat = REC_veh_VP.door_seat,
year_trimester = REC_veh_VP.year_trimester


        where  itemDirectoryVehicleRef  = REC_veh_VP.itemDirectoryVehicleRef  
        and versionYear  = REC_veh_VP.versionYear 
        and  versionTrimester     = REC_veh_VP.versionTrimester    ;  
        
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
       -- and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    	--and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
        --and V_DATE_SITU  =  Date_situ 
       -- and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','Message Erreur pl/sql :'||Sqlerrm,'E');
                Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh',to_char(REC_veh_VP.tech_id|| '-' || REC_veh_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_veh_VU IN C_veh_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_veh
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabeGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester
              )
        VALUES
              (  
REC_veh_VU.tech_id ,
REC_veh_VU.tech_dateExtraction ,
REC_veh_VU.tech_dateInsertion  ,
REC_veh_VU.countryCode ,
REC_veh_VU.itemDirectoryVehicleRef ,
REC_veh_VU.versionState    ,
REC_veh_VU.validityStartDate   ,
REC_veh_VU.validityEndDate ,
REC_veh_VU.corporateGroupCode  ,
REC_veh_VU.corporateGroupLabel ,
REC_veh_VU.brandCode   ,
REC_veh_VU.brandLabel  ,
REC_veh_VU.familyCode  ,
REC_veh_VU.familyLabel ,
REC_veh_VU.generation  ,
REC_veh_VU.versionYear ,
REC_veh_VU.versionTrimester    ,
REC_veh_VU.segmentMarketingCode   ,
REC_veh_VU.faceLiftGeneration  ,
REC_veh_VU.kindCode    ,
REC_veh_VU.bodyCode    ,
REC_veh_VU.height  ,
REC_veh_VU.length  ,
REC_veh_VU.sportinessFlag  ,
REC_veh_VU.co2EmissionNEDC ,
REC_veh_VU.co2EmissionWLTP ,
REC_veh_VU.co2ClassCode    ,
REC_veh_VU.fiscalHorsePower    ,
REC_veh_VU.maximumPowerDin ,
REC_veh_VU.maximumPowerKW  ,
REC_veh_VU.energy1Code ,
REC_veh_VU.energy1DetailCode   ,
REC_veh_VU.energy2Code ,
REC_veh_VU.energy2DetailCode   ,
REC_veh_VU.energyCombCode  ,
REC_veh_VU.motorisation    ,
REC_veh_VU.motorisationComb    ,
REC_veh_VU.cubicCapacity   ,
REC_veh_VU.transmissionTypeCode    ,
REC_veh_VU.gearBoxTypeCode ,
REC_veh_VU.nbRapports  ,
REC_veh_VU.typeVariantVersion  ,
REC_veh_VU.trimLevel   ,
REC_veh_VU.seatNumber  ,
REC_veh_VU.doorNumber  ,
REC_veh_VU.nedcCombineFuelConsumption  ,
REC_veh_VU.nedcExtraUrbanFuelConsumption   ,
REC_veh_VU.nedcUrbanFuelConsumption    ,
REC_veh_VU.wltpLowFuelConsumption  ,
REC_veh_VU.wltpMediumFuelConsumption   ,
REC_veh_VU.wltpHighFuelConsumption ,
REC_veh_VU.wltpExtraHighConsumption    ,
REC_veh_VU.wltpCombinedFuelConsumption ,
REC_veh_VU.wltpElectricConsumption ,
REC_veh_VU.wltpElectricRange   ,
REC_veh_VU.batteryCapacity ,
REC_veh_VU.maxLadenWeight  ,
REC_veh_VU.kerbWeight  ,
REC_veh_VU.payLoad ,
REC_veh_VU.hasTelematicBox ,
REC_veh_VU.catalogueDetail ,
REC_veh_VU.tsnNumber   ,
REC_veh_VU.wltpFlag    ,
REC_veh_VU.completenessFlag    ,
REC_veh_VU.validationUser  ,
REC_veh_VU.validationDate  ,
REC_veh_VU.updateUser  ,
REC_veh_VU.updateDate  ,
REC_veh_VU.purchaseCondition   ,
REC_veh_VU.designBases ,
REC_veh_VU.designCustomerShip  ,
REC_veh_VU.versionLabelGlobalShort ,
REC_veh_VU.versionLabeGlobalLong   ,
REC_veh_VU.versionLabelLocalShort  ,
REC_veh_VU.versionLabelLocalLong   ,
REC_veh_VU.VEHICULE_TYPE,
rec_veh_vu.MODEL_GEN_ID,
REC_veh_Vu.TRIM_ID,
REC_veh_Vu.MOTORISATIONBLVD_ID,
REC_veh_Vu.DIMENSIONS_ID,
REC_veh_Vu.door_seat,
REC_veh_Vu.year_trimester
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh
        Set        
tech_id  =     REC_veh_VU.tech_id ,
tech_dateExtraction  = REC_veh_VU.tech_dateExtraction ,
tech_dateInsertion   = REC_veh_VU.tech_dateInsertion  ,
countryCode  = REC_veh_VU.countryCode ,
--itemDirectoryVehicleRef  = REC_veh_VU.itemDirectoryVehicleRef ,
versionState     = REC_veh_VU.versionState    ,
validityStartDate    = REC_veh_VU.validityStartDate   ,
validityEndDate  = REC_veh_VU.validityEndDate ,
corporateGroupCode   = REC_veh_VU.corporateGroupCode  ,
corporateGroupLabel  = REC_veh_VU.corporateGroupLabel ,
brandCode    = REC_veh_VU.brandCode   ,
brandLabel   = REC_veh_VU.brandLabel  ,
familyCode   = REC_veh_VU.familyCode  ,
familyLabel  = REC_veh_VU.familyLabel ,
--generation   = REC_veh_VU.generation  ,
--versionYear  = REC_veh_VU.versionYear ,
versionTrimester     = REC_veh_VU.versionTrimester    ,
segmentMarketingCode    = REC_veh_VU.segmentMarketingCode   ,
faceLiftGeneration   = REC_veh_VU.faceLiftGeneration  ,
kindCode     = REC_veh_VU.kindCode    ,
bodyCode     = REC_veh_VU.bodyCode    ,
height   = REC_veh_VU.height  ,
length   = REC_veh_VU.length  ,
sportinessFlag   = REC_veh_VU.sportinessFlag  ,
co2EmissionNEDC  = REC_veh_VU.co2EmissionNEDC ,
co2EmissionWLTP  = REC_veh_VU.co2EmissionWLTP ,
co2ClassCode     = REC_veh_VU.co2ClassCode    ,
fiscalHorsePower     = REC_veh_VU.fiscalHorsePower    ,
maximumPowerDin  = REC_veh_VU.maximumPowerDin ,
maximumPowerKW   = REC_veh_VU.maximumPowerKW  ,
energy1Code  = REC_veh_VU.energy1Code ,
energy1DetailCode    = REC_veh_VU.energy1DetailCode   ,
energy2Code  = REC_veh_VU.energy2Code ,
energy2DetailCode    = REC_veh_VU.energy2DetailCode   ,
energyCombCode   = REC_veh_VU.energyCombCode  ,
motorisation     = REC_veh_VU.motorisation    ,
motorisationComb     = REC_veh_VU.motorisationComb    ,
cubicCapacity    = REC_veh_VU.cubicCapacity   ,
transmissionTypeCode     = REC_veh_VU.transmissionTypeCode    ,
gearBoxTypeCode  = REC_veh_VU.gearBoxTypeCode ,
nbRapports   = REC_veh_VU.nbRapports  ,
typeVariantVersion   = REC_veh_VU.typeVariantVersion  ,
trimLevel    = REC_veh_VU.trimLevel   ,
seatNumber   = REC_veh_VU.seatNumber  ,
doorNumber   = REC_veh_VU.doorNumber  ,
nedcCombineFuelConsumption   = REC_veh_VU.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_veh_VU.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_veh_VU.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_veh_VU.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_veh_VU.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_veh_VU.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_veh_VU.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_veh_VU.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_veh_VU.wltpElectricConsumption ,
wltpElectricRange    = REC_veh_VU.wltpElectricRange   ,
batteryCapacity  = REC_veh_VU.batteryCapacity ,
maxLadenWeight   = REC_veh_VU.maxLadenWeight  ,
kerbWeight   = REC_veh_VU.kerbWeight  ,
payLoad  = REC_veh_VU.payLoad ,
hasTelematicBox  = REC_veh_VU.hasTelematicBox ,
catalogueDetail  = REC_veh_VU.catalogueDetail ,
tsnNumber    = REC_veh_VU.tsnNumber   ,
wltpFlag     = REC_veh_VU.wltpFlag    ,
completenessFlag     = REC_veh_VU.completenessFlag    ,
validationUser   = REC_veh_VU.validationUser  ,
validationDate   = REC_veh_VU.validationDate  ,
updateUser   = REC_veh_VU.updateUser  ,
updateDate   = REC_veh_VU.updateDate  ,
purchaseCondition    = REC_veh_VU.purchaseCondition   ,
designBases  = REC_veh_VU.designBases ,
designCustomerShip   = REC_veh_VU.designCustomerShip  ,
versionLabelGlobalShort  = REC_veh_VU.versionLabelGlobalShort ,
versionLabeGlobalLong    = REC_veh_VU.versionLabeGlobalLong   ,
versionLabelLocalShort   = REC_veh_VU.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_veh_VU.versionLabelLocalLong   ,
VEHICULE_TYPE       =       REC_veh_VU.VEHICULE_TYPE,
MODEL_GEN = REC_veh_Vu.MODEL_GEN_ID,
TRIM = REC_veh_Vu.TRIM_ID,
MOTORISATIONBLVD = REC_veh_Vu.MOTORISATIONBLVD_ID,
DIMENSIONS = REC_veh_Vu.DIMENSIONS_ID,
door_seat = REC_veh_Vu.door_seat,
year_trimester = REC_veh_Vu.year_trimester


        where itemDirectoryVehicleRef  = REC_veh_VU.itemDirectoryVehicleRef 
        and versionYear  = REC_veh_VU.versionYear 
        and  versionTrimester     = REC_veh_VU.versionTrimester    ;  
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
       -- and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    	--and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
        --and V_DATE_SITU  =  Date_situ 
       -- and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_veh;



  FUNCTION ALIM_veh_crossRefs (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


  Cursor C_veh_crossRefs Is
  
select  distinct
TECH_ID as TECH_ID, 
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
versionYear	as versionYear,
versionTrimester as versionTrimester,
VEHICULE_TYPE as VEHICULE_TYPE,
BRANDCODE || MODEL_GEN || KINDCODE || DIMENSIONS || door_seat || TRIM || energyCombCode ||MOTORISATIONBLVD || year_trimester AS BLVD
--BRANDCODE || MODEL_GEN || KINDCODE || DIMENSIONS || DOORNUMBER || TRIM || energyCombCode ||MOTORISATIONBLVD || versionTrimester AS BLVD
from MKTQT_VEH
where  brandcode is not null 
and brandLabel is not null 
and familyLabel is not null 
and KINDCODE is not null 
and bodyCode is not null 
and TRIM is not null 
and energyCombCode is not null 
and maximumPowerDin is not null 
and transmissionTypeCode is not null 
and gearBoxTypeCode is not null 
and year_trimester is not null
;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_crossRefs','## Alimentation de la table MKTREF.MKTQT_veh_crossRefs ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_crossRefs','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_crossRefs IN C_veh_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_crossRefs
              (   
tech_id, 
itemDirectoryVehicleRef,
versionYear,
versionTrimester,
VEHICULE_TYPE,
BLVD
              )
        VALUES
              (  
REC_veh_crossRefs.tech_id,
REC_veh_crossRefs.itemDirectoryVehicleRef,
REC_veh_crossRefs.versionYear,
REC_veh_crossRefs.versionTrimester,
REC_veh_crossRefs.VEHICULE_TYPE,
REC_veh_crossRefs.BLVD
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_crossRefs
        Set       
        tech_id = REC_veh_crossRefs.tech_id ,
        VEHICULE_TYPE = REC_veh_crossRefs.VEHICULE_TYPE

        where   itemDirectoryVehicleRef = REC_veh_crossRefs.itemDirectoryVehicleRef
        and     versionYear = REC_veh_crossRefs.versionYear
        and     versionTrimester = REC_veh_crossRefs.versionTrimester 
        and     BLVD = REC_veh_crossRefs.BLVD ;
        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   

          
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;

  END ALIM_veh_crossRefs;



  FUNCTION ALIM_veh_pricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

---- pas de doublons

  Cursor C_veh_pricings Is
  Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VP' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
B.EffectiveFrom as priceStartDate,
B.EffectiveTo as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_veh veh, MKTREF.MKTQT_NVDPrices_VP B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VP'
 and veh.validityStartDate <= b.effectivefrom and (veh.validityEndDate >= b.effectiveto or b.effectiveto is null )  -- validityStartDate <= NVDPrices.EffectiveFrom and (validityEndDate >= NVDPrices.EffectiveTo or NVDPrices.EffectiveTo == blank)     
union
  Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH  
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
B.EffectiveFrom as priceStartDate,
B.EffectiveTo as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_veh veh, MKTREF.MKTQT_NVDPrices_VU B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VU'
 and veh.validityStartDate <= b.effectivefrom and (veh.validityEndDate >= b.effectiveto or b.effectiveto is null )   
;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_pricings','## Alimentation de la table MKTREF.REC_veh_pricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_pricings','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_pricings IN C_veh_pricings
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_pricings
              ( 
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
versionYear,------ AJOUT POUR JOINTURE  
versionTrimester,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
tariffAreaCode,
priceCode,
priceType,
priceTypeCustomer,
priceStartDate,
priceEndDate,
vatAmount,
priceET,
priceIT,
priceIncludeVAT,
currency,
immAmount,
immRate,
novaAmount,
novaRate,
priceWithoutOtrCostIT,
priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT
              )
        VALUES
              (  
REC_veh_pricings.tech_id,    ------ AJOUT POUR JOINTURE   
REC_veh_pricings.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_pricings.versionYear,------ AJOUT POUR JOINTURE  
REC_veh_pricings.versionTrimester,------ AJOUT POUR JOINTURE  
REC_veh_pricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_pricings.tariffAreaCode,
REC_veh_pricings.priceCode,
REC_veh_pricings.priceType,
REC_veh_pricings.priceTypeCustomer,
REC_veh_pricings.priceStartDate,
REC_veh_pricings.priceEndDate,
REC_veh_pricings.vatAmount,
REC_veh_pricings.priceET,
REC_veh_pricings.priceIT,
REC_veh_pricings.priceIncludeVAT,
REC_veh_pricings.currency,
REC_veh_pricings.immAmount,
REC_veh_pricings.immRate,
REC_veh_pricings.novaAmount,
REC_veh_pricings.novaRate,
REC_veh_pricings.priceWithoutOtrCostIT,
REC_veh_pricings.priceWithoutOtrCostET,
REC_veh_pricings.priceWithoutOtrCostIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_pricings
        Set        
tech_id          =      REC_veh_pricings.tech_id ,
tariffAreaCode = REC_veh_pricings.tariffAreaCode,
priceCode = REC_veh_pricings.priceCode,
priceType = REC_veh_pricings.priceType,
priceTypeCustomer = REC_veh_pricings.priceTypeCustomer,
priceStartDate = REC_veh_pricings.priceStartDate,
priceEndDate = REC_veh_pricings.priceEndDate,
vatAmount = REC_veh_pricings.vatAmount,
priceET = REC_veh_pricings.priceET,
priceIT = REC_veh_pricings.priceIT,
priceIncludeVAT = REC_veh_pricings.priceIncludeVAT,
currency = REC_veh_pricings.currency,
immAmount = REC_veh_pricings.immAmount,
immRate = REC_veh_pricings.immRate,
novaAmount = REC_veh_pricings.novaAmount,
novaRate = REC_veh_pricings.novaRate,
priceWithoutOtrCostIT = REC_veh_pricings.priceWithoutOtrCostIT,
priceWithoutOtrCostET = REC_veh_pricings.priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT = REC_veh_pricings.priceWithoutOtrCostIncludeVAT,
VEHICULE_TYPE = REC_veh_pricings.VEHICULE_TYPE  

        where  itemDirectoryVehicleRef = REC_veh_pricings.itemDirectoryVehicleRef 
        and versionYear = REC_veh_pricings.versionYear
        and versionTrimester = REC_veh_pricings.versionTrimester ;

       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_pricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_pricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_veh_pricings;




  FUNCTION ALIM_veh_options (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;
  
  

  Cursor C_veh_options Is
  
    Select 
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VP' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (44, 45, 73, 74, 75, 76, 81, 82, 86, 90, 97) then 'C' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate

from mktqt_veh veh, mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B, mktref.mktqt_NVDPackContents_VP C, MKTQT_NVDPackPeriods_VP D
where veh.tech_id = A.id and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode (+)
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)

union   

select
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'C' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate

from mktqt_veh veh, mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B, mktref.mktqt_NVDPackContents_VU C, MKTQT_NVDPackPeriods_VU D
where veh.tech_id = A.id and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode (+)
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)
  
; 
  
  /*
  ------------------------------------------------------------ A REVOIR LA REQUETE :  TROP DE LIGNES (DOUBLONS) ==>>  132140858  
    Cursor C_veh_options_VP Is
  Select 
A.Id as tech_id,
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (44, 45, 73, 74, 75, 76, 81, 82, 86, 90, 97) then 'C' else 'O' end) as typeCode,
(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate

from mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B, mktref.mktqt_NVDPackContents_VP C
where A.optioncode = B.optioncode
and A.optioncode = C.optioncode (+) ; 
          

------------------------------------------------------------ A REVOIR LA REQUETE :  TROP DE LIGNES (DOUBLONS) ==>>  57598775
  Cursor C_veh_options_VU Is
  Select 
A.Id as tech_id,
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'C' else 'O' end) as typeCode,
(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate

from mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B, mktref.mktqt_NVDPackContents_VU C
where A.optioncode = B.optioncode
and A.optioncode = C.optioncode (+) ; 
*/


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_options','## Alimentation de la table MKTREF.MKTQT_veh_options ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_options','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_options IN C_veh_options
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_options
              (  
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
versionYear,------ AJOUT POUR JOINTURE  
versionTrimester,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE 
code,
constructorCode,
typeCode,
isPack,
isAgregated,
startDate,
endDate
              )
              
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_options.versionYear,------ AJOUT POUR JOINTURE  
REC_veh_options.versionTrimester,------ AJOUT POUR JOINTURE  
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE 
REC_veh_options.code,
REC_veh_options.constructorCode,
REC_veh_options.typeCode,
REC_veh_options.isPack,
REC_veh_options.isAgregated,
REC_veh_options.startDate,
REC_veh_options.endDate
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_options
        Set       

--code = REC_veh_options.code,
tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
constructorCode = REC_veh_options.constructorCode,
typeCode = REC_veh_options.typeCode,
isPack = REC_veh_options.isPack,
isAgregated = REC_veh_options.isAgregated,
startDate = REC_veh_options.startDate,
endDate  = REC_veh_options.endDate

        where code = REC_veh_options.code
        and   itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef
        and   versionYear = REC_veh_options.versionYear
        and   versionTrimester = REC_veh_options.versionTrimester ;
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_options','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_options','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
   
    
  END ALIM_veh_options;





  FUNCTION ALIM_veh_optionslabels (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;



  Cursor C_veh_optionslabels_VP Is
  Select  distinct
A.ID as tech_id, --ADD
A.optioncode as code, --ADD
'en_GB' as language,
B.description as labelShort,
B.longdescription as labelLong
          
from mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B
where A.optioncode = B.optioncode;



  Cursor C_veh_optionslabels_VU Is
  Select distinct
A.ID as tech_id, --ADD
A.optioncode as code, --ADD
'en_GB' as language,
B.description as labelShort,
B.longdescription as labelLong
          
from mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B
where A.optioncode = B.optioncode;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionslabels','## Alimentation de la table MKTREF.MKTQT_veh_optionslabels ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionslabels','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionslabels_VP IN C_veh_optionslabels_VP
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_optionslabels
              (   
tech_id,
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_optionslabels_VP.tech_id,
REC_veh_optionslabels_VP.code,
REC_veh_optionslabels_VP.language,
REC_veh_optionslabels_VP.labelShort,
REC_veh_optionslabels_VP.labelLong
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_optionslabels
        Set       

--language = REC_veh_optionslabels_VP.language,
labelShort = REC_veh_optionslabels_VP.labelShort,
labelLong = REC_veh_optionslabels_VP.labelLong

        where language = REC_veh_optionslabels_VP.language
        and tech_id = REC_veh_optionslabels_VP.tech_id
        and code = REC_veh_optionslabels_VP.code ;
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionslabels','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionslabels','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
    --------------------------VU
   
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_veh_optionslabels_VU IN C_veh_optionslabels_VU
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_optionslabels
              (   
tech_id,
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_optionslabels_VU.tech_id,
REC_veh_optionslabels_VU.code,
REC_veh_optionslabels_VU.language,
REC_veh_optionslabels_VU.labelShort,
REC_veh_optionslabels_VU.labelLong
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_optionslabels
        Set       

--language = REC_veh_optionslabels_VU.language,
labelShort = REC_veh_optionslabels_VU.labelShort,
labelLong = REC_veh_optionslabels_VU.labelLong

        where language = REC_veh_optionslabels_VU.language
        and tech_id = REC_veh_optionslabels_VU.tech_id
        and code = REC_veh_optionslabels_VU.code ;
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionslabels','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionslabels','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;


  END ALIM_veh_optionslabels;





  FUNCTION ALIM_veh_optionspricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_veh_optionspricings_VP Is
  Select distinct
A.id as tech_id,
A.optioncode as code,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
A.effectiveFrom as pricebookStartDate,
A.effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
A.Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT

from MKTREF.MKTQT_NVDOption_VP A ;


  Cursor C_veh_optionspricings_VU Is
  Select distinct
A.id as tech_id,
A.optioncode as code,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
A.effectiveFrom as pricebookStartDate,
A.effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
A.Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT

from MKTREF.MKTQT_NVDOption_VU A ;
          

 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionspricings','## Alimentation de la table MKTREF.MKTQT_veh_optionspricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionspricings','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionspricings_VP IN C_veh_optionspricings_VP
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_optionspricings
              (
tech_id,
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_optionspricings_VP.tech_id,
REC_veh_optionspricings_VP.code,
REC_veh_optionspricings_VP.territorialityCode,
REC_veh_optionspricings_VP.pricebookCode,
REC_veh_optionspricings_VP.pricebookType,
REC_veh_optionspricings_VP.pricebookTypeCustomer,
REC_veh_optionspricings_VP.pricebookStartDate,
REC_veh_optionspricings_VP.pricebookEndDate,
REC_veh_optionspricings_VP.vatAmount,
REC_veh_optionspricings_VP.currency,
REC_veh_optionspricings_VP.priceET,
REC_veh_optionspricings_VP.priceIT,
REC_veh_optionspricings_VP.priceIncludeVAT,
REC_veh_optionspricings_VP.basePriceWithChargesET,
REC_veh_optionspricings_VP.basePriceWithChargesIT,
REC_veh_optionspricings_VP.basePriceWithChargesIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_optionspricings
        Set       
territorialityCode = REC_veh_optionspricings_VP.territorialityCode,
pricebookCode = REC_veh_optionspricings_VP.pricebookCode,
pricebookType = REC_veh_optionspricings_VP.pricebookType,
pricebookTypeCustomer = REC_veh_optionspricings_VP.pricebookTypeCustomer,
pricebookStartDate = REC_veh_optionspricings_VP.pricebookStartDate,
pricebookEndDate = REC_veh_optionspricings_VP.pricebookEndDate,
vatAmount = REC_veh_optionspricings_VP.vatAmount,
currency = REC_veh_optionspricings_VP.currency,
priceET = REC_veh_optionspricings_VP.priceET,
priceIT = REC_veh_optionspricings_VP.priceIT,
priceIncludeVAT = REC_veh_optionspricings_VP.priceIncludeVAT,
basePriceWithChargesET = REC_veh_optionspricings_VP.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_optionspricings_VP.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_optionspricings_VP.basePriceWithChargesIncludeVAT

        where tech_id = REC_veh_optionspricings_VP.tech_id
        and code = REC_veh_optionspricings_VP.code  ;
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionspricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionspricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   ---------------------------VU
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  


  FOR REC_veh_optionspricings_VU IN C_veh_optionspricings_VU
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_optionspricings
              (
tech_id,
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_optionspricings_VU.tech_id,
REC_veh_optionspricings_VU.code,
REC_veh_optionspricings_VU.territorialityCode,
REC_veh_optionspricings_VU.pricebookCode,
REC_veh_optionspricings_VU.pricebookType,
REC_veh_optionspricings_VU.pricebookTypeCustomer,
REC_veh_optionspricings_VU.pricebookStartDate,
REC_veh_optionspricings_VU.pricebookEndDate,
REC_veh_optionspricings_VU.vatAmount,
REC_veh_optionspricings_VU.currency,
REC_veh_optionspricings_VU.priceET,
REC_veh_optionspricings_VU.priceIT,
REC_veh_optionspricings_VU.priceIncludeVAT,
REC_veh_optionspricings_VU.basePriceWithChargesET,
REC_veh_optionspricings_VU.basePriceWithChargesIT,
REC_veh_optionspricings_VU.basePriceWithChargesIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_optionspricings
        Set       
territorialityCode = REC_veh_optionspricings_VU.territorialityCode,
pricebookCode = REC_veh_optionspricings_VU.pricebookCode,
pricebookType = REC_veh_optionspricings_VU.pricebookType,
pricebookTypeCustomer = REC_veh_optionspricings_VU.pricebookTypeCustomer,
pricebookStartDate = REC_veh_optionspricings_VU.pricebookStartDate,
pricebookEndDate = REC_veh_optionspricings_VU.pricebookEndDate,
vatAmount = REC_veh_optionspricings_VU.vatAmount,
currency = REC_veh_optionspricings_VU.currency,
priceET = REC_veh_optionspricings_VU.priceET,
priceIT = REC_veh_optionspricings_VU.priceIT,
priceIncludeVAT = REC_veh_optionspricings_VU.priceIncludeVAT,
basePriceWithChargesET = REC_veh_optionspricings_VU.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_optionspricings_VU.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_optionspricings_VU.basePriceWithChargesIncludeVAT

        where tech_id = REC_veh_optionspricings_VU.tech_id
        and code = REC_veh_optionspricings_VU.code  ;
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_optionspricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_optionspricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS)); 
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;

    
  END ALIM_veh_optionspricings;




  FUNCTION ALIM_veh_baseEquipments (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;




  Cursor C_veh_baseEquipments Is
Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VP' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_veh veh, MKTREF.MKTQT_NVDStandardEquipment_VP A, MKTREF.MKTQT_NVDDictionaryOption_VP B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode  (+)

union

Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_veh veh, MKTREF.MKTQT_NVDStandardEquipment_VU A, MKTREF.MKTQT_NVDDictionaryOption_VU B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode  (+)

; 

/*
  Cursor C_veh_baseEquipments_VP Is
  Select distinct
A.Id as tech_id,
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_NVDStandardEquipment_VP A, MKTREF.MKTQT_NVDDictionaryOption_VP B
where A.optioncode = B.optioncode   ; 
      
      
  Cursor C_veh_baseEquipments_VU Is
  Select distinct
A.Id as tech_id,
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_NVDStandardEquipment_VU A, MKTREF.MKTQT_NVDDictionaryOption_VU B
where A.optioncode = B.optioncode   ;       
          

*/


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_baseEquipments','## Alimentation de la table MKTREF.MKTQT_veh_baseEquipments ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_veh_baseEquipments','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  


  FOR REC_veh_baseEquipments IN C_veh_baseEquipments
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_veh_baseEquipments
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
versionYear,------ AJOUT POUR JOINTURE  
versionTrimester,------ AJOUT POUR JOINTURE  
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
externalRef,
typeCategoryCode,
language,
label
              )
              
        VALUES
              (  
REC_veh_baseEquipments.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_baseEquipments.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.versionYear,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.versionTrimester,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.externalRef,
REC_veh_baseEquipments.typeCategoryCode,
REC_veh_baseEquipments.language,
REC_veh_baseEquipments.label 
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_veh_baseEquipments
        Set        
--externalRef= REC_veh_baseEquipments.externalRef,
tech_id          =      REC_veh_baseEquipments.tech_id  ,
VEHICULE_TYPE = REC_veh_baseEquipments.VEHICULE_TYPE,
typeCategoryCode= REC_veh_baseEquipments.typeCategoryCode,
language= REC_veh_baseEquipments.language,
label= REC_veh_baseEquipments.label 

        where  externalRef          =      REC_veh_baseEquipments.externalRef 
        and  itemDirectoryVehicleRef = REC_veh_baseEquipments.itemDirectoryVehicleRef 
        and versionYear = REC_veh_baseEquipments.versionYear
        and versionTrimester = REC_veh_baseEquipments.versionTrimester ;
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_veh_baseEquipments','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_veh_baseEquipments','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_veh_baseEquipments;


-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------



  FUNCTION ALIM_transco_model_gen (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
 
  
 select  distinct
 
                 BRAND_CODE     as  parent,  -- brandCode
                VEHICULE_NAME   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                MODEL_GEN_ID    as code,
                CROSSREF_CODE   as CROSSREF_CODE

 from  MKTREF.MKTQT_MODEL_GEN   MODEL_GEN
; 
 
 
 


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','--------------------------BEGIN----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','## Alimentation de la table MKTREF.MKTQT_transco ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'model_gen'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent	, --- MAPPING : parent_details_code = parent
'brandCode'	, --parent_details_entity
REC_transco.parent, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'model_gen', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent =   REC_transco.parent,
      parent_details_code = REC_transco.parent, --- mapping  parent_details_code = parent
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label
        
      where  entity = 'model_gen'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'model_gen'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU  
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_model_gen;





  FUNCTION ALIM_transco_trim (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_trim_model_gen Is
        
  
 select  distinct
                TRIM.BRAND_CODE || model_gen.code     as  parent,  -- brandCode
                TRIM.VEHICULE_TRIM   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                TRIM.TRIM_ID    as code,
                TRIM.CROSSREF_CODE   as CROSSREF_CODE,
                TRIM.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.code as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_TRIM  TRIM, MKTREF.MKTQT_transco model_gen
 where TRIM.BRAND_CODE = model_gen.parent_details_code
 and   model_gen.entity='model_gen'
; 
 
         
        


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = brandCode ##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','## Alimentation de la table MKTREF.MKTQT_transco ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      parent = REC_transco.parent, 
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
  
  
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = model_gen ##');

  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      parent = REC_transco.parent, 
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' '); 
  
  
  
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_trim;






  FUNCTION ALIM_transco_motorisationBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

--471   generation
--477   generation

  Cursor C_transco_motor_model_gen Is

 select  distinct
                motorisationBLVD.BRAND_CODE || model_gen.code     as  parent,  -- brandCode
                motorisationBLVD.VEHICULE_motorisationBLVD   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                motorisationBLVD.motorisationBLVD_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                motorisationBLVD.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.code as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_motorisationBLVD  motorisationBLVD, MKTREF.MKTQT_transco model_gen
 where motorisationBLVD.BRAND_CODE = model_gen.parent_details_code
 and   model_gen.entity='model_gen'
; 
 



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','## Alimentation de la table MKTREF.MKTQT_transco ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      parent = REC_transco.parent, --- mapping  parent_details_code = parent
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = model_gen ##'); 
   
   
  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      parent = REC_transco.parent, --- mapping  parent_details_code = parent
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_motorisationBLVD;






  FUNCTION ALIM_transco_dimensions (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

-- 14 :
--32 payLoad  : charge utile  (VU)

  Cursor C_transco_dimensions_model_gen Is

 select  distinct
                dimensions.BRAND_CODE || model_gen.code     as  parent,  -- brandCode
                dimensions.VEHICULE_dimensions   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                dimensions.dimensions_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                dimensions.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.code as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_dimensions  dimensions, MKTREF.MKTQT_transco model_gen
 where dimensions.BRAND_CODE = model_gen.parent_details_code
 and   model_gen.entity='model_gen'
; 
 




 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','## Alimentation de la table MKTREF.MKTQT_transco ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;




  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      parent = REC_transco.parent, --- mapping  parent_details_code = parent
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = model_gen ##'); 
   

  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      parent = REC_transco.parent, --- mapping  parent_details_code = parent
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_dimensions;








  FUNCTION UPDATE_transco_model (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
  select 
  
  Entity			    as Entity			,
code			as code			,
startValidityDate	as startValidityDate	,
endValidityDate		as endValidityDate		,
parent			as parent			,
parent_details_entity		   as parent_details_entity		,
--parent_details_code		as parent_details_code		,
description_language		as description_language		,
description_label		as description_label		,
crossref_typecode		as crossref_typecode		,
crossref_country		as crossref_country		,
crossref_code			as crossref_code			,
translation_language	as translation_language	,
translation_label	as translation_label	,
bomAttribut		as bomAttribut		,
countryScope	as countryScope	
  from mktref.mktqt_transco where entity = 'model'
  

; 
  
  
  
  
  


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);

  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','## Alimentation de la table MKTREF.MKTQT_transco ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_transco
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES  --REC_transco
              (  
REC_transco.Entity			,
REC_transco.code			,
REC_transco.startValidityDate	,
REC_transco.endValidityDate		,
REC_transco.parent			,
REC_transco.parent_details_entity		,
REC_transco.parent		,   --- parent_details_code
REC_transco.description_language		,
REC_transco.description_label		,
REC_transco.crossref_typecode		,
REC_transco.crossref_country		,
REC_transco.crossref_code			,
REC_transco.translation_language	,
REC_transco.translation_label	,
REC_transco.bomAttribut		,
REC_transco.countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_transco
        Set        
        
      parent =   REC_transco.parent,
      parent_details_code = REC_transco.parent, ------- mise a jour
      translation_label = REC_transco.translation_label,  
      description_label = REC_transco.description_label
        
      where  entity = 'model'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'familyCode'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END UPDATE_transco_model;




	
	FUNCTION EXPORT_VEH(NOMLOG	VARCHAR2, P_DATE_TRAI	DATE, P_PATH    VARCHAR2, P_FILENAME  VARCHAR2) RETURN NUMBER AS

		V_ERR                NUMBER := 0;	
		N_SAUV               NUMBER:=0;		
		v_ligne         VARCHAR2(4000);		
		file_id_cvs     utl_file.file_type;  
		file_name       VARCHAR2(30); 	 

		FILE_ID   UTL_FILE.FILE_TYPE; 
		RES       NUMBER := 0;			
        

		Cursor C_mktqt_veh Is 
		SELECT  *   FROM MKTREF.MKTQT_VEH
        order by tech_id
        ;  


		BEGIN
			file_name := p_filename;
			FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
			file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path,file_name);
			RES     := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_VEH', ' ## MISE A DISPOSITION du fichier ##');

 			V_LIGNE := 'TECH_ID|TECH_DATEEXTRACTION|TECH_DATEINSERTION|COUNTRYCODE|ITEMDIRECTORYVEHICLEREF|VERSIONSTATE|VALIDITYSTARTDATE|VALIDITYENDDATE|CORPORATEGROUPCODE|CORPORATEGROUPLABEL|BRANDCODE|BRANDLABEL|FAMILYCODE|FAMILYLABEL|GENERATION|VERSIONYEAR|VERSIONTRIMESTER|SEGMENTMARKETINGCODE|FACELIFTGENERATION|KINDCODE|BODYCODE|HEIGHT|LENGTH|SPORTINESSFLAG|CO2EMISSIONNEDC|CO2EMISSIONWLTP|CO2CLASSCODE|FISCALHORSEPOWER|MAXIMUMPOWERDIN|MAXIMUMPOWERKW|ENERGY1CODE|ENERGY1DETAILCODE|ENERGY2CODE|ENERGY2DETAILCODE|ENERGYCOMBCODE|MOTORISATION|MOTORISATIONCOMB|CUBICCAPACITY|TRANSMISSIONTYPECODE|GEARBOXTYPECODE|NBRAPPORTS|TYPEVARIANTVERSION|TRIMLEVEL|SEATNUMBER|DOORNUMBER|NEDCCOMBINEFUELCONSUMPTION|NEDCEXTRAURBANFUELCONSUMPTION|NEDCURBANFUELCONSUMPTION|WLTPLOWFUELCONSUMPTION|WLTPMEDIUMFUELCONSUMPTION|WLTPHIGHFUELCONSUMPTION|WLTPEXTRAHIGHCONSUMPTION|WLTPCOMBINEDFUELCONSUMPTION|WLTPELECTRICCONSUMPTION|WLTPELECTRICRANGE|BATTERYCAPACITY|MAXLADENWEIGHT|KERBWEIGHT|PAYLOAD|HASTELEMATICBOX|CATALOGUEDETAIL|TSNNUMBER|WLTPFLAG|COMPLETENESSFLAG|VALIDATIONUSER|VALIDATIONDATE|UPDATEUSER|UPDATEDATE|PURCHASECONDITION|DESIGNBASES|DESIGNCUSTOMERSHIP|VERSIONLABELGLOBALSHORT|VERSIONLABEGLOBALLONG|VERSIONLABELLOCALSHORT|VERSIONLABELLOCALLONG'; --|MODEL_GEN|TRIM|MOTORISATIONBLVD|DIMENSIONS'; 
 			
			RES := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, V_LIGNE);

			FOR S_mktqt_veh IN C_mktqt_veh LOOP 

				BEGIN
					IF V_ERR=1 THEN EXIT;
					END IF;
				
					V_LIGNE := 
						S_mktqt_veh.tech_id || '|' ||
S_mktqt_veh.tech_dateExtraction || '|' ||
S_mktqt_veh.tech_dateInsertion || '|' ||
S_mktqt_veh.countryCode || '|' ||
S_mktqt_veh.itemDirectoryVehicleRef || '|' ||
S_mktqt_veh.versionState || '|' ||
S_mktqt_veh.validityStartDate || '|' ||
S_mktqt_veh.validityEndDate || '|' ||
S_mktqt_veh.corporateGroupCode || '|' ||
S_mktqt_veh.corporateGroupLabel || '|' ||
S_mktqt_veh.brandCode || '|' ||
S_mktqt_veh.brandLabel || '|' ||
S_mktqt_veh.familyCode || '|' ||
S_mktqt_veh.familyLabel || '|' ||
S_mktqt_veh.generation || '|' ||
S_mktqt_veh.versionYear || '|' ||
S_mktqt_veh.versionTrimester || '|' ||
S_mktqt_veh.segmentMarketingCode || '|' ||
S_mktqt_veh.faceLiftGeneration || '|' ||
S_mktqt_veh.kindCode || '|' ||
S_mktqt_veh.bodyCode || '|' ||
S_mktqt_veh.height || '|' ||
S_mktqt_veh.length || '|' ||
S_mktqt_veh.sportinessFlag || '|' ||
S_mktqt_veh.co2EmissionNEDC || '|' ||
S_mktqt_veh.co2EmissionWLTP || '|' ||
S_mktqt_veh.co2ClassCode || '|' ||
S_mktqt_veh.fiscalHorsePower || '|' ||
S_mktqt_veh.maximumPowerDin || '|' ||
S_mktqt_veh.maximumPowerKW || '|' ||
S_mktqt_veh.energy1Code || '|' ||
S_mktqt_veh.energy1DetailCode || '|' ||
S_mktqt_veh.energy2Code || '|' ||
S_mktqt_veh.energy2DetailCode || '|' ||
S_mktqt_veh.energyCombCode || '|' ||
S_mktqt_veh.motorisation || '|' ||
S_mktqt_veh.motorisationComb || '|' ||
S_mktqt_veh.cubicCapacity || '|' ||
S_mktqt_veh.transmissionTypeCode || '|' ||
S_mktqt_veh.gearBoxTypeCode || '|' ||
S_mktqt_veh.nbRapports || '|' ||
S_mktqt_veh.typeVariantVersion || '|' ||
S_mktqt_veh.trimLevel || '|' ||
S_mktqt_veh.seatNumber || '|' ||
S_mktqt_veh.doorNumber || '|' ||
S_mktqt_veh.nedcCombineFuelConsumption || '|' ||
S_mktqt_veh.nedcExtraUrbanFuelConsumption || '|' ||
S_mktqt_veh.nedcUrbanFuelConsumption || '|' ||
S_mktqt_veh.wltpLowFuelConsumption || '|' ||
S_mktqt_veh.wltpMediumFuelConsumption || '|' ||
S_mktqt_veh.wltpHighFuelConsumption || '|' ||
S_mktqt_veh.wltpExtraHighConsumption || '|' ||
S_mktqt_veh.wltpCombinedFuelConsumption || '|' ||
S_mktqt_veh.wltpElectricConsumption || '|' ||
S_mktqt_veh.wltpElectricRange || '|' ||
S_mktqt_veh.batteryCapacity || '|' ||
S_mktqt_veh.maxLadenWeight || '|' ||
S_mktqt_veh.kerbWeight || '|' ||
S_mktqt_veh.payLoad || '|' ||
S_mktqt_veh.hasTelematicBox || '|' ||
S_mktqt_veh.catalogueDetail || '|' ||
S_mktqt_veh.tsnNumber || '|' ||
S_mktqt_veh.wltpFlag || '|' ||
S_mktqt_veh.completenessFlag || '|' ||
S_mktqt_veh.validationUser || '|' ||
S_mktqt_veh.validationDate || '|' ||
S_mktqt_veh.updateUser || '|' ||
S_mktqt_veh.updateDate || '|' ||
S_mktqt_veh.purchaseCondition || '|' ||
S_mktqt_veh.designBases || '|' ||
S_mktqt_veh.designCustomerShip || '|' ||
S_mktqt_veh.versionLabelGlobalShort || '|' ||
S_mktqt_veh.versionLabeGlobalLong || '|' ||
S_mktqt_veh.versionLabelLocalShort || '|' ||
S_mktqt_veh.versionLabelLocalLong || '|' ;
--S_mktqt_veh.MODEL_GEN || '|' ||
--S_mktqt_veh.TRIM || '|' ||
--S_mktqt_veh.MOTORISATIONBLVD || '|' ||
--S_mktqt_veh.DIMENSIONS || '|' ;
											 

					res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, v_ligne);

					N_SAUV := N_SAUV + 1;
				EXCEPTION
					WHEN OTHERS THEN
						COMMIT;
						V_ERR  := 1;
						res     := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_VEH ', 'Message Erreur pl/sql : ' || SQLERRM );
					RETURN V_ERR;

				END;
			END LOOP;

			
			UTL_FILE.FCLOSE(file_id_cvs);
			res := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_VEH', 'Nombre de lignes Ecrites :' || N_SAUV);
			UTL_FILE.FCLOSE(file_id);


			RETURN V_ERR;

		EXCEPTION 
			WHEN OTHERS THEN
				COMMIT;
				V_ERR  := 1;
				res     := MKT.MKTQAUT.F_WRITE(file_id,'EXPORT_VEH','Message Erreur pl/sql : ' || SQLERRM);
			RETURN V_ERR; 

		/*end;  */

	END EXPORT_VEH;



	
	FUNCTION EXPORT_crossRefs(NOMLOG	VARCHAR2, P_DATE_TRAI	DATE, P_PATH    VARCHAR2, P_FILENAME  VARCHAR2) RETURN NUMBER AS

		V_ERR                NUMBER := 0;	
		N_SAUV               NUMBER:=0;		
		v_ligne         VARCHAR2(4000);		
		file_id_cvs     utl_file.file_type;  
		file_name       VARCHAR2(30); 	 

		FILE_ID   UTL_FILE.FILE_TYPE; 
		RES       NUMBER := 0;			


		Cursor C_mktqt_veh Is 
		SELECT  *   FROM MKTREF.MKTQT_veh_crossRefs
        order by tech_id
        ;  


		BEGIN
			file_name := p_filename;
			FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
			file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path,file_name);
			RES     := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_crossRefs', ' ## MISE A DISPOSITION du fichier ##');

 			V_LIGNE := 'TECH_ID|BLDV'; 
 			
			RES := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, V_LIGNE);

			FOR S_mktqt_veh IN C_mktqt_veh LOOP 

				BEGIN
					IF V_ERR=1 THEN EXIT;
					END IF;
				
					V_LIGNE := 
                    
                    S_mktqt_veh.tech_id  || '|' ||
                    S_mktqt_veh.BLVD || '|' ;
						
											 

					res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, v_ligne);

					N_SAUV := N_SAUV + 1;
				EXCEPTION
					WHEN OTHERS THEN
						COMMIT;
						V_ERR  := 1;
						res     := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_crossRefs ', 'Message Erreur pl/sql : ' || SQLERRM );
					RETURN V_ERR;

				END;
			END LOOP;

			
			UTL_FILE.FCLOSE(file_id_cvs);
			res := MKT.MKTQAUT.F_WRITE(file_id, 'EXPORT_crossRefs', 'Nombre de lignes Ecrites :' || N_SAUV);
			UTL_FILE.FCLOSE(file_id);


			RETURN V_ERR;

		EXCEPTION 
			WHEN OTHERS THEN
				COMMIT;
				V_ERR  := 1;
				res     := MKT.MKTQAUT.F_WRITE(file_id,'EXPORT_crossRefs','Message Erreur pl/sql : ' || SQLERRM);
			RETURN V_ERR; 

		/*end;  */

	END EXPORT_crossRefs;












	FUNCTION MAIN_ALIM_transco (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     /* erreur = 0 ou 1 */

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	

		---------------01			
			V_ERR     := ALIM_transco_model_gen( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

		---------------02			
			V_ERR     := ALIM_transco_trim( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        ---------------03			
			V_ERR     := ALIM_transco_motorisationBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------04
			V_ERR     := ALIM_transco_dimensions( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
      -------------------05
			V_ERR     := UPDATE_transco_model( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
			
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_transco;


	FUNCTION MAIN_ALIM_veh (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     /* erreur = 0 ou 1 */

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	
     ---------------01			
      V_ERR     := ALIM_MODEL_GEN( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------02
      V_ERR     := ALIM_TRIM( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------03
      V_ERR     := ALIM_MOTORISATIONBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------04
      V_ERR     := ALIM_DIMENSIONS( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
		---------------05	
			V_ERR     := ALIM_veh( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

		---------------06		
			V_ERR     := ALIM_veh_crossRefs( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      
        ---------------07	
			/*V_ERR     := ALIM_veh_pricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------08
  	V_ERR     := ALIM_veh_options( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
        
            
         -------------------09
			V_ERR     := ALIM_veh_optionslabels( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------10
			V_ERR     := ALIM_veh_optionspricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;            
            
         -------------------11
			V_ERR     := ALIM_veh_baseEquipments( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;       */    
 
            
			
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_veh;




END MKTQA_CAP_UK_TEST_BIS;
