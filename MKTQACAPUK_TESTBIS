create or replace PACKAGE BODY MKTQA_CAP_UK_TEST_BIS AS

/*
FUNCTION FONC_EXPORT_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
   -- V_NB_ENREG  NUMBER(10) := 0;
   -- V_NB_ENREG_TRAITE NUMBER(10) := 0;
   -- V_NB_ADDRESS      NUMBER(3) := 0;
   -- V_NB_PHONE      NUMBER(3) := 0;
    --V_NB_MAIL      NUMBER(3) := 0;
    --V_NB_BANKING      NUMBER(3) := 0;

CURSOR C_mktqt_vehicle IS
select  

veh.tech_id  as tech_id ,
veh.tech_dateExtraction  as tech_dateExtraction ,
veh.tech_dateInsertion   as tech_dateInsertion  ,
veh.countryCode  as countryCode ,
veh.itemDirectoryVehicleRef  as itemDirectoryVehicleRef ,
veh.versionState     as versionState    ,
veh.validityStartDate    as validityStartDate   ,
veh.validityEndDate  as validityEndDate ,
veh.corporateGroupCode   as corporateGroupCode  ,
veh.corporateGroupLabel  as corporateGroupLabel ,
veh.brandCode    as brandCode   ,
veh.brandLabel   as brandLabel  ,
veh.familyCode   as familyCode  ,
veh.familyLabel  as familyLabel ,
veh.generation   as generation  ,
veh.versionYear  as versionYear ,
veh.versionTrimester     as versionTrimester    ,
veh.segmentMarketingCode    as segmentMarketingCode   ,
veh.faceLiftGeneration   as faceLiftGeneration  ,
veh.kindCode     as kindCode    ,
veh.bodyCode     as bodyCode    ,
veh.height   as height  ,
veh.length   as length  ,
veh.sportinessFlag   as sportinessFlag  ,
veh.co2EmissionNEDC  as co2EmissionNEDC ,
veh.co2EmissionWLTP  as co2EmissionWLTP ,
veh.co2ClassCode     as co2ClassCode    ,
veh.fiscalHorsePower     as fiscalHorsePower    ,
veh.maximumPowerDin  as maximumPowerDin ,
veh.maximumPowerKW   as maximumPowerKW  ,
veh.energy1Code  as energy1Code ,
veh.energy1DetailCode    as energy1DetailCode   ,
veh.energy2Code  as energy2Code ,
veh.energy2DetailCode    as energy2DetailCode   ,
veh.energyCombCode   as energyCombCode  ,
veh.motorisation     as motorisation    ,
veh.motorisationComb     as motorisationComb    ,
veh.cubicCapacity    as cubicCapacity   ,
veh.transmissionTypeCode     as transmissionTypeCode    ,
veh.gearBoxTypeCode  as gearBoxTypeCode ,
veh.nbRapports   as nbRapports  ,
veh.typeVariantVersion   as typeVariantVersion  ,
veh.trimLevel    as trimLevel   ,
veh.seatNumber   as seatNumber  ,
veh.doorNumber   as doorNumber  ,
veh.nedcCombineFuelConsumption   as nedcCombineFuelConsumption  ,
veh.nedcExtraUrbanFuelConsumption    as nedcExtraUrbanFuelConsumption   ,
veh.nedcUrbanFuelConsumption     as nedcUrbanFuelConsumption    ,
veh.wltpLowFuelConsumption   as wltpLowFuelConsumption  ,
veh.wltpMediumFuelConsumption    as wltpMediumFuelConsumption   ,
veh.wltpHighFuelConsumption  as wltpHighFuelConsumption ,
veh.wltpExtraHighConsumption     as wltpExtraHighConsumption    ,
veh.wltpCombinedFuelConsumption  as wltpCombinedFuelConsumption ,
veh.wltpElectricConsumption  as wltpElectricConsumption ,
veh.wltpElectricRange    as wltpElectricRange   ,
veh.batteryCapacity  as batteryCapacity ,
veh.maxLadenWeight   as maxLadenWeight  ,
veh.kerbWeight   as kerbWeight  ,
veh.payLoad  as payLoad ,
veh.hasTelematicBox  as hasTelematicBox ,
veh.catalogueDetail  as catalogueDetail ,
veh.tsnNumber    as tsnNumber   ,
veh.wltpFlag     as wltpFlag    ,
veh.completenessFlag     as completenessFlag    ,
veh.validationUser   as validationUser  ,
veh.validationDate   as validationDate  ,
veh.updateUser   as updateUser  ,
veh.updateDate   as updateDate  ,
veh.purchaseCondition    as purchaseCondition   ,
veh.designBases  as designBases ,
veh.designCustomerShip   as designCustomerShip  ,
veh.versionLabelGlobalShort  as versionLabelGlobalShort ,
veh.versionLabeGlobalLong    as versionLabeGlobalLong   ,
veh.versionLabelLocalShort   as versionLabelLocalShort  ,
veh.versionLabelLocalLong    as versionLabelLocalLong   ,
veh.VEHICULE_TYPE as VEHICULE_TYPE,
veh.MODEL_GEN_ID as MODEL_GEN,
veh.DIMENSIONS_ID as DIMENSIONS,
veh.door_seat as door_seat,
veh.year_trimester as year_trimester,
veh.effectivefrom as effectivefrom,
veh.capcode as capcode,

------,
(case when   veh.brandcode is not null 
and veh.brandLabel is not null 
and veh.familyLabel is not null 
and veh.KINDCODE is not null 
and veh.bodyCode is not null 
and veh.TRIM_ID is not null 
and veh.energyCombCode is not null 
and veh.maximumPowerDin is not null 
and veh.transmissionTypeCode is not null 
and veh.gearBoxTypeCode is not null 
and veh.year_trimester is not null
and veh.DIMENSIONS_ID != '  '  then
veh.BRANDCODE || veh.MODEL_GEN_ID || veh.KINDCODE || veh.DIMENSIONS_ID || veh.door_seat || veh.TRIM_ID || veh.energyCombCode || veh.MOTORISATIONBLVD_ID || veh.year_trimester else null end) AS BLVD,
------,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
prices.EffectiveFrom as priceStartDate,
prices.EffectiveTo as priceEndDate,
NULL AS vatAmount,
prices.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
prices.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT,
-------,
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (44, 45, 73, 74, 75, 76, 81, 82, 86, 90, 97) then 'C' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate,

'en_GB' as option_language,
B.description as option_description,
B.longdescription as option_longdescription,

NULL as option_territorialityCode,
NULL as option_pricebookCode,
NULL as option_pricebookType,
NULL as option_pricebookTypeCustomer,
A.effectivefrom as option_pricebookStartDate,
A.effectiveto as option_pricebookEndDate,
NULL as  option_vatAmount,
'GBP' as option_currency,
A.basic as option_priceET,
NULL as  option_priceIT,
NULL as  option_priceIncludeVAT,
NULL as  option_basePriceWithChargesET,
NULL as  option_basePriceWithChargesIT,
NULL as  basePriceWithChargesIncludeVAT,
--------------------------------------------
AAA.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
BBB.description as label
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from (

select distinct

A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'UK' as countryCode,
concat(concat('P', A.Id), TO_CHAR(A.Introduced, 'YYYYMMDD')) as itemDirectoryVehicleRef , 
NULL as versionState   ,
A.Introduced as validityStartDate   ,
A.Discontinued as validityEndDate , 
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label  as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
(case when generation.valuestring is null  then ' ' else generation.valuestring  end)  as generation  , ----------------------- 471
substr(B.refe, 0,4)  as versionYear ,
( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) )*4+1 as versionTrimester    , --OK
segment.code segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(A.CAPCODE,20,1) is null then 'P' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   -- OK
body.code as bodyCode    ,
height.valuefloat as height  ,  ----------------------- 34
length.valuefloat as length  , ----------------------- 4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
co2EmissionWLTP.valuefloat as co2EmissionWLTP , ----------------------- 173
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
maximumPowerDin.valuefloat as maximumPowerDin , ----------------------- 21
maximumPowerKW.valuefloat  as maximumPowerKW  , ----------------------- 48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
cubicCapacity.valuefloat as cubicCapacity   , ----------------------- 20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
--( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , ----------------------- 66 
(case when nbRapports.valuestring not in ('AUTOMATIC','N') then ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )  else null end) as nbRapports  , ----------------------- 66 
NULL as typeVariantVersion  ,
CAPTRIM.Name   as trimLevel,  --select distinct Name from Cars_CapTrim where Cars_CapTrim.Code = Cars_CapDer.TrimCode  
seatNumber.valuefloat as seatNumber  , ----------------------- 47
A.doors as doorNumber  ,
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption.valuefloat  as wltpLowFuelConsumption  ,  ----------------------- 184
wltpMediumFuelConsumption.valuefloat  as wltpMediumFuelConsumption   , ----------------------- 185
wltpHighFuelConsumption.valuefloat  as wltpHighFuelConsumption , ----------------------- 186
wltpExtraHighConsumption.valuefloat  as wltpExtraHighConsumption    , -----------------------187
wltpCombinedFuelConsumption.valuefloat  as wltpCombinedFuelConsumption ,-----------------------188
wltpElectricConsumption.valuefloat  as wltpElectricConsumption ,-----------------------164
wltpElectricRange.valuefloat  as wltpElectricRange   ,-----------------------165
batteryCapacity.valuefloat  as batteryCapacity ,-----------------------163
maxLadenWeight.valuefloat  as maxLadenWeight  ,-----------------------14
kerbWeight.valuefloat  as kerbWeight  ,-----------------------3 
NULL as payLoad ,
(case when C.status = 'S' and C.genericcode =9 then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabeGlobalLong   ,
model.description_label as versionLabelLocalShort  ,
concat(model.description_label, A.name) as versionLabelLocalLong,
'VP' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester,
B.effectivefrom as effectivefrom,
A.Capcode as capcode


from MKTREF.MKTQT_CapDer_VP A,
     MKTREF.MKTQT_NVDModelYear_VP B,
     MKTREF.MKTQT_NVDGenericStatus_VP C,
     MKTREF.MKTQT_nomenclature brand,
     MKTREF.MKTQT_nomenclature model,
     MKTREF.MKTQT_nomenclature segment,
     MKTREF.MKTQT_nomenclature body,
     MKTREF.MKTQT_nomenclature energyComb,
     MKTREF.MKTQT_nomenclature transmission,
     MKTREF.MKTQT_nomenclature gearbox,
     MKTREF.MKTQT_nomenclature door_seat, --add
     MKTREF.MKTQT_nomenclature year_trimester, --add
     MKTREF.MKTQT_NVDTechnical_VP generation,
     MKTREF.MKTQT_NVDTechnical_VP height,
     MKTREF.MKTQT_NVDTechnical_VP length,
     MKTREF.MKTQT_NVDTechnical_VP co2EmissionWLTP,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerDin,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerKW,
     
     MKTQT_NVDTechnical_VP  cubicCapacity,-- MKTQT_NVDTechnical_VP nbRapports,
     MKTQT_NVDTechnical_VP seatNumber, 
    MKTQT_NVDTechnical_VP wltpLowFuelConsumption, MKTQT_NVDTechnical_VP wltpMediumFuelConsumption, MKTQT_NVDTechnical_VP wltpHighFuelConsumption,
    MKTQT_NVDTechnical_VP wltpExtraHighConsumption, MKTQT_NVDTechnical_VP wltpCombinedFuelConsumption ,MKTQT_NVDTechnical_VP wltpElectricConsumption,
    MKTQT_NVDTechnical_VP wltpElectricRange, -- MKTQT_NVDTechnical_VP batteryCapacity, --MKTQT_NVDTechnical_VP maxLadenWeight,
    MKTQT_NVDTechnical_VP kerbWeight,
     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTQT_CAPMAN_VP   CAPMAN,
     MKTQT_CAPRANGE_VP CAPRAN,
     MKTQT_NVDTechnical_VP generation,
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VP CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,
     --MKTQT_NVDTECHNICAL_VP maximumPowerDin,
     MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity,  -- add MOTORISATIONBLVD
     MKTREF.MKTQT_DIMENSIONS DIMENSIONS, -- add DIMENSIONS
     MKTQT_NVDTECHNICAL_VP height, MKTQT_NVDTECHNICAL_VP length,MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
where A.id = B.id 
and A.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
--and c.status(+) = 'S'            --- 
--and c.genericcode(+) = '9'        ---
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('C',A.MANCODE)
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('C',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('C',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission
and generation.id(+) = B.id
and generation.effectivefrom(+) = B.effectivefrom
and generation.techcode(+) = 471
and height.id(+) = B.id
and height.effectivefrom(+) = B.effectivefrom
and height.techcode (+) = 34
and length.id(+) = B.id
and length.effectivefrom(+) = B.effectivefrom
and length.techcode(+) = 4
and co2EmissionWLTP.id(+) = B.id
and co2EmissionWLTP.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP.techcode(+) = 173
and maximumPowerDin.id (+) = B.id
and maximumPowerDin.effectivefrom(+) = B.effectivefrom
and maximumPowerDin.techcode(+) = 21 
and maximumPowerKW.id(+) = B.id
and maximumPowerKW.effectivefrom(+) = B.effectivefrom
and maximumPowerKW.techcode(+) = 48

and  cubicCapacity.ID(+) = B.ID and cubicCapacity.effectivefrom(+) = B.effectivefrom and cubicCapacity.techcode(+) = 20
and  nbRapports.ID(+) = B.ID and nbRapports.effectivefrom(+) = B.effectivefrom and nbRapports.techcode(+) = 66
and  seatNumber.ID(+) = B.ID and seatNumber.effectivefrom(+) = B.effectivefrom and seatNumber.techcode(+) = 47
and  wltpLowFuelConsumption.ID(+) = B.ID and wltpLowFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpLowFuelConsumption.techcode(+) = 184
and  wltpMediumFuelConsumption.ID(+) = B.ID and wltpMediumFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpMediumFuelConsumption.techcode(+) = 185
and  wltpHighFuelConsumption.ID(+) = B.ID and wltpHighFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpHighFuelConsumption.techcode(+) = 186
and  wltpExtraHighConsumption.ID(+) = B.ID and wltpExtraHighConsumption.effectivefrom(+) = B.effectivefrom and wltpExtraHighConsumption.techcode(+) = 187
and  wltpCombinedFuelConsumption.ID(+) = B.ID and wltpCombinedFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpCombinedFuelConsumption.techcode(+) = 188
and  wltpElectricConsumption.ID(+) = B.ID and wltpElectricConsumption.effectivefrom(+) = B.effectivefrom and wltpElectricConsumption.techcode(+) = 164
and  wltpElectricRange.ID(+) = B.ID and wltpElectricRange.effectivefrom(+) = B.effectivefrom and wltpElectricRange.techcode(+) = 165
and  batteryCapacity.ID(+) = B.ID and batteryCapacity.effectivefrom(+) = B.effectivefrom and batteryCapacity.techcode(+) = 163
and  maxLadenWeight.ID(+) = B.ID and maxLadenWeight.effectivefrom(+) = B.effectivefrom and maxLadenWeight.techcode(+) = 14
and  kerbWeight.ID(+) = B.ID and kerbWeight.effectivefrom(+) = B.effectivefrom and kerbWeight.techcode(+) = 3

-- MODEL GEN
AND MG.BRAND_CODE  = brand.code
and MG.VEHICULE_NAME  = CAPMAN.NAME || '| ' || CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MG.VEHICULE_TYPE  = 'VP'
AND MG.CROSSREF_CODE  =  A.RANCODE || 'GEN' || generation.valuestring -- AJOUT VENDREDI
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE
    AND     generation.ID(+) = A.ID
    AND     generation.techcode(+) = 471

-- TRIM
AND TRIM.BRAND_CODE = brand.code
AND TRIM.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND TRIM.VEHICULE_TYPE  = 'VP'
AND TRIM.VEHICULE_TRIM  = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE  = concat('C', A.TrimCode)   -- AJOUT VENDREDI
    AND  CAPTRIM.CODE(+) =  A.TrimCode

-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MOTORISATIONBLVD.VEHICULE_TYPE  = 'VP'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  =  (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  (case when nbRapports.valuestring not in ('AUTOMATIC','N') then ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )  else null end)  || '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat)
    AND   maximumPowerDin.ID(+) = A.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
   -- AND   nbRapports.ID(+) = A.ID
   -- AND   nbRapports.TECHCODE(+) = 66
    --AND   batteryCapacity.ID(+) = A.ID
    --AND   batteryCapacity.TECHCODE(+) = 163 

-- DIMENSION
AND DIMENSIONS.BRAND_CODE = brand.code
AND DIMENSIONS.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND DIMENSIONS.VEHICULE_TYPE  = 'VP'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || height.valuefloat || ':' || length.valuefloat || ':' || ':' || maxLadenWeight.valuefloat)   ---  interne
    AND   height.ID(+) = A.ID
    AND   height.TECHCODE(+) = 34 
    AND   length.ID(+) = A.ID
    AND   length.TECHCODE(+) = 4    
  --  AND   maxLadenWeight.ID(+) = A.ID
   -- AND   maxLadenWeight.TECHCODE(+) = 14;
   
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+) ='CAP'
--and door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3')
and door_seat.crossref_code(+) = concat(concat(A.doors,'-'),seatNumber.valuefloat)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(substr(B.refe, 0,4)+ ( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) ), ',', '.' )

----------ajout vendredi 23 septembre pour extraction partielle
and brand.code in ('AB')
and B.effectivefrom > '01/01/2020'

) veh, MKTREF.MKTQT_NVDPrices_VP prices,
mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B, mktref.mktqt_NVDPackContents_VP C, MKTQT_NVDPackPeriods_VP D, 
MKTREF.MKTQT_NVDStandardEquipment_VP AAA, MKTREF.MKTQT_NVDDictionaryOption_VP BBB

where   veh.tech_id = prices.Id --and veh.VEHICULE_TYPE = 'VP'
and veh.validityStartDate <= prices.effectivefrom and (veh.validityEndDate >= prices.effectiveto or prices.effectiveto is null ) 

and veh.tech_id = A.id and veh.effectivefrom = A.effectivefrom --and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode (+) 
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)

and veh.tech_id = AAA.Id --and veh.VEHICULE_TYPE = 'VP'
and veh.effectivefrom = AAA.effectivefrom
and AAA.optioncode = BBB.optioncode  (+)

;

/*
select 
veh.tech_id  as tech_id ,
veh.tech_dateExtraction  as tech_dateExtraction ,
veh.tech_dateInsertion   as tech_dateInsertion  ,
veh.countryCode  as countryCode ,
veh.itemDirectoryVehicleRef  as itemDirectoryVehicleRef ,
veh.versionState     as versionState    ,
veh.validityStartDate    as validityStartDate   ,
veh.validityEndDate  as validityEndDate ,
veh.corporateGroupCode   as corporateGroupCode  ,
veh.corporateGroupLabel  as corporateGroupLabel ,
veh.brandCode    as brandCode   ,
veh.brandLabel   as brandLabel  ,
veh.familyCode   as familyCode  ,
veh.familyLabel  as familyLabel ,
veh.generation   as generation  ,
veh.versionYear  as versionYear ,
veh.versionTrimester     as versionTrimester    ,
veh.segmentMarketingCode    as segmentMarketingCode   ,
veh.faceLiftGeneration   as faceLiftGeneration  ,
veh.kindCode     as kindCode    ,
veh.bodyCode     as bodyCode    ,
veh.height   as height  ,
veh.length   as length  ,
veh.sportinessFlag   as sportinessFlag  ,
veh.co2EmissionNEDC  as co2EmissionNEDC ,
veh.co2EmissionWLTP  as co2EmissionWLTP ,
veh.co2ClassCode     as co2ClassCode    ,
veh.fiscalHorsePower     as fiscalHorsePower    ,
veh.maximumPowerDin  as maximumPowerDin ,
veh.maximumPowerKW   as maximumPowerKW  ,
veh.energy1Code  as energy1Code ,
veh.energy1DetailCode    as energy1DetailCode   ,
veh.energy2Code  as energy2Code ,
veh.energy2DetailCode    as energy2DetailCode   ,
veh.energyCombCode   as energyCombCode  ,
veh.motorisation     as motorisation    ,
veh.motorisationComb     as motorisationComb    ,
veh.cubicCapacity    as cubicCapacity   ,
veh.transmissionTypeCode     as transmissionTypeCode    ,
veh.gearBoxTypeCode  as gearBoxTypeCode ,
veh.nbRapports   as nbRapports  ,
veh.typeVariantVersion   as typeVariantVersion  ,
veh.trimLevel    as trimLevel   ,
veh.seatNumber   as seatNumber  ,
veh.doorNumber   as doorNumber  ,
veh.nedcCombineFuelConsumption   as nedcCombineFuelConsumption  ,
veh.nedcExtraUrbanFuelConsumption    as nedcExtraUrbanFuelConsumption   ,
veh.nedcUrbanFuelConsumption     as nedcUrbanFuelConsumption    ,
veh.wltpLowFuelConsumption   as wltpLowFuelConsumption  ,
veh.wltpMediumFuelConsumption    as wltpMediumFuelConsumption   ,
veh.wltpHighFuelConsumption  as wltpHighFuelConsumption ,
veh.wltpExtraHighConsumption     as wltpExtraHighConsumption    ,
veh.wltpCombinedFuelConsumption  as wltpCombinedFuelConsumption ,
veh.wltpElectricConsumption  as wltpElectricConsumption ,
veh.wltpElectricRange    as wltpElectricRange   ,
veh.batteryCapacity  as batteryCapacity ,
veh.maxLadenWeight   as maxLadenWeight  ,
veh.kerbWeight   as kerbWeight  ,
veh.payLoad  as payLoad ,
veh.hasTelematicBox  as hasTelematicBox ,
veh.catalogueDetail  as catalogueDetail ,
veh.tsnNumber    as tsnNumber   ,
veh.wltpFlag     as wltpFlag    ,
veh.completenessFlag     as completenessFlag    ,
veh.validationUser   as validationUser  ,
veh.validationDate   as validationDate  ,
veh.updateUser   as updateUser  ,
veh.updateDate   as updateDate  ,
veh.purchaseCondition    as purchaseCondition   ,
veh.designBases  as designBases ,
veh.designCustomerShip   as designCustomerShip  ,
veh.versionLabelGlobalShort  as versionLabelGlobalShort ,
veh.versionLabeGlobalLong    as versionLabeGlobalLong   ,
veh.versionLabelLocalShort   as versionLabelLocalShort  ,
veh.versionLabelLocalLong    as versionLabelLocalLong   ,
veh.VEHICULE_TYPE as VEHICULE_TYPE,
veh.MODEL_GEN as MODEL_GEN,
veh.DIMENSIONS as DIMENSIONS,
------,
crossRefs.capcode as capcode,
crossRefs.BLVD as BLVD,
------,
null as tariffAreaCode,
null as priceCode,
null as priceType,
null as priceTypeCustomer,
pricings.priceStartDate as priceStartDate,
pricings.priceEndDate as priceEndDate,
null as vatAmount,
pricings.priceET as priceET,
null as priceIT,
null as priceIncludeVAT,
pricings.currency as currency,
null as immAmount,
null as immRate,
null as novaAmount,
null as novaRate,
pricings.priceWithoutOtrCostIT as priceWithoutOtrCostIT,
null as priceWithoutOtrCostET,
null  as priceWithoutOtrCostIncludeVAT,
-------,
options.code as code,
NULL as constructorCode,
options.typeCode as typeCode,
options.isPack as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate,
--------------------------------------------
'en_GB' as language,
options.description as labelShort,
options.longdescription as labelLong,
------,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
options.EffectiveFrom as pricebookStartDate,
options.EffectiveTo as pricebookEndDate,
NULL as options_vatAmount,  -------add
'GBP' as options_currency,   --------add
options.Basic as options_priceET,  ------add
NULL as options_priceIT, ------add
NULL as options_priceIncludeVAT, ------add
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT,
--------------------------------------------------
------
baseEquipments.externalRef as externalRef,
NULL as typeCategoryCode,
baseEquipments.language as baseEquipments_language, ------add
baseEquipments.label as label


from mktqt_vehicle veh, MKTQT_vehicle_crossRefs crossRefs, MKTQT_vehicle_options options, MKTQT_vehicle_pricings pricings , MKTQT_vehicle_baseEquipments baseEquipments

where veh.itemDirectoryVehicleRef = crossRefs.itemDirectoryVehicleRef
and veh.versionYear=crossRefs.versionYear
and veh.versionTrimester=crossRefs.versionTrimester
and veh.generation=crossRefs.generation
and veh.DIMENSIONS =crossRefs.DIMENSIONS
and veh.MODEL_GEN=crossRefs.MODEL_GEN
and veh.VEHICULE_TYPE = crossRefs.VEHICULE_TYPE
--and veh.VEHICULE_TYPE='VP' and crossRefs.VEHICULE_TYPE='VP'
and veh.tech_id=crossRefs.tech_id

and veh.itemDirectoryVehicleRef = options.itemDirectoryVehicleRef
and veh.versionYear=options.versionYear
and veh.versionTrimester=options.versionTrimester
and veh.generation=options.generation
and veh.DIMENSIONS =options.DIMENSIONS
and veh.MODEL_GEN=options.MODEL_GEN
and veh.VEHICULE_TYPE = options.VEHICULE_TYPE
--and veh.VEHICULE_TYPE='VP' and options.VEHICULE_TYPE='VP'
and veh.tech_id=options.tech_id

and veh.itemDirectoryVehicleRef = pricings.itemDirectoryVehicleRef
and veh.versionYear=pricings.versionYear
and veh.versionTrimester=pricings.versionTrimester
and veh.generation=pricings.generation
and veh.DIMENSIONS =pricings.DIMENSIONS
and veh.MODEL_GEN=pricings.MODEL_GEN
and veh.VEHICULE_TYPE=pricings.VEHICULE_TYPE
---and veh.VEHICULE_TYPE='VP' and pricings.VEHICULE_TYPE='VP'
and veh.tech_id=pricings.tech_id

and veh.itemDirectoryVehicleRef = baseEquipments.itemDirectoryVehicleRef
and veh.versionYear=baseEquipments.versionYear
and veh.versionTrimester=baseEquipments.versionTrimester
and veh.generation=baseEquipments.generation
and veh.DIMENSIONS =baseEquipments.DIMENSIONS
and veh.MODEL_GEN=baseEquipments.MODEL_GEN
and veh.VEHICULE_TYPE=baseEquipments.VEHICULE_TYPE
--and veh.VEHICULE_TYPE='VP' and baseEquipments.VEHICULE_TYPE='VP'
and veh.tech_id=baseEquipments.tech_id

;




BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'EXPORT_PARTIE_JSON', ' ## EXPORT COLLECTION PARTIE JSON ' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS(p_path,file_name);


      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, V_LIGNE);
      
      FOR S_mktqt_vehicle IN C_mktqt_vehicle LOOP
      BEGIN
         
              V_LIGNE := '{
"tech_id":"' || S_mktqt_vehicle.tech_id || '", 
"tech_dateExtraction":"' || S_mktqt_vehicle.tech_dateExtraction || '", 
"tech_dateInsertion":"' || S_mktqt_vehicle.tech_dateInsertion || '", 
"countryCode":"' || S_mktqt_vehicle.countryCode || '", 
"itemDirectoryVehicleRef":"' || S_mktqt_vehicle.itemDirectoryVehicleRef || '", 
"versionState":"' || S_mktqt_vehicle.versionState || '", 
"validityStartDate":"' || S_mktqt_vehicle.validityStartDate || '", 
"validityEndDate":"' || S_mktqt_vehicle.validityEndDate || '", 
"corporateGroupCode":"' || S_mktqt_vehicle.corporateGroupCode || '", 
"corporateGroupLabel":"' || S_mktqt_vehicle.corporateGroupLabel || '", 
"brandCode":"' || S_mktqt_vehicle.brandCode || '", 
"brandLabel":"' || S_mktqt_vehicle.brandLabel || '", 
"familyCode":"' || S_mktqt_vehicle.familyCode || '", 
"familyLabel":"' || S_mktqt_vehicle.familyLabel || '", 
"generation":"' || S_mktqt_vehicle.generation || '", 
"versionYear":"' || S_mktqt_vehicle.versionYear || '", 
"versionTrimester":"' || S_mktqt_vehicle.versionTrimester || '", 
"segmentMarketingCode":"' || S_mktqt_vehicle.segmentMarketingCode || '", 
"faceLiftGeneration":"' || S_mktqt_vehicle.faceLiftGeneration || '", 
"kindCode":"' || S_mktqt_vehicle.kindCode || '", 
"bodyCode":"' || S_mktqt_vehicle.bodyCode || '", 
"height":"' || S_mktqt_vehicle.height || '", 
"length":"' || S_mktqt_vehicle.length || '", 
"sportinessFlag":"' || S_mktqt_vehicle.sportinessFlag || '", 
"co2EmissionNEDC":"' || S_mktqt_vehicle.co2EmissionNEDC || '", 
"co2EmissionWLTP":"' || S_mktqt_vehicle.co2EmissionWLTP || '", 
"co2ClassCode":"' || S_mktqt_vehicle.co2ClassCode || '", 
"fiscalHorsePower":"' || S_mktqt_vehicle.fiscalHorsePower || '", 
"maximumPowerDin":"' || S_mktqt_vehicle.maximumPowerDin || '", 
"maximumPowerKW":"' || S_mktqt_vehicle.maximumPowerKW || '", 
"energy1Code":"' || S_mktqt_vehicle.energy1Code || '", 
"energy1DetailCode":"' || S_mktqt_vehicle.energy1DetailCode || '", 
"energy2Code":"' || S_mktqt_vehicle.energy2Code || '", 
"energy2DetailCode":"' || S_mktqt_vehicle.energy2DetailCode || '", 
"energyCombCode":"' || S_mktqt_vehicle.energyCombCode || '", 
"motorisation":"' || S_mktqt_vehicle.motorisation || '", 
"motorisationComb":"' || S_mktqt_vehicle.motorisationComb || '", 
"cubicCapacity":"' || S_mktqt_vehicle.cubicCapacity || '", 
"transmissionTypeCode":"' || S_mktqt_vehicle.transmissionTypeCode || '", 
"gearBoxTypeCode":"' || S_mktqt_vehicle.gearBoxTypeCode || '", 
"nbRapports":"' || S_mktqt_vehicle.nbRapports || '", 
"typeVariantVersion":"' || S_mktqt_vehicle.typeVariantVersion || '", 
"trimLevel":"' || S_mktqt_vehicle.trimLevel || '", 
"seatNumber":"' || S_mktqt_vehicle.seatNumber || '", 
"doorNumber":"' || S_mktqt_vehicle.doorNumber || '", 
"nedcCombineFuelConsumption":"' || S_mktqt_vehicle.nedcCombineFuelConsumption || '", 
"nedcExtraUrbanFuelConsumption":"' || S_mktqt_vehicle.nedcExtraUrbanFuelConsumption || '", 
"nedcUrbanFuelConsumption":"' || S_mktqt_vehicle.nedcUrbanFuelConsumption || '", 
"wltpLowFuelConsumption":"' || S_mktqt_vehicle.wltpLowFuelConsumption || '", 
"wltpMediumFuelConsumption":"' || S_mktqt_vehicle.wltpMediumFuelConsumption || '", 
"wltpHighFuelConsumption":"' || S_mktqt_vehicle.wltpHighFuelConsumption || '", 
"wltpExtraHighConsumption":"' || S_mktqt_vehicle.wltpExtraHighConsumption || '", 
"wltpCombinedFuelConsumption":"' || S_mktqt_vehicle.wltpCombinedFuelConsumption || '", 
"wltpElectricConsumption":"' || S_mktqt_vehicle.wltpElectricConsumption || '", 
"wltpElectricRange":"' || S_mktqt_vehicle.wltpElectricRange || '", 
"batteryCapacity":"' || S_mktqt_vehicle.batteryCapacity || '", 
"maxLadenWeight":"' || S_mktqt_vehicle.maxLadenWeight || '", 
"kerbWeight":"' || S_mktqt_vehicle.kerbWeight || '", 
"payLoad":"' || S_mktqt_vehicle.payLoad || '", 
"hasTelematicBox":"' || S_mktqt_vehicle.hasTelematicBox || '", 
"catalogueDetail":"' || S_mktqt_vehicle.catalogueDetail || '", 
"tsnNumber":"' || S_mktqt_vehicle.tsnNumber || '", 
"wltpFlag":"' || S_mktqt_vehicle.wltpFlag || '", 
"completenessFlag":"' || S_mktqt_vehicle.completenessFlag || '", 
"validationUser":"' || S_mktqt_vehicle.validationUser || '", 
"validationDate":"' || S_mktqt_vehicle.validationDate || '", 
"updateUser":"' || S_mktqt_vehicle.updateUser || '", 
"updateDate":"' || S_mktqt_vehicle.updateDate || '", 
"purchaseCondition":"' || S_mktqt_vehicle.purchaseCondition || '", 
"designBases":"' || S_mktqt_vehicle.designBases || '", 
"designCustomerShip":"' || S_mktqt_vehicle.designCustomerShip || '", 
"versionLabelGlobalShort":"' || S_mktqt_vehicle.versionLabelGlobalShort || '", 
"versionLabeGlobalLong":"' || S_mktqt_vehicle.versionLabeGlobalLong || '", 
"versionLabelLocalShort":"' || S_mktqt_vehicle.versionLabelLocalShort || '", 
"versionLabelLocalLong":"' || S_mktqt_vehicle.versionLabelLocalLong  || '", 
"MODEL_GEN":"' || S_mktqt_vehicle.MODEL_GEN || '", 
"DIMENSIONS":"' || S_mktqt_vehicle.DIMENSIONS  || '",
"crossRefs":
{
"capcode":"' || S_mktqt_vehicle.capcode  || '",
"BLVD":"' || S_mktqt_vehicle.BLVD  || '"
},
"pricings":
[{
"tariffAreaCode":"' || S_mktqt_vehicle.tariffAreaCode || '",
"priceCode":"' || S_mktqt_vehicle.priceCode || '",
"priceType":"' || S_mktqt_vehicle.priceType || '",
"priceTypeCustomer":"' || S_mktqt_vehicle.priceTypeCustomer || '",
"priceStartDate":"' || S_mktqt_vehicle.priceStartDate || '",
"priceEndDate":"' || S_mktqt_vehicle.priceEndDate || '",
"vatAmount":"' || S_mktqt_vehicle.vatAmount || '",
"priceET":"' || S_mktqt_vehicle.priceET || '",
"priceIT":"' || S_mktqt_vehicle.priceIT || '",
"priceIncludeVAT":"' || S_mktqt_vehicle.priceIncludeVAT || '",
"currency":"' || S_mktqt_vehicle.currency || '",
"immAmount":"' || S_mktqt_vehicle.immAmount || '",
"immRate":"' || S_mktqt_vehicle.immRate || '",
"novaAmount":"' || S_mktqt_vehicle.novaAmount || '",
"novaRate":"' || S_mktqt_vehicle.novaRate || '",
"priceWithoutOtrCostIT":"' || S_mktqt_vehicle.priceWithoutOtrCostIT || '",
"priceWithoutOtrCostET":"' || S_mktqt_vehicle.priceWithoutOtrCostET || '",
"priceWithoutOtrCostIncludeVAT":"' || S_mktqt_vehicle.priceWithoutOtrCostIncludeVAT || '",
"taxes":
{
"typeCode":"' || ' ' || '",
"amount":"' || ' ' || '",
"rate":"' || ' ' || '"
},
"otrCosts":
{
"typeCode":"' || ' ' || '",
"amountET":"' || ' ' || '",
"amountIT":"' || ' ' || '",
"amountIncludeVAT":"' || ' ' || '",
"vatAmount":"' || ' ' || '"
}
}],
"options":
[{
"code":"' || S_mktqt_vehicle.code || '",
"constructorCode":"' || S_mktqt_vehicle.constructorCode || '",
"typeCode":"' || S_mktqt_vehicle.typeCode || '",
"isPack":"' || S_mktqt_vehicle.isPack || '",
"isAgregated":"' || S_mktqt_vehicle.isAgregated || '",
"startDate":"' || S_mktqt_vehicle.startDate || '",
"endDate":"' || S_mktqt_vehicle.endDate || '",
"labels":
{
"language":"' || S_mktqt_vehicle.option_language || '",
"labelShort":"' || S_mktqt_vehicle.option_description || '",
"labelLong":"' || S_mktqt_vehicle.option_longdescription || '"
},
"pricings":
{
"territorialityCode":"' || S_mktqt_vehicle.option_territorialityCode || '",
"pricebookCode":"' || S_mktqt_vehicle.option_pricebookCode || '",
"pricebookType":"' || S_mktqt_vehicle.option_pricebookType || '",
"pricebookTypeCustomer":"' || S_mktqt_vehicle.option_pricebookTypeCustomer || '",
"pricebookStartDate":"' || S_mktqt_vehicle.option_pricebookStartDate || '",
"pricebookEndDate":"' || S_mktqt_vehicle.option_pricebookEndDate || '",
"vatAmount":"' || S_mktqt_vehicle.option_vatAmount || '",
"currency":"' || S_mktqt_vehicle.option_currency || '",
"priceET":"' || S_mktqt_vehicle.option_priceET || '",
"priceIT":"' || S_mktqt_vehicle.option_priceIT || '",
"priceIncludeVAT":"' || S_mktqt_vehicle.option_priceIncludeVAT || '",
"basePriceWithChargesET":"' || S_mktqt_vehicle.option_basePriceWithChargesET || '",
"basePriceWithChargesIT":"' || S_mktqt_vehicle.option_basePriceWithChargesIT || '",
"basePriceWithChargesIncludeVAT":"' || S_mktqt_vehicle.basePriceWithChargesIncludeVAT || '"
},
"addeds":
{
"optionAddedRef":"' || ' ' || '"
},
"rejecteds":
{
"optionRejectedRef":"' || ' ' || '"
},
"includeds":
{
"optionIncludedRef":"' || ' ' || '"
}
}],
"aggregatedOptions":
[{
"code":"' || ' ' || '",
"categoryCode":"' || ' ' || '",
"currency":"' || ' ' || '",
"priceET":"' || ' ' || '",
"priceIT":"' || ' ' || '",
"priceIncludeVAT":"' || ' ' || '",
"vatAmount":"' || ' ' || '",
"labels":
{
"language":"' || ' ' || '",
"label":"' || ' ' || '"
},
"components":
{
"aggregatedCode":"' || ' ' || '"
}
}],
"baseEquipments":
{
"externalRef":"' || S_mktqt_vehicle.externalRef || '",
"typeCategoryCode":"' || S_mktqt_vehicle.typeCategoryCode || '",
"language":"' || S_mktqt_vehicle.language || '",
"label":"' || S_mktqt_vehicle.label || '"
}
}';

               res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, V_LIGNE);
               N_SAUV := N_SAUV +1;
           
       EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                 RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_mktqt_vehicle.itemDirectoryVehicleRef);
       --RETURN V_ERR;
       RETURN V_ERR;
  END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'FONC_EXPORT_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END FONC_EXPORT_JSON;


*/




FUNCTION FONC_EXPORT_TRANSCO_JSON (NOMLOG varchar2,P_DATE_TRAI date, P_PATH VARCHAR2, P_FILENAME VARCHAR2) return number IS
    V_ERR       number:=0;
    N_SAUV      NUMBER := 0;
    FILE_ID     UTL_FILE.FILE_TYPE;
    FILE_ID_CVS UTL_FILE.FILE_TYPE;
    V_LIGNE     VARCHAR2(4000);
    RES         NUMBER := 0;
    file_name   VARCHAR2(30);
   -- V_NB_ENREG  NUMBER(10) := 0;
   -- V_NB_ENREG_TRAITE NUMBER(10) := 0;
   -- V_NB_ADDRESS      NUMBER(3) := 0;
   -- V_NB_PHONE      NUMBER(3) := 0;
    --V_NB_MAIL      NUMBER(3) := 0;
    --V_NB_BANKING      NUMBER(3) := 0;

CURSOR C_MKTQT_nomenclature IS

select 
Entity as Entity,
code as code,
startValidityDate as startValidityDate,
endValidityDate as endValidityDate,
parent as parent,
parent_details_entity as parent_details_entity,
parent_details_code as parent_details_code,
description_language as description_language,		
description_label as description_label,
crossref_typecode as crossref_typecode,
crossref_country	 as crossref_country,
crossref_code		 as crossref_code,
translation_language as translation_language,
translation_label as translation_label,
bomAttribut as bomAttribut,
countryScope as countryScope
from MKTREF.MKTQT_nomenclature
;




BEGIN
  file_name := p_filename;
  FILE_ID := MKT.MKTQAUT.F_OPEN(NOMLOG);
  RES := MKT.MKTQAUT.F_WRITE(FILE_ID, 'FONC_EXPORT_TRANSCO_JSON', ' ## EXPORT COLLECTION PARTIE JSON ' ||  ' ##');
  file_id_cvs:= MKT.MKTQAUT.F_OPEN_CVS_UTF8(p_path,file_name);


      V_LIGNE := '[';
      res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
      
      FOR S_MKTQT_nomenclature IN C_MKTQT_nomenclature LOOP
      BEGIN
         
              V_LIGNE := '{
"entity":"' || S_MKTQT_nomenclature.entity || '",
"code":"' || S_MKTQT_nomenclature.code || '",
"startValidityDate":"' || S_MKTQT_nomenclature.startValidityDate || '",
"endValidityDate":"' || S_MKTQT_nomenclature.endValidityDate || '",
"countryScope":"' || S_MKTQT_nomenclature.countryScope || '",
"parent":"' || S_MKTQT_nomenclature.parent || '",
"descriptions":
[{
"language":"' || S_MKTQT_nomenclature.description_language || '",
"label":"' || S_MKTQT_nomenclature.description_label || '"
}],
"crossrefs":
[{
"typeCode":"' || S_MKTQT_nomenclature.crossref_typecode || '",
"code":"' || S_MKTQT_nomenclature.crossref_code || '"
}],
"translations":
[{
"language":"' || S_MKTQT_nomenclature.translation_language || '",
"label":"' || S_MKTQT_nomenclature.translation_label || '"
}]
}';

               res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
               N_SAUV := N_SAUV +1;
           
       EXCEPTION WHEN OTHERS THEN COMMIT;
                V_ERR  := 1;
                 RES   := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_TRANSCO_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM || S_MKTQT_nomenclature.entity);
       --RETURN V_ERR;
       RETURN V_ERR;
  END;
  END LOOP;
   V_LIGNE := ']';
   res := MKT.MKTQAUT.F_WRITE_CVS_UTF8(file_id_cvs, V_LIGNE);
   UTL_FILE.FCLOSE(file_id_cvs);
  res := MKT.MKTQAUT.F_WRITE(file_id,
                               'FONC_EXPORT_TRANSCO_JSON',
                               'Nombre de sauvegarde :' || N_SAUV);
    res := MKT.MKTQAUT.F_WRITE(file_id, '', '');
    UTL_FILE.FCLOSE(file_id);

  --RETURN V_ERR;
  RETURN V_ERR;
EXCEPTION WHEN OTHERS THEN COMMIT;
          V_ERR  := 1;
          RES     := MKT.MKTQAUT.F_WRITE(FILE_ID,'FONC_EXPORT_TRANSCO_JSON ','MESSAGE ERREUR PL/SQL : ' ||SQLERRM);
          --RETURN V_ERR;
          RETURN V_ERR;
END FONC_EXPORT_TRANSCO_JSON;
























  function int_to_seq2(n in integer ) return varchar2    as
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      if n > 1295 then return '  ';   end if;  
      quotient := n;
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      quotient := floor(quotient/len);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
    function int_to_seq3(n in integer, NOMLOG      VARCHAR2) return varchar2    as
       FILE_ID UTL_FILE.FILE_TYPE;
       RES     NUMBER := 0;
       ret       varchar2(30);
       quotient  integer;
       digit     char(1);
       chars varchar2(100) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
       chars2 varchar2(100) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ ';
       len int := length(chars);
       len2 int := length(chars2);
    begin
      File_Id := mkt.mktqaut.F_Open(Nomlog);
      quotient := n;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','quotient : ' || quotient);
      ret := substr(chars,mod(quotient,len)+1,1) || ret;
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','mod(quotient,len) : ' || mod(quotient,len));
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','ret : ' || ret);
      quotient := floor(quotient/len);
      RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','quotient : ' || quotient);
      len := length(chars2)+1;
      while quotient > 0
      loop
          ret := substr(chars2,mod(quotient,len2),1) || ret;
          quotient := floor(quotient/len2);
      end loop ;
      return lpad(ret, 2, '0');
   end ;
   
   
   
  FUNCTION ALIM_MODEL_GEN (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct brand.code as brandCode   ,
                    CAPMAN.NAME || '| ' || CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
                    'VP' AS VEHICULE_TYPE,
                    CAPDER.RANCODE || 'GEN' || generation.valuestring AS crossref_code    ---- AJOUT VENDREDI 
     
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE);


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
                     CAPMAN.NAME || '| ' || CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME, 
                     'VU' AS VEHICULE_TYPE,
                     CAPDER.RANCODE || 'GEN' || generation.valuestring AS crossref_code    ---- AJOUT VENDREDI 
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE);



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','## Alimentation de la table MKTREF.MKTQT_MODEL_GEN ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(model_gen_num), 0) into V_NUM
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VP.brandCode;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
                        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VP.CROSSREF_CODE     -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set     model_gen_num =   NVL(V_NUM_2, V_NUM),
                MODEL_GEN_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        AND    CROSSREF_CODE  = REC_vehicle_VP.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT model_gen_num into V_NUM_2
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(model_gen_num), 0) into V_NUM
         from   MKTREF.MKTQT_MODEL_GEN
         where  BRAND_CODE = REC_vehicle_VU.brandCode;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
               
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MODEL_GEN
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                model_gen_num,
                MODEL_GEN_ID,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VU.CROSSREF_CODE     -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MODEL_GEN
        Set    model_gen_num =   NVL(V_NUM_2, V_NUM) ,
                MODEL_GEN_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE
        AND    CROSSREF_CODE  = REC_vehicle_VU.CROSSREF_CODE     -- AJOUT VENDREDI 
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MODEL_GEN;
  
  
  
  
  
  
  
  
  ----TRIM
  
  
  FUNCTION ALIM_TRIM (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('C', CAPDER.TrimCode) as crossref_code  -- AJOUT VENDREDI
     
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_CapTrim_VP CAPTRIM -- add trim
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and    CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VP where Code = CAPDER.TrimCode

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end) as VEHICULE_TRIM ,  -- car VEHICULE_TRIM est clé primaire et CAPTRIM.NAME peut être null
            concat('L', CAPDER.TrimCode) as crossref_code  -- AJOUT VENDREDI
     
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_CapTrim_VU CAPTRIM    -- add trim
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     and     CAPTRIM.CODE(+) =  CAPDER.TrimCode;  ---mapping trim name  MKTQT_CapTrim_VU where Code = CAPDER.TrimCode



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','## Alimentation de la table MKTREF.MKTQT_TRIM ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_TRIM =  REC_vehicle_VP.VEHICULE_TRIM   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
                      
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM, ---
                trim_num, 
                TRIM_ID ,  ---
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_TRIM, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VP.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set     trim_num =   NVL(V_NUM_2, V_NUM),
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_TRIM = REC_vehicle_VP.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_vehicle_VP.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT trim_num into V_NUM_2
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and       VEHICULE_TRIM =  REC_vehicle_VU.VEHICULE_TRIM   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(trim_num), 0) into V_NUM
         from   MKTREF.MKTQT_TRIM
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;       

           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;           
        END IF;
        
        INSERT INTO MKTREF.MKTQT_TRIM
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_TRIM,
                trim_num,
                TRIM_ID  ,
                CROSSREF_CODE   -- AJOUT VENDREDI
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_TRIM  ,
NVL(V_NUM_2, V_NUM),
V_SEQ,
REC_vehicle_VU.CROSSREF_CODE   -- AJOUT VENDREDI
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_TRIM
        Set    trim_num =   NVL(V_NUM_2, V_NUM) ,
                TRIM_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_TRIM = REC_vehicle_VU.VEHICULE_TRIM  -- add
        AND  CROSSREF_CODE = REC_vehicle_VU.CROSSREF_CODE   -- AJOUT VENDREDI
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_TRIM','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_TRIM','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_TRIM;
  
  
  
  
  
  
  
  
  ----MOTORISATIONBLVD
  
  
  FUNCTION ALIM_MOTORISATIONBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (maximumPowerDin.valuefloat  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  (case when nbRapports.valuestring not in ('AUTOMATIC','N') then ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )  else null end)  || '/' || batteryCapacity.valuefloat) as VEHICULE_MOTORISATIONBLVD 
            --(maximumPowerDin.valuefloat  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat) as VEHICULE_MOTORISATIONBLVD
 
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTQT_NVDTECHNICAL_VP maximumPowerDin, MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity  -- add MOTORISATIONBLVD
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
        
    AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 163 ;
     
    

    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (maximumPowerDin.valuefloat  || '/' || CAPDER.Transmission || '/' || CAPDER.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat) as VEHICULE_MOTORISATIONBLVD
     
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTQT_NVDTECHNICAL_VU maximumPowerDin, MKTQT_NVDTECHNICAL_VU nbRapports, MKTQT_NVDTECHNICAL_VU batteryCapacity  -- add MOTORISATIONBLVD
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     
    AND   maximumPowerDin.ID(+) = CAPDER.ID
    AND   maximumPowerDin.TECHCODE(+) = 21
    AND   nbRapports.ID(+) = CAPDER.ID
    AND   nbRapports.TECHCODE(+) = 66
    AND   batteryCapacity.ID(+) = CAPDER.ID
    AND   batteryCapacity.TECHCODE(+) = 152;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','## Alimentation de la table MKTREF.MKTQT_MOTORISATIONBLVD ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_MOTORISATIONBLVD =  REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;         
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD, ---
                MOTORISATIONBLVD_num, 
                MOTORISATIONBLVD_ID   ---
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set     MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM),
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_MOTORISATIONBLVD = REC_vehicle_VP.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT MOTORISATIONBLVD_num into V_NUM_2
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and       VEHICULE_MOTORISATIONBLVD =  REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(MOTORISATIONBLVD_num), 0) into V_NUM
         from   MKTREF.MKTQT_MOTORISATIONBLVD
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;       
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_MOTORISATIONBLVD
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_MOTORISATIONBLVD,
                MOTORISATIONBLVD_num,
                MOTORISATIONBLVD_ID  
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_MOTORISATIONBLVD
        Set    MOTORISATIONBLVD_num =   NVL(V_NUM_2, V_NUM) ,
                MOTORISATIONBLVD_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_MOTORISATIONBLVD = REC_vehicle_VU.VEHICULE_MOTORISATIONBLVD  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_MOTORISATIONBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_MOTORISATIONBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_MOTORISATIONBLVD;
  
  
  
  
  
  
  
  
  ----DIMENSIONS
  
  
  FUNCTION ALIM_DIMENSIONS (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  V_NUM   NUMBER(10);
  V_NUM_2 NUMBER(10);
  V_SEQ   VARCHAR2(2);
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
     select distinct  brand.code as brandCode,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VP' AS VEHICULE_TYPE,
            (body.code || ':' || height.valuefloat || ':' || length.valuefloat || ':' || ':' || maxLadenWeight.valuefloat)   as  VEHICULE_DIMENSIONS --mercredi
            --(substr(CAPDER.capcode,11,1) || height.valuefloat || length.valuefloat || maxLadenWeight.valuefloat  ) as  VEHICULE_DIMENSIONS -- avant
 
     from    MKTREF.MKTQT_CapDer_VP CAPDER,
             MKTQT_CAPMAN_VP   CAPMAN,
             MKTQT_CAPRANGE_VP CAPRAN,
             MKTQT_NVDTechnical_VP generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_nomenclature body , --mercredi
             MKTQT_NVDTECHNICAL_VP height, MKTQT_NVDTECHNICAL_VP length,MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 471
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('C',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'C' || substr(CAPDER.capcode,11,1)   --mercredi
          
    AND   height.ID(+) = CAPDER.ID
    AND   height.TECHCODE(+) = 34 
    AND   length.ID(+) = CAPDER.ID
    AND   length.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14;
     


    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is
     select distinct brand.code as brandCode   ,
            CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring AS VEHICULE_NAME,
            'VU' AS VEHICULE_TYPE,
            (body.code || ':' || height.valuefloat || ':' || length.valuefloat  || ':' ||  payLoad.valuefloat || ':' || maxLadenWeight.valuefloat) as  VEHICULE_DIMENSIONS  --mercredi
            --(substr(CAPDER.capcode,11,1) || height.valuefloat || length.valuefloat  ||  payLoad.valuefloat || maxLadenWeight.valuefloat) as  VEHICULE_DIMENSIONS --avant     
            
     from    MKTREF.MKTQT_CapDer_VU CAPDER,
             MKTQT_CAPMAN_VU   CAPMAN,
             MKTQT_CAPRANGE_VU CAPRAN,
             MKTQT_NVDTechnical_VU generation,
             MKTREF.MKTQT_nomenclature brand,
             MKTREF.MKTQT_nomenclature body , --mercredi 
            MKTQT_NVDTECHNICAL_VU height, MKTQT_NVDTECHNICAL_VU length,MKTQT_NVDTECHNICAL_VU  maxLadenWeight, MKTQT_NVDTECHNICAL_VU payLoad
             
     where   CAPDER.MANCODE = CAPMAN.CODE
     AND     CAPDER.RANCODE = CAPRAN.CODE
     AND     generation.ID(+) = CAPDER.ID
     AND     generation.techcode(+) = 477
     and     brand.Entity(+) = 'brand'
     and     brand.crossref_code(+) = concat('L',CAPDER.MANCODE)
     
     and     body.entity (+) = 'body'    --mercredi
     and     body.crossref_code(+) = 'L' || substr(CAPDER.capcode,11,1)   --mercredi     
     
    AND   height.ID(+) = CAPDER.ID
    AND   height.TECHCODE(+) = 34 
    AND   length.ID(+) = CAPDER.ID
    AND   length.TECHCODE(+) = 4    
    AND   maxLadenWeight.ID(+) = CAPDER.ID
    AND   maxLadenWeight.TECHCODE(+) = 14 
    AND   payLoad.ID(+) = CAPDER.ID
    AND   payLoad.TECHCODE(+) = 32 ;






 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','## Alimentation de la table MKTREF.MKTQT_DIMENSIONS ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;
        

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE
         and    VEHICULE_DIMENSIONS =  REC_vehicle_VP.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
           BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VP.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VP.VEHICULE_NAME  --add
         and    VEHICULE_TYPE = REC_vehicle_VP.VEHICULE_TYPE  --add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;    
        
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;
           
        END IF ;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS, ---
                DIMENSIONS_num, 
                DIMENSIONS_ID   ---
              )
        VALUES
              (  
REC_vehicle_VP.brandCode ,
REC_vehicle_VP.VEHICULE_NAME ,
REC_vehicle_VP.VEHICULE_TYPE  ,
REC_vehicle_VP.VEHICULE_DIMENSIONS, -- 
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set     DIMENSIONS_num =   NVL(V_NUM_2, V_NUM),
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VP.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VP.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VP.VEHICULE_TYPE 
        and  VEHICULE_DIMENSIONS = REC_vehicle_VP.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
    FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        BEGIN 
         SELECT DIMENSIONS_num into V_NUM_2
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE
         and       VEHICULE_DIMENSIONS =  REC_vehicle_VU.VEHICULE_DIMENSIONS   -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM_2 := NULL;
        END;
        
        IF V_NUM_2 is not null then 
          V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM_2);
        else 
          BEGIN 
         SELECT NVL(max(DIMENSIONS_num), 0) into V_NUM
         from   MKTREF.MKTQT_DIMENSIONS
         where  BRAND_CODE = REC_vehicle_VU.brandCode
         AND    VEHICULE_NAME = REC_vehicle_VU.VEHICULE_NAME  -- add
         and    VEHICULE_TYPE = REC_vehicle_VU.VEHICULE_TYPE  -- add
         ;
        EXCEPTION WHEN OTHERS THEN
         V_NUM := 0;
        END;
               
           V_SEQ := MKTREF.MKTQA_CAP_UK_TEST_BIS.int_to_seq2 (V_NUM);
           V_NUM := V_NUM +1;            
           
        END IF;
        
        INSERT INTO MKTREF.MKTQT_DIMENSIONS
              (  
                BRAND_CODE,
                VEHICULE_NAME,
                VEHICULE_TYPE,
                VEHICULE_DIMENSIONS,
                DIMENSIONS_num,
                DIMENSIONS_ID  
              )
        VALUES
              (  
REC_vehicle_VU.brandCode ,
REC_vehicle_VU.VEHICULE_NAME ,
REC_vehicle_VU.VEHICULE_TYPE  ,
REC_vehicle_VU.VEHICULE_DIMENSIONS  ,
NVL(V_NUM_2, V_NUM),
V_SEQ
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_DIMENSIONS
        Set    DIMENSIONS_num =   NVL(V_NUM_2, V_NUM) ,
                DIMENSIONS_ID = V_SEQ
        where  BRAND_CODE          =   REC_vehicle_VU.brandCode
        and    VEHICULE_NAME  = REC_vehicle_VU.VEHICULE_NAME
        and    VEHICULE_TYPE  = REC_vehicle_VU.VEHICULE_TYPE 
        and    VEHICULE_DIMENSIONS = REC_vehicle_VU.VEHICULE_DIMENSIONS  -- add
        ;

        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_DIMENSIONS','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_DIMENSIONS','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_DIMENSIONS;
  
  
  
  
  
  
  
  FUNCTION ALIM_vehicle (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
  
        
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


 Cursor C_vehicle_VP Is
 
     select distinct

A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'UK' as countryCode,
concat(concat('P', A.Id), TO_CHAR(B.effectivefrom, 'YYYYMMDD')) as itemDirectoryVehicleRef , 
NULL as versionState   ,
B.effectivefrom as validityStartDate   ,
B.effectiveto as validityEndDate , 
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label  as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
(case when generation.valuestring is null  then ' ' else generation.valuestring  end)  as generation  , ----------------------- 471
substr(B.refe, 0,4)  as versionYear ,
( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) )*4+1 as versionTrimester    , --OK
segment.code segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(A.CAPCODE,20,1) is null then 'P' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   -- OK
body.code as bodyCode    ,
height.valuefloat as height  ,  ----------------------- 34
length.valuefloat as length  , ----------------------- 4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
co2EmissionWLTP.valuefloat as co2EmissionWLTP , ----------------------- 173
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
maximumPowerDin.valuefloat as maximumPowerDin , ----------------------- 21
maximumPowerKW.valuefloat  as maximumPowerKW  , ----------------------- 48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
cubicCapacity.valuefloat as cubicCapacity   , ----------------------- 20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
--( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , ----------------------- 66 
(case when nbRapports.valuestring not in ('AUTOMATIC','N') then ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )  else null end) as nbRapports  , ----------------------- 66 
NULL as typeVariantVersion  ,
CAPTRIM.Name   as trimLevel,  --select distinct Name from Cars_CapTrim where Cars_CapTrim.Code = Cars_CapDer.TrimCode  
seatNumber.valuefloat as seatNumber  , ----------------------- 47
A.doors as doorNumber  ,
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption.valuefloat  as wltpLowFuelConsumption  ,  ----------------------- 184
wltpMediumFuelConsumption.valuefloat  as wltpMediumFuelConsumption   , ----------------------- 185
wltpHighFuelConsumption.valuefloat  as wltpHighFuelConsumption , ----------------------- 186
wltpExtraHighConsumption.valuefloat  as wltpExtraHighConsumption    , -----------------------187
wltpCombinedFuelConsumption.valuefloat  as wltpCombinedFuelConsumption ,-----------------------188
wltpElectricConsumption.valuefloat  as wltpElectricConsumption ,-----------------------164
wltpElectricRange.valuefloat  as wltpElectricRange   ,-----------------------165
batteryCapacity.valuefloat  as batteryCapacity ,-----------------------163
maxLadenWeight.valuefloat  as maxLadenWeight  ,-----------------------14
kerbWeight.valuefloat  as kerbWeight  ,-----------------------3 
NULL as payLoad ,
(case when C.status = 'S' and C.genericcode =9 then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabeGlobalLong   ,
model.description_label as versionLabelLocalShort  ,
concat(model.description_label, A.name) as versionLabelLocalLong,
'VP' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('0-1','0-2','2-1','2-2','2-4','3-2','3-4','3-5','4-4','4-5','5-2','5-4','5-5','5-7','5-8','5-9','4-3','2-3') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester
--B.effectivefrom as effectivefrom,
--A.Capcode as capcode

from MKTREF.MKTQT_CapDer_VP A,
     MKTREF.MKTQT_NVDModelYear_VP B,
     MKTREF.MKTQT_NVDGenericStatus_VP C,
     MKTREF.MKTQT_nomenclature brand,
     MKTREF.MKTQT_nomenclature model,
     MKTREF.MKTQT_nomenclature segment,
     MKTREF.MKTQT_nomenclature body,
     MKTREF.MKTQT_nomenclature energyComb,
     MKTREF.MKTQT_nomenclature transmission,
     MKTREF.MKTQT_nomenclature gearbox,
     MKTREF.MKTQT_nomenclature door_seat, --add
     MKTREF.MKTQT_nomenclature year_trimester, --add
     MKTREF.MKTQT_NVDTechnical_VP generation,
     MKTREF.MKTQT_NVDTechnical_VP height,
     MKTREF.MKTQT_NVDTechnical_VP length,
     MKTREF.MKTQT_NVDTechnical_VP co2EmissionWLTP,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerDin,
     MKTREF.MKTQT_NVDTechnical_VP maximumPowerKW,
     
     MKTQT_NVDTechnical_VP  cubicCapacity,-- MKTQT_NVDTechnical_VP nbRapports,
     MKTQT_NVDTechnical_VP seatNumber, 
    MKTQT_NVDTechnical_VP wltpLowFuelConsumption, MKTQT_NVDTechnical_VP wltpMediumFuelConsumption, MKTQT_NVDTechnical_VP wltpHighFuelConsumption,
    MKTQT_NVDTechnical_VP wltpExtraHighConsumption, MKTQT_NVDTechnical_VP wltpCombinedFuelConsumption ,MKTQT_NVDTechnical_VP wltpElectricConsumption,
    MKTQT_NVDTechnical_VP wltpElectricRange, -- MKTQT_NVDTechnical_VP batteryCapacity, --MKTQT_NVDTechnical_VP maxLadenWeight,
    MKTQT_NVDTechnical_VP kerbWeight,
     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTQT_CAPMAN_VP   CAPMAN,
     MKTQT_CAPRANGE_VP CAPRAN,
     
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VP CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,
     --MKTQT_NVDTECHNICAL_VP maximumPowerDin,
     MKTQT_NVDTECHNICAL_VP nbRapports, MKTQT_NVDTECHNICAL_VP batteryCapacity,  -- add MOTORISATIONBLVD
     MKTREF.MKTQT_DIMENSIONS DIMENSIONS, -- add DIMENSIONS
     MKTQT_NVDTECHNICAL_VP  maxLadenWeight  
where A.id = B.id 
and A.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
and c.status(+) = 'S'            --- 
and c.genericcode(+) = '9'        ---
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('C',A.MANCODE)
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('C',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('C',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission

and generation.id(+) = B.id and generation.effectivefrom(+) = B.effectivefrom
and generation.techcode(+) = 471
and height.id(+) = B.id and height.effectivefrom(+) = B.effectivefrom
and height.techcode (+) = 34
and length.id(+) = B.id and length.effectivefrom(+) = B.effectivefrom
and length.techcode(+) = 4
and co2EmissionWLTP.id(+) = B.id and co2EmissionWLTP.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP.techcode(+) = 173
and maximumPowerDin.id (+) = B.id and maximumPowerDin.effectivefrom(+) = B.effectivefrom
and maximumPowerDin.techcode(+) = 21 
and maximumPowerKW.id(+) = B.id and maximumPowerKW.effectivefrom(+) = B.effectivefrom
and maximumPowerKW.techcode(+) = 48

and  cubicCapacity.ID(+) = B.ID and cubicCapacity.effectivefrom(+) = B.effectivefrom and cubicCapacity.techcode(+) = 20
and  nbRapports.ID(+) = B.ID and nbRapports.effectivefrom(+) = B.effectivefrom and nbRapports.techcode(+) = 66
and  seatNumber.ID(+) = B.ID and seatNumber.effectivefrom(+) = B.effectivefrom and seatNumber.techcode(+) = 47
and  wltpLowFuelConsumption.ID(+) = B.ID and wltpLowFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpLowFuelConsumption.techcode(+) = 184
and  wltpMediumFuelConsumption.ID(+) = B.ID and wltpMediumFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpMediumFuelConsumption.techcode(+) = 185
and  wltpHighFuelConsumption.ID(+) = B.ID and wltpHighFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpHighFuelConsumption.techcode(+) = 186
and  wltpExtraHighConsumption.ID(+) = B.ID and wltpExtraHighConsumption.effectivefrom(+) = B.effectivefrom and wltpExtraHighConsumption.techcode(+) = 187
and  wltpCombinedFuelConsumption.ID(+) = B.ID and wltpCombinedFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpCombinedFuelConsumption.techcode(+) = 188
and  wltpElectricConsumption.ID(+) = B.ID and wltpElectricConsumption.effectivefrom(+) = B.effectivefrom and wltpElectricConsumption.techcode(+) = 164
and  wltpElectricRange.ID(+) = B.ID and wltpElectricRange.effectivefrom(+) = B.effectivefrom and wltpElectricRange.techcode(+) = 165
and  batteryCapacity.ID(+) = B.ID and batteryCapacity.effectivefrom(+) = B.effectivefrom and batteryCapacity.techcode(+) = 163
and  maxLadenWeight.ID(+) = B.ID and maxLadenWeight.effectivefrom(+) = B.effectivefrom and maxLadenWeight.techcode(+) = 14
and  kerbWeight.ID(+) = B.ID and kerbWeight.effectivefrom(+) = B.effectivefrom and kerbWeight.techcode(+) = 3




-- MODEL GEN
AND MG.BRAND_CODE  = brand.code
and MG.VEHICULE_NAME  = CAPMAN.NAME || '| ' || CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MG.VEHICULE_TYPE  = 'VP'
AND MG.CROSSREF_CODE  =  A.RANCODE || 'GEN' || generation.valuestring -- AJOUT VENDREDI
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE
    --AND     generation.ID(+) = A.ID
   -- AND     generation.techcode(+) = 471
   -- and B.effectivefrom = generation.effectivefrom  ----- pour ne pas avoir fausses generations

-- TRIM
AND TRIM.BRAND_CODE = brand.code
AND TRIM.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND TRIM.VEHICULE_TYPE  = 'VP'
AND TRIM.VEHICULE_TRIM  = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE  = concat('C', A.TrimCode)   -- AJOUT VENDREDI
    AND  CAPTRIM.CODE(+) =  A.TrimCode

-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MOTORISATIONBLVD.VEHICULE_TYPE  = 'VP'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  =  (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  (case when nbRapports.valuestring not in ('AUTOMATIC','N') then ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )  else null end)  || '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat)
  -----  AND   maximumPowerDin.ID(+) = A.ID
  -------  AND   maximumPowerDin.TECHCODE(+) = 21
   -- AND   nbRapports.ID(+) = A.ID
   -- AND   nbRapports.TECHCODE(+) = 66
    --AND   batteryCapacity.ID(+) = A.ID
    --AND   batteryCapacity.TECHCODE(+) = 163 

-- DIMENSION
AND DIMENSIONS.BRAND_CODE = brand.code
AND DIMENSIONS.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND DIMENSIONS.VEHICULE_TYPE  = 'VP'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || height.valuefloat || ':' || length.valuefloat || ':' || ':' || maxLadenWeight.valuefloat)   ---  interne
   ----- AND   height.ID(+) = A.ID
   ----- AND   height.TECHCODE(+) = 34 
   ----- AND   length.ID(+) = A.ID
   ----- AND   length.TECHCODE(+) = 4    
  --  AND   maxLadenWeight.ID(+) = A.ID
   -- AND   maxLadenWeight.TECHCODE(+) = 14;
   
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+) ='CAP'
and door_seat.crossref_code(+) = concat(concat(A.doors,'-'),seatNumber.valuefloat)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(substr(B.refe, 0,4)+ ( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) ), ',', '.' )

;

  
    ----------------------------------------------------------------------
    ----------------------------- VU -------------------------------------
    ----------------------------------------------------------------------
    
 Cursor C_vehicle_VU Is

    select distinct
A.Id as tech_id,
NULL as tech_dateExtraction ,
NULL as tech_dateInsertion  ,
'UK' as countryCode,
concat(concat('L', A.Id), TO_CHAR(B.effectivefrom, 'YYYYMMDD')) as itemDirectoryVehicleRef , 
NULL as versionState   ,
B.effectivefrom  as validityStartDate   ,
B.effectiveto as validityEndDate ,
NULL  as corporateGroupCode  ,
brand.parent as corporateGroupLabel ,
brand.code as brandCode   ,
brand.description_label as brandLabel  ,
model.code as familyCode  ,
model.description_label as familyLabel ,
(case when generation.valuestring is null  then ' ' else generation.valuestring  end) as generation  ,   ---------477
substr(B.refe, 0,4)  as versionYear ,
( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) )*4+1 as versionTrimester    , --OK
segment.code as segmentMarketingCode    ,
NULL as faceLiftGeneration  ,
(case when substr(CAPCODE,20,1) ='L' then 'C' else substr(A.CAPCODE,20,1) end  ) as kindCode    ,   --OK
body.code as bodyCode    ,
height.valuefloat as height, --34 as height  , ---34
length.valuefloat as length, --4  as length  , ---4
NULL as sportinessFlag  ,
NULL as co2EmissionNEDC ,
co2EmissionWLTP.valuefloat as co2EmissionWLTP, -- 239 as co2EmissionWLTP , --239
NULL as co2ClassCode    ,
NULL as fiscalHorsePower    ,
maximumPowerDin.valuefloat as maximumPowerDin, -- 21 as maximumPowerDin ,  --21
maximumPowerKW.valuefloat as maximumPowerKW, --48 as maximumPowerKW  , --48
substr(A.capcode, 12, 1) as energy1Code ,
NULL as energy1DetailCode   ,
NULL as energy2Code ,
NULL as energy2DetailCode   ,
energyComb.code as energyCombCode  , --
NULL as motorisation    ,
NULL as motorisationComb    ,
cubicCapacity.valuefloat as cubicCapacity, --20 as cubicCapacity   , --20
transmission.code as transmissionTypeCode    ,
gearbox.code as gearBoxTypeCode ,
( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end) as nbRapports  , -----OK
NULL as typeVariantVersion  ,
CAPTRIM.Name as trimLevel,  --select distinct Name from Lights_CapTrim where Lights_CapTrim.Code = Lights_CapDer.TrimCode 
seatNumber.valuefloat as seatNumber, --47 as seatNumber  ,  ---47
NULL as doorNumber  , -- doors en  VP, null en vu
NULL as nedcCombineFuelConsumption  ,
NULL as nedcExtraUrbanFuelConsumption   ,
NULL as nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption.valuefloat as wltpLowFuelConsumption, --299 as wltpLowFuelConsumption  ,
wltpMediumFuelConsumption.valuefloat as wltpMediumFuelConsumption,--302 as wltpMediumFuelConsumption   ,
wltpHighFuelConsumption.valuefloat as wltpHighFuelConsumption, --296 as wltpHighFuelConsumption ,
wltpExtraHighConsumption.valuefloat as wltpExtraHighConsumption,--293 as wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption.valuefloat as wltpCombinedFuelConsumption,--290 as wltpCombinedFuelConsumption ,
wltpElectricConsumption.valuefloat as wltpElectricConsumption,--166 as wltpElectricConsumption ,
wltpElectricRange.valuefloat as wltpElectricRange,--167 as wltpElectricRange   ,
batteryCapacity.valuefloat as batteryCapacity,--152 as batteryCapacity ,
maxLadenWeight.valuefloat as maxLadenWeight,--14 as maxLadenWeight  ,
kerbWeight.valuefloat as kerbWeight,--3 as kerbWeight  ,
payLoad.valuefloat as payLoad,--32 as payLoad , -- VU : DIFFERENCE
(case when C.status = 'S' and C.genericcode =9 then 'True' else 'False' end  ) as hasTelematicBox ,
NULL as catalogueDetail ,
NULL as tsnNumber   ,
NULL as wltpFlag    ,
NULL as completenessFlag    ,
NULL as  validationUser  ,
NULL as validationDate  ,
NULL as updateUser  ,
NULL as updateDate  ,
NULL as purchaseCondition   ,
NULL as designBases ,
NULL as designCustomerShip  ,
NULL as versionLabelGlobalShort ,
NULL as versionLabeGlobalLong   ,
model.description_label as versionLabelLocalShort  ,
concat(model.description_label, A.name) as versionLabelLocalLong,
'VU' as VEHICULE_TYPE,
MG.MODEL_GEN_ID as MODEL_GEN_ID,
TRIM.TRIM_ID as TRIM_ID,
MOTORISATIONBLVD.MOTORISATIONBLVD_ID as MOTORISATIONBLVD_ID,
DIMENSIONS.DIMENSIONS_ID as DIMENSIONS_ID,
(case when door_seat.crossref_code in ('-2','-3','-4','-5','-6','-7','-8','-9','-10','-11','-12','-13','-14','-15','-16','-17') then door_seat.code else 'Z' end) as door_seat,
year_trimester.code as year_trimester
--B.effectivefrom as effectivefrom,
---A.Capcode as capcode

from MKTREF.MKTQT_CapDer_VU A , MKTREF.MKTQT_NVDModelYear_VU B  , MKTREF.MKTQT_NVDGenericStatus_VU C,
     MKTREF.MKTQT_nomenclature brand,
     MKTREF.MKTQT_nomenclature model,
     MKTREF.MKTQT_nomenclature segment,
     MKTREF.MKTQT_nomenclature body,
     MKTREF.MKTQT_nomenclature energyComb,
     MKTREF.MKTQT_nomenclature transmission,
     MKTREF.MKTQT_nomenclature gearbox,
     MKTREF.MKTQT_nomenclature door_seat, --add
     MKTREF.MKTQT_nomenclature year_trimester, --add
     
     MKTREF.MKTQT_NVDTechnical_VU height,
     MKTREF.MKTQT_NVDTechnical_VU length,
     MKTREF.MKTQT_NVDTechnical_VU co2EmissionWLTP,
     MKTREF.MKTQT_NVDTechnical_VU maximumPowerDin,
     MKTREF.MKTQT_NVDTechnical_VU maximumPowerKW,

     MKTQT_NVDTechnical_VU  cubicCapacity,-- MKTQT_NVDTechnical_VU nbRapports,
     MKTQT_NVDTechnical_VU seatNumber, 
    MKTQT_NVDTechnical_VU wltpLowFuelConsumption, MKTQT_NVDTechnical_VU wltpMediumFuelConsumption, MKTQT_NVDTechnical_VU wltpHighFuelConsumption,
    MKTQT_NVDTechnical_VU wltpExtraHighConsumption, MKTQT_NVDTechnical_VU wltpCombinedFuelConsumption ,MKTQT_NVDTechnical_VU wltpElectricConsumption,
    MKTQT_NVDTechnical_VU wltpElectricRange, -- MKTQT_NVDTechnical_VU batteryCapacity, --MKTQT_NVDTechnical_VU maxLadenWeight,
    MKTQT_NVDTechnical_VU kerbWeight,
    MKTQT_NVDTechnical_VU payLoad,
     
     MKTREF.MKTQT_MODEL_GEN MG,
     MKTQT_CAPMAN_VU   CAPMAN,
     MKTQT_CAPRANGE_VU CAPRAN,
     MKTQT_NVDTechnical_VU generation,
     MKTREF.MKTQT_TRIM  TRIM,
     MKTREF.MKTQT_CapTrim_VU CAPTRIM,  -- add trim
     MKTREF.MKTQT_MOTORISATIONBLVD MOTORISATIONBLVD,
     --MKTQT_NVDTECHNICAL_VU maximumPowerDin,
     MKTQT_NVDTECHNICAL_VU nbRapports, MKTQT_NVDTECHNICAL_VU batteryCapacity,  -- add MOTORISATIONBLVD
     MKTREF.MKTQT_DIMENSIONS DIMENSIONS, -- add DIMENSIONS
     MKTQT_NVDTECHNICAL_VU  maxLadenWeight  

where A.id = B.id 
and B.id = C.id (+)
and B.effectivefrom = C.effectivefrom (+)
and B.effectiveto = C.effectiveto (+)
and c.status(+) = 'S'   ----
and c.genericcode(+) = '9'  ----
and brand.Entity(+) = 'brand'
and brand.crossref_code(+) = concat('L',A.MANCODE)
and model.Entity(+) = 'model'
and model.crossref_code(+) = concat('L',A.RANCODE)
and segment.Entity(+) = 'segment'
and segment.crossref_code(+) = A.VEHICLESECTOR
and body.Entity(+) = 'body'
and body.crossref_code(+) = concat('L',substr(A.capcode, 11,1))
and energyComb.crossref_typecode (+)= 'CAP'
and energyComb.entity (+)= 'energyComb'
and energyComb.crossref_code(+) = substr(A.capcode, 12, 1)
and transmission.entity (+)= 'transmission'
and transmission.crossref_code(+) = A.drivetrain
and gearbox.entity (+) = 'gearbox'
and gearbox.crossref_code(+) = A.transmission

and generation.id(+) = B.id and generation.effectivefrom(+) = B.effectivefrom
and generation.techcode(+) = 477
and height.id(+) = B.id and height.effectivefrom(+) = B.effectivefrom
and height.techcode (+) = 34
and length.id(+) = B.id and length.effectivefrom(+) = B.effectivefrom
and length.techcode(+) = 4
and co2EmissionWLTP.id(+) = B.id and co2EmissionWLTP.effectivefrom(+) = B.effectivefrom
and co2EmissionWLTP.techcode(+) = 239
and maximumPowerDin.id (+) = B.id and maximumPowerDin.effectivefrom(+) = B.effectivefrom
and maximumPowerDin.techcode(+) = 21 
and maximumPowerKW.id(+) = B.id and maximumPowerKW.effectivefrom(+) = B.effectivefrom
and maximumPowerKW.techcode(+) = 48

and  cubicCapacity.ID(+) = B.ID and cubicCapacity.effectivefrom(+) = B.effectivefrom and cubicCapacity.techcode(+) = 20
and  nbRapports.ID(+) = B.ID and nbRapports.effectivefrom(+) = B.effectivefrom and nbRapports.techcode(+) = 66
and  seatNumber.ID(+) = B.ID and seatNumber.effectivefrom(+) = B.effectivefrom and seatNumber.techcode(+) = 47
and  wltpLowFuelConsumption.ID(+) = B.ID and wltpLowFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpLowFuelConsumption.techcode(+) = 299
and  wltpMediumFuelConsumption.ID(+) = B.ID and wltpMediumFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpMediumFuelConsumption.techcode(+) = 302
and  wltpHighFuelConsumption.ID(+) = B.ID and wltpHighFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpHighFuelConsumption.techcode(+) = 296
and  wltpExtraHighConsumption.ID(+) = B.ID and wltpExtraHighConsumption.effectivefrom(+) = B.effectivefrom and wltpExtraHighConsumption.techcode(+) = 293
and  wltpCombinedFuelConsumption.ID(+) = B.ID and wltpCombinedFuelConsumption.effectivefrom(+) = B.effectivefrom and wltpCombinedFuelConsumption.techcode(+) = 290
and  wltpElectricConsumption.ID(+) = B.ID and wltpElectricConsumption.effectivefrom(+) = B.effectivefrom and wltpElectricConsumption.techcode(+) = 166
and  wltpElectricRange.ID(+) = B.ID and wltpElectricRange.effectivefrom(+) = B.effectivefrom and wltpElectricRange.techcode(+) = 167
and  batteryCapacity.ID(+) = B.ID and batteryCapacity.effectivefrom(+) = B.effectivefrom and batteryCapacity.techcode(+) = 152
and  maxLadenWeight.ID(+) = B.ID and maxLadenWeight.effectivefrom(+) = B.effectivefrom and maxLadenWeight.techcode(+) = 14
and  kerbWeight.ID(+) = B.ID and kerbWeight.effectivefrom(+) = B.effectivefrom and kerbWeight.techcode(+) = 3
and  payLoad.ID(+) = B.ID and payLoad.effectivefrom(+) = B.effectivefrom and payLoad.techcode(+) = 32  -- DIFFERENCE


-- MODEL GEN
AND MG.BRAND_CODE  = brand.code
and MG.VEHICULE_NAME  = CAPMAN.NAME || '| ' || CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MG.VEHICULE_TYPE  = 'VU'
AND MG.CROSSREF_CODE  =  A.RANCODE || 'GEN' || generation.valuestring -- AJOUT VENDREDI
    AND A.MANCODE = CAPMAN.CODE
    AND A.RANCODE = CAPRAN.CODE
   ----- AND     generation.ID(+) = A.ID
  -----  AND     generation.techcode(+) = 477

-- TRIM
AND TRIM.BRAND_CODE = brand.code
AND TRIM.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND TRIM.VEHICULE_TYPE  = 'VU'
AND TRIM.VEHICULE_TRIM  = (case when CAPTRIM.NAME is null then ' ' else  CAPTRIM.NAME end)
AND TRIM.CROSSREF_CODE  = concat('L', A.TrimCode)   -- AJOUT VENDREDI
    AND  CAPTRIM.CODE(+) =  A.TrimCode


-- MOTORISATION
AND MOTORISATIONBLVD.BRAND_CODE = brand.code
AND MOTORISATIONBLVD.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND MOTORISATIONBLVD.VEHICULE_TYPE  = 'VU'
AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD  = (maximumPowerDin.valuefloat  || '/' || A.Transmission || '/' || A.DriveTrain || '/' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else replace(substr(nbRapports.valuestring, 1,2),' ','') end )|| '/' || batteryCapacity.valuefloat)
--AND MOTORISATIONBLVD.VEHICULE_MOTORISATIONBLVD (+) = (maximumPowerDin.valuefloat || ' ' || A.DriveTrain || ' ' || A.Transmission || ' ' ||  ( case  when substr(nbRapports.valuestring, 2,1) ='S' then  substr(nbRapports.valuestring, 1,1) else substr(nbRapports.valuestring, 1,2) end )|| ' ' || batteryCapacity.valuefloat) 
    ------AND   maximumPowerDin.ID(+) = A.ID
    ------AND   maximumPowerDin.TECHCODE(+) = 21
   -- AND   nbRapports.ID(+) = A.ID
   -- AND   nbRapports.TECHCODE(+) = 66
    --AND   batteryCapacity.ID(+) = A.ID
    --AND   batteryCapacity.TECHCODE(+) = 152 

-- DIMENSION
AND DIMENSIONS.BRAND_CODE = brand.code
AND DIMENSIONS.VEHICULE_NAME  = CAPMAN.NAME || ':' || CAPRAN.NAME || ':' || 'GEN' || generation.valuestring
AND DIMENSIONS.VEHICULE_TYPE  = 'VU'
AND DIMENSIONS.VEHICULE_DIMENSIONS =  (body.code || ':' || height.valuefloat || ':' || length.valuefloat  || ':' ||  payLoad.valuefloat || ':' || maxLadenWeight.valuefloat)  --interne
   ---- AND   height.ID(+) = A.ID
   ---- AND   height.TECHCODE(+) = 34 
  ----  AND   length.ID(+) = A.ID
  ----  AND   length.TECHCODE(+) = 4    
  --  AND   maxLadenWeight.ID(+) = A.ID
   -- AND   maxLadenWeight.TECHCODE(+) = 14;

  --  AND   payLoad.ID(+) = CAPDER.ID
  --  AND   payLoad.TECHCODE(+) = 32 ;
  
and door_seat.entity(+) ='door_seat' and door_seat.crossref_typecode(+)='CAP'
--and door_seat.crossref_code in ('-2','-3','-4','-5','-6','-7','-8','-9','-10','-11','-12','-13','-14','-15','-16','-17')
and door_seat.crossref_code(+) = concat('-',seatNumber.valuefloat)

and year_trimester.entity(+) ='year_trimester'  
and year_trimester.description_label(+) = replace(substr(B.refe, 0,4)+ ( replace(B.refe, '.', ',')-floor(replace(B.refe, '.', ',')) ), ',', '.' )


;






 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','## Alimentation de la table MKTREF.MKTQT_vehicle ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');
  

  FOR REC_vehicle_VP IN C_vehicle_VP
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_vehicle
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabeGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong   ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester
--effectivefrom,
--capcode
              )
        VALUES
              (  
REC_vehicle_VP.tech_id ,
REC_vehicle_VP.tech_dateExtraction ,
REC_vehicle_VP.tech_dateInsertion  ,
REC_vehicle_VP.countryCode ,
REC_vehicle_VP.itemDirectoryVehicleRef ,
REC_vehicle_VP.versionState    ,
REC_vehicle_VP.validityStartDate   ,
REC_vehicle_VP.validityEndDate ,
REC_vehicle_VP.corporateGroupCode  ,
REC_vehicle_VP.corporateGroupLabel ,
REC_vehicle_VP.brandCode   ,
REC_vehicle_VP.brandLabel  ,
REC_vehicle_VP.familyCode  ,
REC_vehicle_VP.familyLabel ,
REC_vehicle_VP.generation  ,
REC_vehicle_VP.versionYear ,
REC_vehicle_VP.versionTrimester    ,
REC_vehicle_VP.segmentMarketingCode   ,
REC_vehicle_VP.faceLiftGeneration ,
REC_vehicle_VP.kindCode    ,
REC_vehicle_VP.bodyCode    ,
REC_vehicle_VP.height  ,
REC_vehicle_VP.length  ,
REC_vehicle_VP.sportinessFlag  ,
REC_vehicle_VP.co2EmissionNEDC ,
REC_vehicle_VP.co2EmissionWLTP ,
REC_vehicle_VP.co2ClassCode    ,
REC_vehicle_VP.fiscalHorsePower    ,
REC_vehicle_VP.maximumPowerDin ,
REC_vehicle_VP.maximumPowerKW  ,
REC_vehicle_VP.energy1Code ,
REC_vehicle_VP.energy1DetailCode   ,
REC_vehicle_VP.energy2Code ,
REC_vehicle_VP.energy2DetailCode   ,
REC_vehicle_VP.energyCombCode  ,
REC_vehicle_VP.motorisation    ,
REC_vehicle_VP.motorisationComb    ,
REC_vehicle_VP.cubicCapacity   ,
REC_vehicle_VP.transmissionTypeCode    ,
REC_vehicle_VP.gearBoxTypeCode ,
REC_vehicle_VP.nbRapports  ,
REC_vehicle_VP.typeVariantVersion  ,
REC_vehicle_VP.trimLevel   ,
REC_vehicle_VP.seatNumber  ,
REC_vehicle_VP.doorNumber  ,
REC_vehicle_VP.nedcCombineFuelConsumption  ,
REC_vehicle_VP.nedcExtraUrbanFuelConsumption   ,
REC_vehicle_VP.nedcUrbanFuelConsumption    ,
REC_vehicle_VP.wltpLowFuelConsumption  ,
REC_vehicle_VP.wltpMediumFuelConsumption   ,
REC_vehicle_VP.wltpHighFuelConsumption ,
REC_vehicle_VP.wltpExtraHighConsumption    ,
REC_vehicle_VP.wltpCombinedFuelConsumption ,
REC_vehicle_VP.wltpElectricConsumption ,
REC_vehicle_VP.wltpElectricRange   ,
REC_vehicle_VP.batteryCapacity ,
REC_vehicle_VP.maxLadenWeight  ,
REC_vehicle_VP.kerbWeight  ,
REC_vehicle_VP.payLoad ,
REC_vehicle_VP.hasTelematicBox ,
REC_vehicle_VP.catalogueDetail ,
REC_vehicle_VP.tsnNumber   ,
REC_vehicle_VP.wltpFlag    ,
REC_vehicle_VP.completenessFlag    ,
REC_vehicle_VP.validationUser  ,
REC_vehicle_VP.validationDate  ,
REC_vehicle_VP.updateUser  ,
REC_vehicle_VP.updateDate  ,
REC_vehicle_VP.purchaseCondition   ,
REC_vehicle_VP.designBases ,
REC_vehicle_VP.designCustomerShip  ,
REC_vehicle_VP.versionLabelGlobalShort ,
REC_vehicle_VP.versionLabeGlobalLong   ,
REC_vehicle_VP.versionLabelLocalShort  ,
REC_vehicle_VP.versionLabelLocalLong   ,
REC_vehicle_VP.VEHICULE_TYPE,
rec_vehicle_vp.MODEL_GEN_ID,
REC_vehicle_VP.TRIM_ID,
REC_vehicle_VP.MOTORISATIONBLVD_ID,
REC_vehicle_VP.DIMENSIONS_ID,
REC_vehicle_VP.door_seat,
REC_vehicle_VP.year_trimester
--REC_vehicle_VP.effectivefrom,
--REC_vehicle_VP.capcode
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle
        Set        
tech_id  =     REC_vehicle_VP.tech_id ,
tech_dateExtraction  = REC_vehicle_VP.tech_dateExtraction ,
tech_dateInsertion   = REC_vehicle_VP.tech_dateInsertion  ,
countryCode  = REC_vehicle_VP.countryCode ,
--itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef ,
versionState     = REC_vehicle_VP.versionState    ,
validityStartDate    = REC_vehicle_VP.validityStartDate   ,
validityEndDate  = REC_vehicle_VP.validityEndDate ,
corporateGroupCode   = REC_vehicle_VP.corporateGroupCode  ,
corporateGroupLabel  = REC_vehicle_VP.corporateGroupLabel ,
brandCode    = REC_vehicle_VP.brandCode   ,
brandLabel   = REC_vehicle_VP.brandLabel  ,
familyCode   = REC_vehicle_VP.familyCode  ,
familyLabel  = REC_vehicle_VP.familyLabel ,
generation   = REC_vehicle_VP.generation  ,
versionYear  = REC_vehicle_VP.versionYear ,
versionTrimester     = REC_vehicle_VP.versionTrimester    ,
segmentMarketingCode    = REC_vehicle_VP.segmentMarketingCode   ,
faceLiftGeneration   = REC_vehicle_VP.faceLiftGeneration  ,
kindCode     = REC_vehicle_VP.kindCode    ,
bodyCode     = REC_vehicle_VP.bodyCode    ,
height   = REC_vehicle_VP.height  ,
length   = REC_vehicle_VP.length  ,
sportinessFlag   = REC_vehicle_VP.sportinessFlag  ,
co2EmissionNEDC  = REC_vehicle_VP.co2EmissionNEDC ,
co2EmissionWLTP  = REC_vehicle_VP.co2EmissionWLTP ,
co2ClassCode     = REC_vehicle_VP.co2ClassCode    ,
fiscalHorsePower     = REC_vehicle_VP.fiscalHorsePower    ,
maximumPowerDin  = REC_vehicle_VP.maximumPowerDin ,
maximumPowerKW   = REC_vehicle_VP.maximumPowerKW  ,
energy1Code  = REC_vehicle_VP.energy1Code ,
energy1DetailCode    = REC_vehicle_VP.energy1DetailCode   ,
energy2Code  = REC_vehicle_VP.energy2Code ,
energy2DetailCode    = REC_vehicle_VP.energy2DetailCode   ,
energyCombCode   = REC_vehicle_VP.energyCombCode  ,
motorisation     = REC_vehicle_VP.motorisation    ,
motorisationComb     = REC_vehicle_VP.motorisationComb    ,
cubicCapacity    = REC_vehicle_VP.cubicCapacity   ,
transmissionTypeCode     = REC_vehicle_VP.transmissionTypeCode    ,
gearBoxTypeCode  = REC_vehicle_VP.gearBoxTypeCode ,
nbRapports   = REC_vehicle_VP.nbRapports  ,
typeVariantVersion   = REC_vehicle_VP.typeVariantVersion  ,
trimLevel    = REC_vehicle_VP.trimLevel   ,
seatNumber   = REC_vehicle_VP.seatNumber  ,
doorNumber   = REC_vehicle_VP.doorNumber  ,
nedcCombineFuelConsumption   = REC_vehicle_VP.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_vehicle_VP.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_vehicle_VP.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_vehicle_VP.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_vehicle_VP.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_vehicle_VP.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_vehicle_VP.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_vehicle_VP.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_vehicle_VP.wltpElectricConsumption ,
wltpElectricRange    = REC_vehicle_VP.wltpElectricRange   ,
batteryCapacity  = REC_vehicle_VP.batteryCapacity ,
maxLadenWeight   = REC_vehicle_VP.maxLadenWeight  ,
kerbWeight   = REC_vehicle_VP.kerbWeight  ,
payLoad  = REC_vehicle_VP.payLoad ,
hasTelematicBox  = REC_vehicle_VP.hasTelematicBox ,
catalogueDetail  = REC_vehicle_VP.catalogueDetail ,
tsnNumber    = REC_vehicle_VP.tsnNumber   ,
wltpFlag     = REC_vehicle_VP.wltpFlag    ,
completenessFlag     = REC_vehicle_VP.completenessFlag    ,
validationUser   = REC_vehicle_VP.validationUser  ,
validationDate   = REC_vehicle_VP.validationDate  ,
updateUser   = REC_vehicle_VP.updateUser  ,
updateDate   = REC_vehicle_VP.updateDate  ,
purchaseCondition    = REC_vehicle_VP.purchaseCondition   ,
designBases  = REC_vehicle_VP.designBases ,
designCustomerShip   = REC_vehicle_VP.designCustomerShip  ,
versionLabelGlobalShort  = REC_vehicle_VP.versionLabelGlobalShort ,
versionLabeGlobalLong    = REC_vehicle_VP.versionLabeGlobalLong   ,
versionLabelLocalShort   = REC_vehicle_VP.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_vehicle_VP.versionLabelLocalLong,
VEHICULE_TYPE           =       REC_vehicle_VP.VEHICULE_TYPE,
model_gen                = REC_vehicle_vp.MODEL_GEN_ID,
TRIM                 =  REC_vehicle_VP.TRIM_ID,
MOTORISATIONBLVD    = REC_vehicle_VP.MOTORISATIONBLVD_ID,
DIMENSIONS       = REC_vehicle_VP.DIMENSIONS_ID,
door_seat = REC_vehicle_VP.door_seat,
year_trimester = REC_vehicle_VP.year_trimester



        where  itemDirectoryVehicleRef  = REC_vehicle_VP.itemDirectoryVehicleRef  ;
      --  and versionYear  = REC_vehicle_VP.versionYear 
      --  and  versionTrimester     = REC_vehicle_VP.versionTrimester   
      --  and generation   = REC_vehicle_VP.generation  
      -- and DIMENSIONS       = REC_vehicle_VP.DIMENSIONS_ID
      --  and model_gen                = REC_vehicle_vp.MODEL_GEN_ID ;
        
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
       -- and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    	--and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
        --and V_DATE_SITU  =  Date_situ 
       -- and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        --RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle',to_char(REC_vehicle_VP.itemDirectoryVehicleRef)|| '-' || to_char(REC_vehicle_VP.versionYear) || '-' || to_char(REC_vehicle_VP.versionTrimester) || '-' ||to_char(REC_vehicle_VP.generation) || '-' ||  to_char(REC_vehicle_VP.MODEL_GEN_ID) );

        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
                --Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle',to_char(REC_vehicle_VP.tech_id|| '-' || REC_vehicle_VP.itemDirectoryVehicleRef) );
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   -------------------------------VU  
   
   
   RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VU : ',' ');  
   
   
     FOR REC_vehicle_VU IN C_vehicle_VU
  LOOP
        
       /*************************************************************************/
        BEGIN
        
        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        
        INSERT INTO MKTREF.MKTQT_vehicle
              (  
tech_id ,
tech_dateExtraction ,
tech_dateInsertion  ,
countryCode ,
itemDirectoryVehicleRef ,
versionState    ,
validityStartDate   ,
validityEndDate ,
corporateGroupCode  ,
corporateGroupLabel ,
brandCode   ,
brandLabel  ,
familyCode  ,
familyLabel ,
generation  ,
versionYear ,
versionTrimester    ,
segmentMarketingCode   ,
faceLiftGeneration  ,
kindCode    ,
bodyCode    ,
height  ,
length  ,
sportinessFlag  ,
co2EmissionNEDC ,
co2EmissionWLTP ,
co2ClassCode    ,
fiscalHorsePower    ,
maximumPowerDin ,
maximumPowerKW  ,
energy1Code ,
energy1DetailCode   ,
energy2Code ,
energy2DetailCode   ,
energyCombCode  ,
motorisation    ,
motorisationComb    ,
cubicCapacity   ,
transmissionTypeCode    ,
gearBoxTypeCode ,
nbRapports  ,
typeVariantVersion  ,
trimLevel   ,
seatNumber  ,
doorNumber  ,
nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption  ,
wltpMediumFuelConsumption   ,
wltpHighFuelConsumption ,
wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption ,
wltpElectricConsumption ,
wltpElectricRange   ,
batteryCapacity ,
maxLadenWeight  ,
kerbWeight  ,
payLoad ,
hasTelematicBox ,
catalogueDetail ,
tsnNumber   ,
wltpFlag    ,
completenessFlag    ,
validationUser  ,
validationDate  ,
updateUser  ,
updateDate  ,
purchaseCondition   ,
designBases ,
designCustomerShip  ,
versionLabelGlobalShort ,
versionLabeGlobalLong   ,
versionLabelLocalShort  ,
versionLabelLocalLong ,
VEHICULE_TYPE,
MODEL_GEN,
TRIM,
MOTORISATIONBLVD,
DIMENSIONS,
door_seat,
year_trimester
              )
        VALUES
              (  
REC_vehicle_VU.tech_id ,
REC_vehicle_VU.tech_dateExtraction ,
REC_vehicle_VU.tech_dateInsertion  ,
REC_vehicle_VU.countryCode ,
REC_vehicle_VU.itemDirectoryVehicleRef ,
REC_vehicle_VU.versionState    ,
REC_vehicle_VU.validityStartDate   ,
REC_vehicle_VU.validityEndDate ,
REC_vehicle_VU.corporateGroupCode  ,
REC_vehicle_VU.corporateGroupLabel ,
REC_vehicle_VU.brandCode   ,
REC_vehicle_VU.brandLabel  ,
REC_vehicle_VU.familyCode  ,
REC_vehicle_VU.familyLabel ,
REC_vehicle_VU.generation  ,
REC_vehicle_VU.versionYear ,
REC_vehicle_VU.versionTrimester    ,
REC_vehicle_VU.segmentMarketingCode   ,
REC_vehicle_VU.faceLiftGeneration  ,
REC_vehicle_VU.kindCode    ,
REC_vehicle_VU.bodyCode    ,
REC_vehicle_VU.height  ,
REC_vehicle_VU.length  ,
REC_vehicle_VU.sportinessFlag  ,
REC_vehicle_VU.co2EmissionNEDC ,
REC_vehicle_VU.co2EmissionWLTP ,
REC_vehicle_VU.co2ClassCode    ,
REC_vehicle_VU.fiscalHorsePower    ,
REC_vehicle_VU.maximumPowerDin ,
REC_vehicle_VU.maximumPowerKW  ,
REC_vehicle_VU.energy1Code ,
REC_vehicle_VU.energy1DetailCode   ,
REC_vehicle_VU.energy2Code ,
REC_vehicle_VU.energy2DetailCode   ,
REC_vehicle_VU.energyCombCode  ,
REC_vehicle_VU.motorisation    ,
REC_vehicle_VU.motorisationComb    ,
REC_vehicle_VU.cubicCapacity   ,
REC_vehicle_VU.transmissionTypeCode    ,
REC_vehicle_VU.gearBoxTypeCode ,
REC_vehicle_VU.nbRapports  ,
REC_vehicle_VU.typeVariantVersion  ,
REC_vehicle_VU.trimLevel   ,
REC_vehicle_VU.seatNumber  ,
REC_vehicle_VU.doorNumber  ,
REC_vehicle_VU.nedcCombineFuelConsumption  ,
REC_vehicle_VU.nedcExtraUrbanFuelConsumption   ,
REC_vehicle_VU.nedcUrbanFuelConsumption    ,
REC_vehicle_VU.wltpLowFuelConsumption  ,
REC_vehicle_VU.wltpMediumFuelConsumption   ,
REC_vehicle_VU.wltpHighFuelConsumption ,
REC_vehicle_VU.wltpExtraHighConsumption    ,
REC_vehicle_VU.wltpCombinedFuelConsumption ,
REC_vehicle_VU.wltpElectricConsumption ,
REC_vehicle_VU.wltpElectricRange   ,
REC_vehicle_VU.batteryCapacity ,
REC_vehicle_VU.maxLadenWeight  ,
REC_vehicle_VU.kerbWeight  ,
REC_vehicle_VU.payLoad ,
REC_vehicle_VU.hasTelematicBox ,
REC_vehicle_VU.catalogueDetail ,
REC_vehicle_VU.tsnNumber   ,
REC_vehicle_VU.wltpFlag    ,
REC_vehicle_VU.completenessFlag    ,
REC_vehicle_VU.validationUser  ,
REC_vehicle_VU.validationDate  ,
REC_vehicle_VU.updateUser  ,
REC_vehicle_VU.updateDate  ,
REC_vehicle_VU.purchaseCondition   ,
REC_vehicle_VU.designBases ,
REC_vehicle_VU.designCustomerShip  ,
REC_vehicle_VU.versionLabelGlobalShort ,
REC_vehicle_VU.versionLabeGlobalLong   ,
REC_vehicle_VU.versionLabelLocalShort  ,
REC_vehicle_VU.versionLabelLocalLong   ,
REC_vehicle_VU.VEHICULE_TYPE,
rec_vehicle_vu.MODEL_GEN_ID,
REC_vehicle_Vu.TRIM_ID,
REC_vehicle_Vu.MOTORISATIONBLVD_ID,
REC_vehicle_Vu.DIMENSIONS_ID,
REC_vehicle_Vu.door_seat,
REC_vehicle_Vu.year_trimester
              );
         
        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle
        Set        
tech_id  =     REC_vehicle_VU.tech_id ,
tech_dateExtraction  = REC_vehicle_VU.tech_dateExtraction ,
tech_dateInsertion   = REC_vehicle_VU.tech_dateInsertion  ,
countryCode  = REC_vehicle_VU.countryCode ,
--itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ,
versionState     = REC_vehicle_VU.versionState    ,
validityStartDate    = REC_vehicle_VU.validityStartDate   ,
validityEndDate  = REC_vehicle_VU.validityEndDate ,
corporateGroupCode   = REC_vehicle_VU.corporateGroupCode  ,
corporateGroupLabel  = REC_vehicle_VU.corporateGroupLabel ,
brandCode    = REC_vehicle_VU.brandCode   ,
brandLabel   = REC_vehicle_VU.brandLabel  ,
familyCode   = REC_vehicle_VU.familyCode  ,
familyLabel  = REC_vehicle_VU.familyLabel ,
generation   = REC_vehicle_VU.generation  ,
versionYear  = REC_vehicle_VU.versionYear ,
versionTrimester     = REC_vehicle_VU.versionTrimester    ,
segmentMarketingCode    = REC_vehicle_VU.segmentMarketingCode   ,
faceLiftGeneration   = REC_vehicle_VU.faceLiftGeneration  ,
kindCode     = REC_vehicle_VU.kindCode    ,
bodyCode     = REC_vehicle_VU.bodyCode    ,
height   = REC_vehicle_VU.height  ,
length   = REC_vehicle_VU.length  ,
sportinessFlag   = REC_vehicle_VU.sportinessFlag  ,
co2EmissionNEDC  = REC_vehicle_VU.co2EmissionNEDC ,
co2EmissionWLTP  = REC_vehicle_VU.co2EmissionWLTP ,
co2ClassCode     = REC_vehicle_VU.co2ClassCode    ,
fiscalHorsePower     = REC_vehicle_VU.fiscalHorsePower    ,
maximumPowerDin  = REC_vehicle_VU.maximumPowerDin ,
maximumPowerKW   = REC_vehicle_VU.maximumPowerKW  ,
energy1Code  = REC_vehicle_VU.energy1Code ,
energy1DetailCode    = REC_vehicle_VU.energy1DetailCode   ,
energy2Code  = REC_vehicle_VU.energy2Code ,
energy2DetailCode    = REC_vehicle_VU.energy2DetailCode   ,
energyCombCode   = REC_vehicle_VU.energyCombCode  ,
motorisation     = REC_vehicle_VU.motorisation    ,
motorisationComb     = REC_vehicle_VU.motorisationComb    ,
cubicCapacity    = REC_vehicle_VU.cubicCapacity   ,
transmissionTypeCode     = REC_vehicle_VU.transmissionTypeCode    ,
gearBoxTypeCode  = REC_vehicle_VU.gearBoxTypeCode ,
nbRapports   = REC_vehicle_VU.nbRapports  ,
typeVariantVersion   = REC_vehicle_VU.typeVariantVersion  ,
trimLevel    = REC_vehicle_VU.trimLevel   ,
seatNumber   = REC_vehicle_VU.seatNumber  ,
doorNumber   = REC_vehicle_VU.doorNumber  ,
nedcCombineFuelConsumption   = REC_vehicle_VU.nedcCombineFuelConsumption  ,
nedcExtraUrbanFuelConsumption    = REC_vehicle_VU.nedcExtraUrbanFuelConsumption   ,
nedcUrbanFuelConsumption     = REC_vehicle_VU.nedcUrbanFuelConsumption    ,
wltpLowFuelConsumption   = REC_vehicle_VU.wltpLowFuelConsumption  ,
wltpMediumFuelConsumption    = REC_vehicle_VU.wltpMediumFuelConsumption   ,
wltpHighFuelConsumption  = REC_vehicle_VU.wltpHighFuelConsumption ,
wltpExtraHighConsumption     = REC_vehicle_VU.wltpExtraHighConsumption    ,
wltpCombinedFuelConsumption  = REC_vehicle_VU.wltpCombinedFuelConsumption ,
wltpElectricConsumption  = REC_vehicle_VU.wltpElectricConsumption ,
wltpElectricRange    = REC_vehicle_VU.wltpElectricRange   ,
batteryCapacity  = REC_vehicle_VU.batteryCapacity ,
maxLadenWeight   = REC_vehicle_VU.maxLadenWeight  ,
kerbWeight   = REC_vehicle_VU.kerbWeight  ,
payLoad  = REC_vehicle_VU.payLoad ,
hasTelematicBox  = REC_vehicle_VU.hasTelematicBox ,
catalogueDetail  = REC_vehicle_VU.catalogueDetail ,
tsnNumber    = REC_vehicle_VU.tsnNumber   ,
wltpFlag     = REC_vehicle_VU.wltpFlag    ,
completenessFlag     = REC_vehicle_VU.completenessFlag    ,
validationUser   = REC_vehicle_VU.validationUser  ,
validationDate   = REC_vehicle_VU.validationDate  ,
updateUser   = REC_vehicle_VU.updateUser  ,
updateDate   = REC_vehicle_VU.updateDate  ,
purchaseCondition    = REC_vehicle_VU.purchaseCondition   ,
designBases  = REC_vehicle_VU.designBases ,
designCustomerShip   = REC_vehicle_VU.designCustomerShip  ,
versionLabelGlobalShort  = REC_vehicle_VU.versionLabelGlobalShort ,
versionLabeGlobalLong    = REC_vehicle_VU.versionLabeGlobalLong   ,
versionLabelLocalShort   = REC_vehicle_VU.versionLabelLocalShort  ,
versionLabelLocalLong                       = REC_vehicle_VU.versionLabelLocalLong   ,
VEHICULE_TYPE       =       REC_vehicle_VU.VEHICULE_TYPE,
MODEL_GEN = REC_vehicle_Vu.MODEL_GEN_ID,
TRIM = REC_vehicle_Vu.TRIM_ID,
MOTORISATIONBLVD = REC_vehicle_Vu.MOTORISATIONBLVD_ID,
DIMENSIONS = REC_vehicle_Vu.DIMENSIONS_ID,
door_seat = REC_vehicle_Vu.door_seat,
year_trimester = REC_vehicle_Vu.year_trimester



        where itemDirectoryVehicleRef  = REC_vehicle_VU.itemDirectoryVehicleRef ;
      -- and versionYear  = REC_vehicle_VU.versionYear 
       -- and  versionTrimester     = REC_vehicle_VU.versionTrimester    
       -- and generation   = REC_vehicle_VU.generation  
       -- and DIMENSIONS       = REC_vehicle_VU.DIMENSIONS_ID
       -- and model_gen                = REC_vehicle_vu.MODEL_GEN_ID ;
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
       -- and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    	--and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
        --and V_DATE_SITU  =  Date_situ 
       -- and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
     
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
      
        END;     
   END LOOP;

   COMMIT;
   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_vehicle;



  FUNCTION ALIM_vehicle_crossRefs (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;


  Cursor C_vehicle_crossRefs Is
  
select  distinct
--TECH_ID as TECH_ID, 
itemDirectoryVehicleRef as itemDirectoryVehicleRef,
--versionYear	as versionYear,
--versionTrimester as versionTrimester,
--generation,-- add
--DIMENSIONS,  -- add
--MODEL_GEN,-- add
--VEHICULE_TYPE as VEHICULE_TYPE,
'BLVD' as identifierType,
BRANDCODE || MODEL_GEN || KINDCODE || DIMENSIONS || door_seat || TRIM || energyCombCode ||MOTORISATIONBLVD || year_trimester AS identifier
--capcode
--BRANDCODE || MODEL_GEN || KINDCODE || DIMENSIONS || DOORNUMBER || TRIM || energyCombCode ||MOTORISATIONBLVD || versionTrimester AS BLVD
from MKTQT_vehicle
where  brandcode is not null 
and brandLabel is not null 
and familyLabel is not null 
and KINDCODE is not null 
and bodyCode is not null 
and TRIM is not null 
and energyCombCode is not null 
and maximumPowerDin is not null 
and transmissionTypeCode is not null 
and gearBoxTypeCode is not null 
and year_trimester is not null

and DIMENSIONS != '  '   ------ AJOUT 19 SEPTEMBRE
;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','------------------------- BEGIN  -----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','## Alimentation de la table MKTREF.MKTQT_vehicle_crossRefs ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_vehicle_crossRefs IN C_vehicle_crossRefs
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_crossRefs
              (   
--tech_id, 
itemDirectoryVehicleRef,
identifierType,
identifier
--versionYear,
--versionTrimester,
--generation,-- add
--DIMENSIONS,  -- add
--MODEL_GEN,-- add
--VEHICULE_TYPE,
--BLVD,
--capcode
              )
        VALUES
              (  
--REC_vehicle_crossRefs.tech_id,
REC_vehicle_crossRefs.itemDirectoryVehicleRef,
REC_vehicle_crossRefs.identifierType,
REC_vehicle_crossRefs.identifier
--REC_vehicle_crossRefs.versionYear,
--REC_vehicle_crossRefs.versionTrimester,
--REC_vehicle_crossRefs.generation,-- add
--REC_vehicle_crossRefs.DIMENSIONS,-- add
--REC_vehicle_crossRefs.MODEL_GEN,-- add
--REC_vehicle_crossRefs.VEHICULE_TYPE,
--REC_vehicle_crossRefs.capcode
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_crossRefs
        Set       
identifierType = REC_vehicle_crossRefs.identifierType,
identifier = REC_vehicle_crossRefs.identifier

        where   itemDirectoryVehicleRef = REC_vehicle_crossRefs.itemDirectoryVehicleRef;
      ---  and     versionYear = REC_vehicle_crossRefs.versionYear
      ---  and     versionTrimester = REC_vehicle_crossRefs.versionTrimester 
      ---  and     generation = REC_vehicle_crossRefs.generation
      ---  and     DIMENSIONS = REC_vehicle_crossRefs.DIMENSIONS
      --  and     MODEL_GEN = REC_vehicle_crossRefs.MODEL_GEN
      ---  and     BLVD = REC_vehicle_crossRefs.BLVD ;
        

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_crossRefs','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_crossRefs','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   

          
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;

  END ALIM_vehicle_crossRefs;





  FUNCTION ALIM_vehicle_pricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

---- pas de doublons

  Cursor C_veh_pricings Is
  Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
------versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
------versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
'VP' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
B.EffectiveFrom as priceStartDate,
B.EffectiveTo as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDPrices_VP B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VP'
 and veh.validityStartDate <= b.effectivefrom and (veh.validityEndDate >= b.effectiveto or b.effectiveto is null )  -- validityStartDate <= NVDPrices.EffectiveFrom and (validityEndDate >= NVDPrices.EffectiveTo or NVDPrices.EffectiveTo == blank)     

union

  Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH  
------versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
------versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
------generation,-- add
------DIMENSIONS,  -- add
-------MODEL_GEN,-- add
'VU' as VEHICULE_TYPE,
NULL AS tariffAreaCode,
NULL AS priceCode,
NULL AS priceType,
NULL AS priceTypeCustomer,
B.EffectiveFrom as priceStartDate,
B.EffectiveTo as priceEndDate,
NULL AS vatAmount,
B.Basic AS priceET,
NULL AS priceIT,
NULL AS priceIncludeVAT,
'GBP' AS currency,
NULL AS immAmount,
NULL AS immRate,
NULL AS novaAmount,
NULL AS novaRate,
B.Basic AS priceWithoutOtrCostIT,
NULL AS priceWithoutOtrCostET,
NULL AS priceWithoutOtrCostIncludeVAT

    FROM MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDPrices_VU B
 where  veh.tech_id = B.Id and veh.VEHICULE_TYPE = 'VU'
 and veh.validityStartDate <= b.effectivefrom and (veh.validityEndDate >= b.effectiveto or b.effectiveto is null )   
;


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','## Alimentation de la table MKTREF.REC_veh_pricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_pricings','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;

  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_pricings IN C_veh_pricings
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_pricings
              ( 
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
tariffAreaCode,
priceCode,
priceType,
priceTypeCustomer,
priceStartDate,
priceEndDate,
vatAmount,
priceET,
priceIT,
priceIncludeVAT,
currency,
immAmount,
immRate,
novaAmount,
novaRate,
priceWithoutOtrCostIT,
priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT
              )
        VALUES
              (  
REC_veh_pricings.tech_id,    ------ AJOUT POUR JOINTURE   
REC_veh_pricings.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_pricings.versionYear,------ AJOUT POUR JOINTURE  
------REC_veh_pricings.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_pricings.generation,-- add
------REC_veh_pricings.DIMENSIONS,  -- add
------REC_veh_pricings.MODEL_GEN,-- add
REC_veh_pricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_pricings.tariffAreaCode,
REC_veh_pricings.priceCode,
REC_veh_pricings.priceType,
REC_veh_pricings.priceTypeCustomer,
REC_veh_pricings.priceStartDate,
REC_veh_pricings.priceEndDate,
REC_veh_pricings.vatAmount,
REC_veh_pricings.priceET,
REC_veh_pricings.priceIT,
REC_veh_pricings.priceIncludeVAT,
REC_veh_pricings.currency,
REC_veh_pricings.immAmount,
REC_veh_pricings.immRate,
REC_veh_pricings.novaAmount,
REC_veh_pricings.novaRate,
REC_veh_pricings.priceWithoutOtrCostIT,
REC_veh_pricings.priceWithoutOtrCostET,
REC_veh_pricings.priceWithoutOtrCostIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_pricings
        Set        
tech_id          =      REC_veh_pricings.tech_id ,
tariffAreaCode = REC_veh_pricings.tariffAreaCode,
priceCode = REC_veh_pricings.priceCode,
priceType = REC_veh_pricings.priceType,
priceTypeCustomer = REC_veh_pricings.priceTypeCustomer,
--priceStartDate = REC_veh_pricings.priceStartDate,
priceEndDate = REC_veh_pricings.priceEndDate,
vatAmount = REC_veh_pricings.vatAmount,
priceET = REC_veh_pricings.priceET,
priceIT = REC_veh_pricings.priceIT,
priceIncludeVAT = REC_veh_pricings.priceIncludeVAT,
currency = REC_veh_pricings.currency,
immAmount = REC_veh_pricings.immAmount,
immRate = REC_veh_pricings.immRate,
novaAmount = REC_veh_pricings.novaAmount,
novaRate = REC_veh_pricings.novaRate,
priceWithoutOtrCostIT = REC_veh_pricings.priceWithoutOtrCostIT,
priceWithoutOtrCostET = REC_veh_pricings.priceWithoutOtrCostET,
priceWithoutOtrCostIncludeVAT = REC_veh_pricings.priceWithoutOtrCostIncludeVAT,
VEHICULE_TYPE = REC_veh_pricings.VEHICULE_TYPE  

        where  itemDirectoryVehicleRef = REC_veh_pricings.itemDirectoryVehicleRef 
                and priceStartDate = REC_veh_pricings.priceStartDate
        ;
        ------and versionYear = REC_veh_pricings.versionYear
       ------ ------and versionTrimester = REC_veh_pricings.versionTrimester 
        ------and generation = REC_veh_pricings.generation -- add
      ------  and DIMENSIONS = REC_veh_pricings.DIMENSIONS  -- add
      ------  and MODEL_GEN = REC_veh_pricings.MODEL_GEN  -- add


       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM')) 
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        --Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings',to_char(REC_veh_pricings.itemDirectoryVehicleRef)|| '-' || to_char(REC_veh_pricings.priceStartDate) || '-' || to_char(REC_veh_pricings.MODEL_GEN) );
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_pricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_pricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_vehicle_pricings;




  FUNCTION ALIM_vehicle_options (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;
  
  

  Cursor C_veh_options Is
  
    Select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
------veh.versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
------veh.versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
------veh.generation,-- add
------veh.DIMENSIONS,  -- add
------veh.MODEL_GEN,-- add
'VP' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (44, 45, 73, 74, 75, 76, 81, 82, 86, 90, 97) then 'C' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate,
B.description as description,
B.longdescription as longdescription,
A.effectivefrom as effectivefrom,
A.effectiveto as effectiveto,
A.basic as basic

from mktqt_vehicle veh, mktref.mktqt_NVDOption_VP A, mktref.mktqt_NVDDictionaryOption_VP B, mktref.mktqt_NVDPackContents_VP C, MKTQT_NVDPackPeriods_VP D
where veh.tech_id = A.id and veh.validityStartDate  = A.effectivefrom and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode (+) 
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)

union   

select distinct
veh.tech_id AS tech_id, ------ AJOUT POUR JOINTURE AVEC MKTQT_NVDPrices_VP
veh.itemDirectoryVehicleRef as itemDirectoryVehicleRef,  ------ AJOUT POUR JOINTURE AVEC VEH
------veh.versionYear	as versionYear,   ------ AJOUT POUR JOINTURE AVEC VEH
------veh.versionTrimester as versionTrimester,   ------ AJOUT POUR JOINTURE AVEC VEH
------veh.generation,-- add
------veh.DIMENSIONS,  -- add
------veh.MODEL_GEN,-- add
'VU' as VEHICULE_TYPE, ------ AJOUT POUR JOINTURE
A.optioncode as code,
NULL as constructorCode,
(case when B.catcode in (103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113) then 'C' else 'O' end) as typeCode,
--(case when exists( select 1 from  mktref.MKTQT_NVDPackPeriods_VP D where D.periodcode = C.periodcode  )then 'True' else 'False' end) as isPack,
(case when D.periodcode is not null then 'True' else 'False' end) as isPack,
NULL as isAgregated,
NULL as startDate,
NULL as endDate,
B.description as description,
B.longdescription as longdescription,
A.effectivefrom as effectivefrom,
A.effectiveto as effectiveto,
A.basic as basic

from mktqt_vehicle veh, mktref.mktqt_NVDOption_VU A, mktref.mktqt_NVDDictionaryOption_VU B, mktref.mktqt_NVDPackContents_VU C, MKTQT_NVDPackPeriods_VU D
where veh.tech_id = A.id and veh.validityStartDate    = A.effectivefrom and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode (+)
and A.optioncode = C.optioncode (+) 
and C.periodcode = D.periodcode (+)
  
; 
 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options','## Alimentation de la table MKTREF.MKTQT_vehicle_options ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  

  FOR REC_veh_options IN C_veh_options
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_options
              (  
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
constructorCode,
typeCode,
isPack,
isAgregated,
startDate,
endDate,
description, --add
longdescription, --add
effectivefrom, --add
effectiveto, --add
basic  --add
              )
              
        VALUES
              (  
REC_veh_options.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_options.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_options.versionYear,------ AJOUT POUR JOINTURE  
------REC_veh_options.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_options.generation,-- add
------REC_veh_options.DIMENSIONS,  -- add
------REC_veh_options.MODEL_GEN,-- add
REC_veh_options.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_options.code,
REC_veh_options.constructorCode,
REC_veh_options.typeCode,
REC_veh_options.isPack,
REC_veh_options.isAgregated,
REC_veh_options.startDate,
REC_veh_options.endDate,
REC_veh_options.description, --add
REC_veh_options.longdescription, --add
REC_veh_options.effectivefrom, --add
REC_veh_options.effectiveto, --add
REC_veh_options.basic  --add
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_options
        Set       

--code = REC_veh_options.code,
tech_id = REC_veh_options.tech_id,
VEHICULE_TYPE = REC_veh_options.VEHICULE_TYPE,
constructorCode = REC_veh_options.constructorCode,
typeCode = REC_veh_options.typeCode,
isPack = REC_veh_options.isPack,
isAgregated = REC_veh_options.isAgregated,
startDate = REC_veh_options.startDate,
endDate  = REC_veh_options.endDate,
description = REC_veh_options.description, --add
longdescription = REC_veh_options.longdescription, --add
effectivefrom = REC_veh_options.effectivefrom, --add
effectiveto = REC_veh_options.effectiveto, --add
basic = REC_veh_options.basic  --add

        where code = REC_veh_options.code
        and   itemDirectoryVehicleRef = REC_veh_options.itemDirectoryVehicleRef;
        ------and   versionYear = REC_veh_options.versionYear
       ------ and   versionTrimester = REC_veh_options.versionTrimester 
       ------ and generation = REC_veh_options.generation  -- add
        ------and DIMENSIONS = REC_veh_options.DIMENSIONS  -- add
       ------ and MODEL_GEN = REC_veh_options.MODEL_GEN  ;-- add;
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_options','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_options','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
   
    
  END ALIM_vehicle_options;





  FUNCTION ALIM_vehicle_optionslabels (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;



  Cursor C_veh_optionslabels Is
  
  select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code as code, --ADD
'en_GB' as language,
description as labelShort,
longdescription as labelLong

from MKTQT_vehicle_options;
  

 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionslabels','## Alimentation de la table MKTREF.MKTQT_vehicle_optionslabels ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionslabels','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionslabels IN C_veh_optionslabels
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionslabels
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
language,
labelShort,
labelLong
              )
        VALUES
              (  
REC_veh_optionslabels.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_optionslabels.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_optionslabels.versionYear,------ AJOUT POUR JOINTURE  
------REC_veh_optionslabels.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_optionslabels.generation,-- add
------REC_veh_optionslabels.DIMENSIONS,  -- add
------REC_veh_optionslabels.MODEL_GEN,-- add
REC_veh_optionslabels.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_optionslabels.code,
REC_veh_optionslabels.language,
REC_veh_optionslabels.labelShort,
REC_veh_optionslabels.labelLong
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionslabels
        Set       

tech_id = REC_veh_optionslabels.tech_id,
VEHICULE_TYPE = REC_veh_optionslabels.VEHICULE_TYPE,
labelShort = REC_veh_optionslabels.labelShort,
labelLong = REC_veh_optionslabels.labelLong

        where code = REC_veh_optionslabels.code 
        and language = REC_veh_optionslabels.language
        and itemDirectoryVehicleRef = REC_veh_optionslabels.itemDirectoryVehicleRef ;------ AJOUT POUR JOINTURE  
      ------  and versionYear = REC_veh_optionslabels.versionYear ------ AJOUT POUR JOINTURE  
     ------   and versionTrimester = REC_veh_optionslabels.versionTrimester ------ AJOUT POUR JOINTURE  
     ------   and generation = REC_veh_optionslabels.generation -- add
     ------   and DIMENSIONS = REC_veh_optionslabels.DIMENSIONS  -- add
        ------and MODEL_GEN = REC_veh_optionslabels.MODEL_GEN  ;-- add

        
        
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionslabels','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionslabels','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   

   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;


  END ALIM_vehicle_optionslabels;





  FUNCTION ALIM_vehicle_optionspricings (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_veh_optionspricings Is
  select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code as code,
NULL as territorialityCode,
NULL as pricebookCode,
NULL as pricebookType,
NULL as pricebookTypeCustomer,
effectiveFrom as pricebookStartDate,
effectiveTo as pricebookEndDate,
NULL as vatAmount,
'GBP' as currency,
Basic as priceET,
NULL as priceIT,
NULL as priceIncludeVAT,
NULL as basePriceWithChargesET,
NULL as basePriceWithChargesIT,
NULL as basePriceWithChargesIncludeVAT

  from MKTQT_vehicle_options;
  
  
 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings','## Alimentation de la table MKTREF.MKTQT_vehicle_optionspricings ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionspricings','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP : ',' ');  


  FOR REC_veh_optionspricings IN C_veh_optionspricings
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_optionspricings
              (
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
code,
territorialityCode,
pricebookCode,
pricebookType,
pricebookTypeCustomer,
pricebookStartDate,
pricebookEndDate,
vatAmount,
currency,
priceET,
priceIT,
priceIncludeVAT,
basePriceWithChargesET,
basePriceWithChargesIT,
basePriceWithChargesIncludeVAT
              )
        VALUES
              (  
REC_veh_optionspricings.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_optionspricings.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_optionspricings.versionYear,------ AJOUT POUR JOINTURE  
------------REC_veh_optionspricings.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_optionspricings.generation,-- add
------REC_veh_optionspricings.DIMENSIONS,  -- add
------REC_veh_optionspricings.MODEL_GEN,-- add
REC_veh_optionspricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_optionspricings.code,
REC_veh_optionspricings.territorialityCode,
REC_veh_optionspricings.pricebookCode,
REC_veh_optionspricings.pricebookType,
REC_veh_optionspricings.pricebookTypeCustomer,
REC_veh_optionspricings.pricebookStartDate,
REC_veh_optionspricings.pricebookEndDate,
REC_veh_optionspricings.vatAmount,
REC_veh_optionspricings.currency,
REC_veh_optionspricings.priceET,
REC_veh_optionspricings.priceIT,
REC_veh_optionspricings.priceIncludeVAT,
REC_veh_optionspricings.basePriceWithChargesET,
REC_veh_optionspricings.basePriceWithChargesIT,
REC_veh_optionspricings.basePriceWithChargesIncludeVAT
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_optionspricings
        Set       
        tech_id = REC_veh_optionspricings.tech_id,    ------ AJOUT POUR JOINTURE
        VEHICULE_TYPE = REC_veh_optionspricings.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
territorialityCode = REC_veh_optionspricings.territorialityCode,
pricebookCode = REC_veh_optionspricings.pricebookCode,
pricebookType = REC_veh_optionspricings.pricebookType,
pricebookTypeCustomer = REC_veh_optionspricings.pricebookTypeCustomer,
pricebookStartDate = REC_veh_optionspricings.pricebookStartDate,
pricebookEndDate = REC_veh_optionspricings.pricebookEndDate,
vatAmount = REC_veh_optionspricings.vatAmount,
currency = REC_veh_optionspricings.currency,
priceET = REC_veh_optionspricings.priceET,
priceIT = REC_veh_optionspricings.priceIT,
priceIncludeVAT = REC_veh_optionspricings.priceIncludeVAT,
basePriceWithChargesET = REC_veh_optionspricings.basePriceWithChargesET,
basePriceWithChargesIT = REC_veh_optionspricings.basePriceWithChargesIT,
basePriceWithChargesIncludeVAT = REC_veh_optionspricings.basePriceWithChargesIncludeVAT

        where  code = REC_veh_optionspricings.code  
        and itemDirectoryVehicleRef = REC_veh_optionspricings.itemDirectoryVehicleRef ;  ------ AJOUT POUR JOINTURE  
     ------   and versionYear = REC_veh_optionspricings.versionYear------ AJOUT POUR JOINTURE  
       ------ and versionTrimester = REC_veh_optionspricings.versionTrimester------ AJOUT POUR JOINTURE  
      ------ ------ and generation = REC_veh_optionspricings.generation-- add
       ------ and DIMENSIONS = REC_veh_optionspricings.DIMENSIONS  -- add
        ------and MODEL_GEN = REC_veh_optionspricings.MODEL_GEN  ;-- add

       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_optionspricings','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_optionspricings','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));

   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;

    
  END ALIM_vehicle_optionspricings;




  FUNCTION ALIM_vehicle_baseEquipments (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;




  Cursor C_veh_baseEquipments Is
Select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDStandardEquipment_VP A, MKTREF.MKTQT_NVDDictionaryOption_VP B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VP'
and A.optioncode = B.optioncode  (+)

union

Select distinct
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
----MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
A.optioncode as externalRef, 
NULL as typeCategoryCode,
'en_GB' as language,
B.description as label

from MKTREF.MKTQT_vehicle veh, MKTREF.MKTQT_NVDStandardEquipment_VU A, MKTREF.MKTQT_NVDDictionaryOption_VU B
where veh.tech_id = A.Id and veh.VEHICULE_TYPE = 'VU'
and A.optioncode = B.optioncode  (+)

; 



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','------------------------------BEGIN------------------------------##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','## Alimentation de la table MKTREF.MKTQT_vehicle_baseEquipments ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_baseEquipments','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'Pour VP + VU : ',' ');  


  FOR REC_veh_baseEquipments IN C_veh_baseEquipments
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_vehicle_baseEquipments
              (   
tech_id,    ------ AJOUT POUR JOINTURE
itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------versionYear,------ AJOUT POUR JOINTURE  
------versionTrimester,------ AJOUT POUR JOINTURE  
------generation,-- add
------DIMENSIONS,  -- add
------MODEL_GEN,-- add
VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
externalRef,
typeCategoryCode,
language,
label
              )
              
        VALUES
              (  
REC_veh_baseEquipments.tech_id,    ------ AJOUT POUR JOINTURE
REC_veh_baseEquipments.itemDirectoryVehicleRef,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.versionYear,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.versionTrimester,------ AJOUT POUR JOINTURE  
------REC_veh_baseEquipments.generation,-- add
------REC_veh_baseEquipments.DIMENSIONS,  -- add
------REC_veh_baseEquipments.MODEL_GEN,-- add
REC_veh_baseEquipments.VEHICULE_TYPE,------ AJOUT POUR JOINTURE  
REC_veh_baseEquipments.externalRef,
REC_veh_baseEquipments.typeCategoryCode,
REC_veh_baseEquipments.language,
REC_veh_baseEquipments.label 
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_vehicle_baseEquipments
        Set        
--externalRef= REC_veh_baseEquipments.externalRef,
tech_id          =      REC_veh_baseEquipments.tech_id  ,
VEHICULE_TYPE = REC_veh_baseEquipments.VEHICULE_TYPE,
typeCategoryCode= REC_veh_baseEquipments.typeCategoryCode,
language= REC_veh_baseEquipments.language,
label= REC_veh_baseEquipments.label 

        where  externalRef          =      REC_veh_baseEquipments.externalRef 
        and  itemDirectoryVehicleRef = REC_veh_baseEquipments.itemDirectoryVehicleRef ;
   ------     and versionYear = REC_veh_baseEquipments.versionYear
    ------    and versionTrimester = REC_veh_baseEquipments.versionTrimester
    ------    and generation = REC_veh_baseEquipments.generation-- add
   ------    and DIMENSIONS = REC_veh_baseEquipments.DIMENSIONS  -- add
     ------   and MODEL_GEN = REC_veh_baseEquipments.MODEL_GEN ;-- add

        
         
       -- and     V_ANNEE          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'YYYY'))
      --  and     V_Mois          = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'MM'))
    --	and     V_JOUR         = TO_NUMBER(TO_CHAR(P_DATE_TRAI, 'DD'))
     --   and V_DATE_SITU  =  Date_situ 
      --  and Code_pays = 'UK';


        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_vehicle_baseEquipments','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_vehicle_baseEquipments','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_vehicle_baseEquipments;

-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------



  FUNCTION ALIM_transco_model_gen (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
 select  distinct
 
                 BRAND_CODE     as  parent,  -- brandCode
                VEHICULE_NAME   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                MODEL_GEN_ID    as code,
                CROSSREF_CODE   as CROSSREF_CODE

 from  MKTREF.MKTQT_MODEL_GEN   MODEL_GEN
; 
 
 
 


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
    Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','--------------------------BEGIN----------------------------');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'model_gen'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent	, --- MAPPING : parent_details_code = parent
'brandCode'	, --parent_details_entity
REC_transco.parent, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'model_gen', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
     
      parent_details_code = REC_transco.parent , --- mapping  parent_details_code = parent;
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label
        
      where  entity = 'model_gen'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'model_gen'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU  
       and crossref_code = REC_transco.crossref_code
        and  parent =   REC_transco.parent ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_model_gen','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_model_gen','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_model_gen;





  FUNCTION ALIM_transco_trim (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_trim_model_gen Is
        
  
 select  distinct
                TRIM.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
                TRIM.VEHICULE_TRIM   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                TRIM.TRIM_ID    as code,
                TRIM.CROSSREF_CODE   as CROSSREF_CODE,
                TRIM.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_TRIM  TRIM, MKTREF.MKTQT_model_gen model_gen
  where TRIM.BRAND_CODE = model_gen.BRAND_CODE 
 and TRIM.VEHICULE_NAME = model_gen.VEHICULE_NAME
  and TRIM.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
; 
 
         
        


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = brandCode ##');
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
       parent_details_code =   REC_transco.parent_details_code_brandcode ,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code 
      and parent = REC_transco.parent ;

         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
  
  
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','##  description_label = model_gen ##');

  FOR REC_transco IN C_transco_trim_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'trim'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.crossref_code	,  --crossref_code
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
'trimLevel', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code ,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label

      where  entity = 'trim'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'trimlevel'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code 
       and parent = REC_transco.parent ; 
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_trim','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_trim','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' '); 
  
  
  
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_trim;






  FUNCTION ALIM_transco_motorisationBLVD (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

--471   generation
--477   generation

  Cursor C_transco_motor_model_gen Is

 select  distinct
                motorisationBLVD.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
                motorisationBLVD.VEHICULE_motorisationBLVD   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                motorisationBLVD.motorisationBLVD_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                motorisationBLVD.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_motorisationBLVD  motorisationBLVD, MKTREF.MKTQT_model_gen model_gen
 where motorisationBLVD.BRAND_CODE = model_gen.BRAND_CODE 
 and motorisationBLVD.VEHICULE_NAME = model_gen.VEHICULE_NAME
 and motorisationBLVD.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
 
; 




 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
      and crossref_code = REC_transco.description_label 
      and parent = REC_transco.parent ; --- mapping  parent_details_code = parent

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','##  description_label = model_gen ##'); 
   
   
  FOR REC_transco IN C_transco_motor_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'motorisationBLVD'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent	,
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label  
        
      where  entity = 'motorisationBLVD'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and parent = REC_transco.parent; --- mapping  parent_details_code = parent

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_motorisationBLVD','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_motorisationBLVD','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_motorisationBLVD;






  FUNCTION ALIM_transco_dimensions (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

-- 14 :
--32 payLoad  : charge utile  (VU)

  Cursor C_transco_dimensions_model_gen Is

 select  distinct
                dimensions.BRAND_CODE || model_gen.model_gen_id     as  parent,  -- brandCode
                dimensions.VEHICULE_dimensions   as  description_label,
                --VEHICULE_TYPE,
                --model_gen_num,
                dimensions.dimensions_ID    as code,
               -- motorisationBLVD.CROSSREF_CODE   as CROSSREF_CODE,
                dimensions.BRAND_CODE as parent_details_code_brandcode, -- 1 loop
                model_gen.model_gen_id as parent_details_code    -- 2 loop

 from  MKTREF.MKTQT_dimensions  dimensions, MKTREF.MKTQT_model_gen model_gen
  where dimensions.BRAND_CODE = model_gen.BRAND_CODE 
 and dimensions.VEHICULE_NAME = model_gen.VEHICULE_NAME
 and dimensions.VEHICULE_TYPE = model_gen.VEHICULE_TYPE
 
 and dimensions.dimensions_id != '  '  --- AJOUT 19 SEPTEMBRE

; 



 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = brandCode ##'); 
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;




  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'brandCode'	, --parent_details_entity
REC_transco.parent_details_code_brandcode, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code_brandcode,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mappring translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and  parent = REC_transco.parent; --- mapping  parent_details_code = parent
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   
   
  ------------ model_gen
  V_INS  := 0;
  V_UPD  := 0;
  Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','##  description_label = model_gen ##'); 
   

  FOR REC_transco IN C_transco_dimensions_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES
              (  
'dimensions'			, --Entity
REC_transco.code			, --code
to_date('07/01/2022', 'MM/DD/YYYY')	, --startValidityDate
to_date('12/31/2999', 'MM/DD/YYYY')  , --endValidityDate
REC_transco.parent, --REC_transco.parent
'model_gen'	, --parent_details_entity
REC_transco.parent_details_code, -- parent_details_code		
'en_GB', --description_language		,
REC_transco.description_label   , --description_label
'CAP',  -- crossref_typecode		,
'GB', --crossref_country		,
REC_transco.description_label	,  --crossref_code  --- MAPPING : crossref_code = description_label
'en_GB',  --translation_language	,
REC_transco.description_label	, --- MAPPING : translation_label = description_label
' ', --bomAttribut		,
'UK'    --countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent_details_code =   REC_transco.parent_details_code,   -- parent = parent_details_code 
      translation_label = REC_transco.description_label,  --- mapping translation_label = description_label
      description_label = REC_transco.description_label
      
      where  entity = 'dimensions'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'model_gen'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = ' '
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.description_label 
       and parent = REC_transco.parent ; --- mapping  parent_details_code = parent
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'ALIM_transco_dimensions','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'ALIM_transco_dimensions','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
      
   
   
   
   
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END ALIM_transco_dimensions;








  FUNCTION UPDATE_transco_model (  NOMLOG      VARCHAR2,
                                P_DATE_TRAI DATE DEFAULT SYSDATE,
                                V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2) Return Number AS
BEGIN
  DECLARE

  V_ERR   NUMBER := 0;
  V_INS   NUMBER := 0;
  V_UPD   NUMBER := 0;
        V_ANNEE NUMBER ;
        V_MOIS  NUMBER ;
        V_JOUR NUMBER;
        V_Date_Situ Date;
        

  FILE_ID UTL_FILE.FILE_TYPE;
  RES     NUMBER := 0;

  Cursor C_transco_model_gen Is
 
  select 
  
  Entity			    as Entity			,
code			as code			,
startValidityDate	as startValidityDate	,
endValidityDate		as endValidityDate		,
parent			as parent			,
parent_details_entity		   as parent_details_entity		,
--parent_details_code		as parent_details_code		,
description_language		as description_language		,
description_label		as description_label		,
crossref_typecode		as crossref_typecode		,
crossref_country		as crossref_country		,
crossref_code			as crossref_code			,
translation_language	as translation_language	,
translation_label	as translation_label	,
bomAttribut		as bomAttribut		,
countryScope	as countryScope	
  from mktref.MKTQT_nomenclature where entity = 'model'
  

; 
  
  
  
  
  


 /*******************************************************************************/
  BEGIN

    File_Id := mkt.mktqaut.F_Open(Nomlog);

  Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','## Alimentation de la table MKTREF.MKTQT_nomenclature ##');
  RES := mkt.mktQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','## Flux BILAN   ##');
  
          
        SELECT trunc(P_DATE_TRAI) INTO V_DATE_SITU FROM dual;
        Select To_Number(To_Char(V_DATE_SITU,'MM')) Into V_Mois From Dual ;
        SELECT to_number(to_char(V_DATE_SITU,'YYYY'))   INTO V_ANNEE  from dual;
        SELECT to_number(to_char(V_DATE_SITU,'DD'))   INTO V_JOUR  from dual;


    


  FOR REC_transco IN C_transco_model_gen
  LOOP

       /*************************************************************************/
        BEGIN

        IF V_ERR=1 THEN EXIT;
        END IF;

        IF MOD(V_UPD + V_INS, 100)=0 THEN COMMIT;
        END IF;
        

        INSERT INTO MKTREF.MKTQT_nomenclature
              (   
Entity			,
code			,
startValidityDate	,
endValidityDate		,
parent			,
parent_details_entity		,
parent_details_code		,
description_language		,
description_label		,
crossref_typecode		,
crossref_country		,
crossref_code			,
translation_language	,
translation_label	,
bomAttribut		,
countryScope		
              )
        VALUES  --REC_transco
              (  
REC_transco.Entity			,
REC_transco.code			,
REC_transco.startValidityDate	,
REC_transco.endValidityDate		,
REC_transco.parent			,
REC_transco.parent_details_entity		,
REC_transco.parent		,   --- parent_details_code
REC_transco.description_language		,
REC_transco.description_label		,
REC_transco.crossref_typecode		,
REC_transco.crossref_country		,
REC_transco.crossref_code			,
REC_transco.translation_language	,
REC_transco.translation_label	,
REC_transco.bomAttribut		,
REC_transco.countryScope	
              );

        V_INS := V_INS + 1;

        EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
				Update  MKTREF.MKTQT_nomenclature
        Set        
        
      parent =   REC_transco.parent,
      parent_details_code = REC_transco.parent, ------- mise a jour
      translation_label = REC_transco.translation_label,  
      description_label = REC_transco.description_label
        
      where  entity = 'model'
      and startValidityDate = to_date('07/01/2022', 'MM/DD/YYYY')
      and endValidityDate = to_date('12/31/2999', 'MM/DD/YYYY')
      and parent_details_entity = 'brandCode'
      and description_language = 'en_GB'
      and crossref_typecode = 'CAP'
      and crossref_country = 'GB'
      and translation_language = 'en_GB'
      and bomAttribut = 'familyCode'
      and countryScope = 'UK' 
       and code = REC_transco.code
       --and description_label = REC_transco.description_label  --NOUVEAU 
       and crossref_code = REC_transco.crossref_code ;
         

        V_UPD := V_UPD + 1;
        
        WHEN OTHERS THEN
				COMMIT;
				V_ERR := 1;

				V_Error := Substr('SQLCODE: '||To_Char(Sqlcode)||' -ERROR: '||Sqlerrm,1,4000);
				Res := mkt.mktqaut.F_Write(File_Id, 'UPDATE_transco_model','Message Erreur pl/sql :'||Sqlerrm,'E');
        RETURN V_ERR;
        END;
   END LOOP;

   COMMIT;

   V_INSERTS := V_INS;
   V_Updates := V_Upd;
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'UPDATE_transco_model','Nombre de mises a jour : '||TO_CHAR(V_UPD)||', d''insertions : '||TO_CHAR(V_INS));
   RES := mkt.MKTQAUT.F_WRITE(FILE_ID, 'I',' ',' ');
   
   
   
   UTL_FILE.FCLOSE(FILE_ID);
   RETURN V_ERR;
   End;
    
  END UPDATE_transco_model;

--------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------








	FUNCTION MAIN_ALIM_vehicle (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     /* erreur = 0 ou 1 */

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	
     ---------------01			
      V_ERR     := ALIM_MODEL_GEN( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------02
      V_ERR     := ALIM_TRIM( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------03
      V_ERR     := ALIM_MOTORISATIONBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
    ---------------04
      V_ERR     := ALIM_DIMENSIONS( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
		---------------05	
			V_ERR     := ALIM_vehicle( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

		---------------06		
			V_ERR     := ALIM_vehicle_crossRefs( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
      
        ---------------07	--ON EST LA
			V_ERR     := ALIM_vehicle_pricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------08
  	V_ERR     := ALIM_vehicle_options( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
        
            
         -------------------09
			V_ERR     := ALIM_vehicle_optionslabels( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------10
			V_ERR     := ALIM_vehicle_optionspricings( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;            
            
         -------------------11
			V_ERR     := ALIM_vehicle_baseEquipments( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;          
 
                        

			
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_vehicle;




	FUNCTION MAIN_ALIM_transco (NOMLOG VARCHAR2, P_DATE_TRAI DATE,  V_INSERTS   OUT NUMBER,
                                V_UPDATES   OUT NUMBER,
                                V_Error     Out Varchar2 ) RETURN NUMBER IS
		
		V_RET NUMBER := 0;                     /* erreur = 0 ou 1 */

	--INSERTS   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_UPDATES   NUMBER := 0;			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/
	--	V_ERROR   VARCHAR2(255);  			/* DECLARATION DU PARAMETRE DE LA FONCTION D'ALIMENTAITON*/

		V_ERR   NUMBER := 0;      


        BEGIN	

		---------------01			
			V_ERR     := ALIM_transco_model_gen( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;

		---------------02			
			V_ERR     := ALIM_transco_trim( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        ---------------03			
			V_ERR     := ALIM_transco_motorisationBLVD( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
        -------------------04
			V_ERR     := ALIM_transco_dimensions( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
            
      -------------------05
			V_ERR     := UPDATE_transco_model( NOMLOG , P_DATE_TRAI , V_INSERTS , V_UPDATES , V_ERROR );  
			IF V_ERR = 1 THEN
				V_RET := 1;
				RETURN V_RET;
			END IF;
			
			RETURN V_RET;

		/* AJOUTER APRES end; */
		
	END MAIN_ALIM_transco;


  



END MKTQA_CAP_UK_TEST_BIS;
